#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

import sys
import os
import subprocess
from datetime import datetime

def run_full_api_testing():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    """
    
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API –ò–°–¢–û–ß–ù–ò–ö–û–í")
    print("=" * 60)
    
    # –®–∞–≥ 1: –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\nüì° –®–ê–ì 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
        sys.path.insert(0, '/Users/tumowuh/Desktop/market analysis')
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        from api_research import APIResearcher
        from logger_config import logger
        
        # –°–æ–∑–¥–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        researcher = APIResearcher()
        print("   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è API...")
        
        results = researcher.run_comprehensive_research()
        print("   ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        recommendations = researcher.generate_recommendations(results)
        print("   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        summary = results['summary']
        print(f"\nüìä –ö–†–ê–¢–ö–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ API: {results['total_apis_tested']}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {summary['active_apis']}")
        print(f"   –° –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏: {summary['limited_apis']}")
        print(f"   –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {summary['error_apis']}")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate']}%")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
        return False
    
    # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    print("\nüìä –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    try:
        import matplotlib.pyplot as plt
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        fig, ax = plt.subplots(1, 1, figsize=(10, 6))
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ API
        status_counts = {
            '–ê–∫—Ç–∏–≤–Ω—ã–µ': summary['active_apis'],
            '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ': summary['limited_apis'],
            '–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ': summary['error_apis']
        }
        
        colors = ['#2ecc71', '#f39c12', '#e74c3c']
        bars = ax.bar(status_counts.keys(), status_counts.values(), color=colors)
        
        ax.set_title('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤', fontsize=14, fontweight='bold')
        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ API')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height,
                   f'{int(height)}', ha='center', va='bottom')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        output_path = '/Users/tumowuh/Desktop/market analysis/api_test_results_simple.png'
        plt.savefig(output_path, dpi=300, bbox_inches='tight', facecolor='white')
        print(f"   ‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: api_test_results_simple.png")
        
        plt.close()
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    
    # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    print("\nüìù –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    try:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_path = f'/Users/tumowuh/Desktop/market analysis/api_testing_summary_{timestamp}.md'
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("# –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API –ò–°–¢–û–ß–ù–ò–ö–û–í\n\n")
            f.write(f"*–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}*\n\n")
            
            f.write("## üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n")
            f.write(f"- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ API: **{results['total_apis_tested']}**\n")
            f.write(f"- –ê–∫—Ç–∏–≤–Ω—ã—Ö: **{summary['active_apis']}**\n")
            f.write(f"- –° –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏: **{summary['limited_apis']}**\n")
            f.write(f"- –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: **{summary['error_apis']}**\n")
            f.write(f"- –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: **{summary['success_rate']}%**\n\n")
            
            f.write("## üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\n\n")
            
            if recommendations['primary_sources']:
                f.write("### ‚úÖ –û–°–ù–û–í–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò\n\n")
                for source in recommendations['primary_sources']:
                    f.write(f"- **{source['name']}**\n")
                f.write("\n")
            
            if recommendations['secondary_sources']:
                f.write("### üî∂ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò\n\n")
                for source in recommendations['secondary_sources']:
                    f.write(f"- **{source['name']}** *(–¥–æ—Å—Ç—É–ø: {source['access_method']})*\n")
                f.write("\n")
            
            f.write("## üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´\n\n")
            for api_name, api_data in results['apis'].items():
                status_emoji = "‚úÖ" if api_data['status'] == 'active' else "üî∂" if api_data['status'] in ['limited_public', 'requires_token'] else "‚ùå"
                f.write(f"### {status_emoji} {api_data['name']}\n")
                f.write(f"- **–°—Ç–∞—Ç—É—Å:** {api_data['status']}\n")
                f.write(f"- **URL:** {api_data.get('base_url', 'N/A')}\n")
                if 'error' in api_data:
                    f.write(f"- **–û—à–∏–±–∫–∞:** {api_data['error']}\n")
                f.write("\n")
        
        print(f"   ‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    # –®–∞–≥ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ tasks.md
    print("\nüìã –®–ê–ì 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–¥–∞—á...")
    try:
        from update_tasks import update_tasks_with_api_testing
        success = update_tasks_with_api_testing()
        
        if success:
            print("   ‚úÖ –§–∞–π–ª tasks.md –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            print("   ‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è tasks.md: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    print("\n" + "="*60)
    print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ó–ê–í–ï–†–®–ï–ù–û!")
    print("="*60)
    
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {summary['success_rate']}%")
    print(f"   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(recommendations['primary_sources'])}")
    print(f"   ‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(recommendations['secondary_sources'])}")
    
    print(f"\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
    print(f"   ‚Ä¢ api_testing_summary_{timestamp}.md - —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç")
    if os.path.exists('/Users/tumowuh/Desktop/market analysis/api_test_results_simple.png'):
        print(f"   ‚Ä¢ api_test_results_simple.png - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    print(f"   ‚Ä¢ api_research_results_{timestamp}.json - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print(f"   ‚Ä¢ tasks.md - –æ–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á")
    
    print(f"\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print(f"   1. –ò–∑—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ API –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print(f"   2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ API –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
    print(f"   3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å fallback –º–µ—Ö–∞–Ω–∏–∑–º")
    print(f"   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    return True

if __name__ == "__main__":
    run_full_api_testing()