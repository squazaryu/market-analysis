#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ë–ü–ò–§
- –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–µ CSV —Ñ–∞–π–ª—ã
- –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å InvestFunds.ru –¥–ª—è –≤—Å–µ—Ö 96 —Ñ–æ–Ω–¥–æ–≤
- –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π CSV —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
- –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—à–±–æ—Ä–¥
"""

import pandas as pd
from datetime import datetime
from pathlib import Path
import shutil
import json
from investfunds_parser import InvestFundsParser

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ë–ü–ò–§")
    print("="*60)
    
    # 1. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("\nüì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    archive_old_data()
    
    # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π CSV —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("\nüîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å InvestFunds.ru...")
    create_fresh_data()
    
    print("\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üåê –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∞—à–±–æ—Ä–¥: python3 simple_dashboard.py")

def archive_old_data():
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–µ CSV —Ñ–∞–π–ª—ã"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∞—Ä—Ö–∏–≤–∞
        archive_dir = Path("data_archive")
        archive_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        current_archive = archive_dir / f"archive_{timestamp}"
        current_archive.mkdir(exist_ok=True)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ CSV —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        data_files = list(Path('.').glob('enhanced_etf_data_*.csv'))
        
        if data_files:
            print(f"   –ù–∞–π–¥–µ–Ω–æ {len(data_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏")
            for file in data_files:
                shutil.move(str(file), str(current_archive / file.name))
                print(f"   ‚úÖ {file.name} ‚Üí –∞—Ä—Ö–∏–≤")
        else:
            print("   ‚ö†Ô∏è  –§–∞–π–ª—ã –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: {e}")

def create_fresh_data():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π CSV —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        parser = InvestFundsParser()
        all_tickers = list(parser.fund_mapping.keys())
        
        print(f"   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(all_tickers)} —Ñ–æ–Ω–¥–æ–≤...")
        
        fresh_data = []
        processed = 0
        
        for ticker in all_tickers:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                fund_data = parser.find_fund_by_ticker(ticker)
                
                if fund_data:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥)
                    return_result = calculate_adaptive_return(parser, ticker, fund_data)
                    if isinstance(return_result, tuple):
                        annual_return, return_period = return_result
                    else:
                        annual_return, return_period = return_result, '–Ω/–¥'
                    
                    # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ 1 –≥–æ–¥, –µ—Å–ª–∏ –µ—Å—Ç—å
                    original_annual = fund_data.get('annual_return', 0)
                    
                    fund_name = fund_data.get('name', f'–ë–ü–ò–§ {ticker}')
                    volatility = calculate_volatility(annual_return if annual_return != 0 else original_annual, fund_name, ticker)
                    sharpe_ratio = calculate_sharpe(annual_return, volatility)
                    
                    fund_record = {
                        'ticker': ticker,
                        'name': fund_data.get('name', f'–ë–ü–ò–§ {ticker}'),
                        'annual_return': round(annual_return, 2),
                        'return_period': return_period,  # –ü–µ—Ä–∏–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                        'original_annual_return': round(original_annual, 2),  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≥–æ–¥–æ–≤–∞—è –µ—Å–ª–∏ –µ—Å—Ç—å
                        'volatility': round(volatility, 2),
                        'sharpe_ratio': round(sharpe_ratio, 3),
                        'current_price': round(fund_data.get('unit_price', 100), 4),
                        'avg_daily_value_rub': int(fund_data.get('volume_rub', 1000000)),
                        'category': get_category_by_ticker(ticker),
                        'data_quality': 1.0,
                        'investfunds_url': f"https://investfunds.ru/funds/{parser.fund_mapping[ticker]}/",
                        'mgmt_fee': round(fund_data.get('management_fee', 0), 3),
                        'total_fee': round(fund_data.get('total_expenses', 0), 3),
                        'nav_billions': round(fund_data.get('nav', 0) / 1_000_000_000, 3),
                        
                        # –ù–æ–≤—ã–µ –ø–æ–ª—è
                        'return_1m': round(fund_data.get('return_1m', 0), 2),
                        'return_3m': round(fund_data.get('return_3m', 0), 2),
                        'return_6m': round(fund_data.get('return_6m', 0), 2),
                        'return_12m': round(fund_data.get('return_12m', 0), 2),
                        'return_36m': round(fund_data.get('return_36m', 0), 2),
                        'return_60m': round(fund_data.get('return_60m', 0), 2),
                        'bid_price': round(fund_data.get('bid_price', 0), 4),
                        'ask_price': round(fund_data.get('ask_price', 0), 4),
                        'volume_rub': int(fund_data.get('volume_rub', 0)),
                        'depositary_name': fund_data.get('depositary_name', ''),
                        'management_fee': round(fund_data.get('management_fee', 0), 3),
                        'depositary_fee': round(fund_data.get('depositary_fee', 0), 4),
                        'other_expenses': round(fund_data.get('other_expenses', 0), 3),
                        'total_expenses': round(fund_data.get('total_expenses', 0), 3)
                    }
                    
                    fresh_data.append(fund_record)
                    processed += 1
                    
                    if processed % 10 == 0:
                        print(f"   ‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed}/{len(all_tickers)} —Ñ–æ–Ω–¥–æ–≤...")
                        
                else:
                    print(f"   ‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {ticker}: {e}")
                continue
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if fresh_data:
            df = pd.DataFrame(fresh_data)
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f'enhanced_etf_data_{timestamp}.csv'
            df.to_csv(filename, index=False, encoding='utf-8')
            
            print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {filename}")
            print(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ {len(fresh_data)} —Ñ–æ–Ω–¥–∞–º:")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {df['annual_return'].mean():.1f}%")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {df['volatility'].mean():.1f}%") 
            print(f"   ‚Ä¢ –û–±—â–µ–µ –°–ß–ê: {df['nav_billions'].sum():.0f} –º–ª—Ä–¥ ‚ÇΩ")
            
            return filename
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def calculate_volatility(annual_return, fund_name="", ticker=""):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–æ–≤ –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    try:
        from auto_fund_classifier import classify_fund_by_name
        classification = classify_fund_by_name(ticker, fund_name, "")
        asset_type = classification['category'].lower()
    except:
        asset_type = ""
    
    # –ë–∞–∑–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–æ–≤ (—Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ)
    if '–¥–µ–Ω–µ–∂–Ω' in asset_type:
        # –î–µ–Ω–µ–∂–Ω—ã–π —Ä—ã–Ω–æ–∫ - —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫ (1-3%)
        base_vol = 2.0
        vol_factor = 0.1
        min_vol, max_vol = 1.0, 5.0
    elif '–æ–±–ª–∏–≥–∞—Ü' in asset_type:
        # –û–±–ª–∏–≥–∞—Ü–∏–∏ - –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫ (3-8%)
        base_vol = 5.0
        vol_factor = 0.3
        min_vol, max_vol = 3.0, 12.0
    elif '–∑–æ–ª–æ—Ç' in asset_type or '–¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω' in asset_type:
        # –ó–æ–ª–æ—Ç–æ - —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ (12-20%)
        base_vol = 15.0
        vol_factor = 0.5
        min_vol, max_vol = 10.0, 25.0
    elif '–≤–∞–ª—é—Ç–Ω' in asset_type:
        # –í–∞–ª—é—Ç–Ω—ã–µ - –Ω–∏–∑–∫–∏–π-—Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ (5-12%)
        base_vol = 8.0
        vol_factor = 0.4
        min_vol, max_vol = 5.0, 15.0
    elif '–∞–∫—Ü–∏' in asset_type:
        # –ê–∫—Ü–∏–∏ - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ (15-35%)
        base_vol = 20.0
        vol_factor = 0.8
        min_vol, max_vol = 15.0, 40.0
    else:
        # –°–º–µ—à–∞–Ω–Ω—ã–µ/–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ - —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
        base_vol = 12.0
        vol_factor = 0.6
        min_vol, max_vol = 8.0, 25.0
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–Ω–µ–±–æ–ª—å—à–∞—è)
    if annual_return == 0:
        return base_vol
    
    return_adjustment = abs(annual_return) * vol_factor
    calculated_vol = base_vol + return_adjustment
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–æ–≤
    return max(min_vol, min(max_vol, calculated_vol))

def calculate_adaptive_return(parser, ticker, nav_data):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, –ø–µ—Ä–∏–æ–¥)
    """
    try:
        # –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ nav_data
        if nav_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            for return_field in ['annual_return', 'return_1y', 'return_12m', 'ytd_return']:
                if return_field in nav_data and nav_data[return_field] is not None:
                    value = float(nav_data[return_field])
                    if value != 0:
                        return (round(value, 2), '1–≥')
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç InvestFunds (–Ω–æ —ç—Ç–æ —Å–ª–æ–∂–Ω–µ–µ)
        # –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–º —ç—Ç–æ—Ç –±–ª–æ–∫ –∏ –ø–µ—Ä–µ–π–¥–µ–º –∫ fallback
        if False:  # –æ—Ç–∫–ª—é—á–∞–µ–º —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–∫–∞
            # –ï—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
            sorted_quotes = sorted(quotes_data, key=lambda x: x['date'])
            
            start_price = float(sorted_quotes[0]['price'])
            end_price = float(sorted_quotes[-1]['price'])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            start_date = sorted_quotes[0]['date']
            end_date = sorted_quotes[-1]['date']
            
            if isinstance(start_date, str):
                from datetime import datetime
                start_date = datetime.strptime(start_date, '%Y-%m-%d')
                end_date = datetime.strptime(end_date, '%Y-%m-%d')
            
            days_diff = (end_date - start_date).days
            
            if days_diff > 0 and start_price > 0:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏ –∞–Ω–Ω—É–∞–ª–∏–∑–∏—Ä—É–µ–º
                total_return = (end_price / start_price - 1) * 100
                
                if days_diff >= 365:
                    # –ë–æ–ª—å—à–µ –≥–æ–¥–∞ - –æ–±—ã—á–Ω–∞—è –∞–Ω–Ω—É–∞–ª–∏–∑–∞—Ü–∏—è
                    annual_return = (end_price / start_price) ** (365.25 / days_diff) - 1
                    return round(annual_return * 100, 2)
                else:
                    # –ú–µ–Ω—å—à–µ –≥–æ–¥–∞ - –ø—Ä–æ—Å—Ç–∞—è –∞–Ω–Ω—É–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–µ—Ç–∫–æ–π
                    annualized_return = total_return * (365.25 / days_diff)
                    print(f"   üìä {ticker}: –∞–Ω–Ω—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {days_diff} –¥–Ω–µ–π ({total_return:.1f}% ‚Üí {annualized_return:.1f}%)")
                    return round(annualized_return, 2)
        
        # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–±–µ–∑ –∞–Ω–Ω—É–∞–ª–∏–∑–∞—Ü–∏–∏)
        if nav_data:            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–µ—Ä–∏–æ–¥—ã –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
            if 'return_6m' in nav_data and nav_data['return_6m'] is not None:
                semi_annual = float(nav_data['return_6m'])
                if semi_annual != 0:
                    print(f"   üìä {ticker}: —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤: {semi_annual:.1f}%")
                    return (round(semi_annual, 2), '6–º')
                    
            if 'return_3m' in nav_data and nav_data['return_3m'] is not None:
                quarterly = float(nav_data['return_3m'])
                if quarterly != 0:
                    print(f"   üìä {ticker}: —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ 3 –º–µ—Å—è—Ü–∞: {quarterly:.1f}%")
                    return (round(quarterly, 2), '3–º')
                
            if 'return_1m' in nav_data and nav_data['return_1m'] is not None:
                monthly = float(nav_data['return_1m'])
                if monthly != 0:
                    print(f"   üìä {ticker}: —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ 1 –º–µ—Å—è—Ü: {monthly:.1f}%")
                    return (round(monthly, 2), '1–º')
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - 0%
        print(f"   ‚ö†Ô∏è  {ticker}: –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 0%")
        return (0.0, '–Ω/–¥')
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è {ticker}: {e}")
        return (0.0, '–æ—à–∏–±–∫–∞')

def calculate_sharpe(annual_return, volatility):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞"""
    risk_free_rate = 15.0  # –ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§
    if volatility == 0:
        return 0
    return (annual_return - risk_free_rate) / volatility

def get_category_by_ticker(ticker):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–∏–∫–µ—Ä—É"""
    # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    if ticker.startswith('AK'):
        return '–ê–ª—å—Ñ–∞-–ö–∞–ø–∏—Ç–∞–ª'
    elif ticker.startswith('SB'):
        return '–°–±–µ—Ä–±–∞–Ω–∫'  
    elif ticker.startswith('T'):
        return '–¢-–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'
    elif ticker in ['LQDT']:
        return '–î–µ–Ω–µ–∂–Ω—ã–π —Ä—ã–Ω–æ–∫'
    elif 'GOLD' in ticker or 'SLVR' in ticker:
        return '–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–ª–ª—ã'
    else:
        return '–°–º–µ—à–∞–Ω–Ω—ã–µ (–†–µ–≥—É–ª—è—Ä–Ω—ã–π –¥–æ—Ö–æ–¥)'

if __name__ == "__main__":
    main()