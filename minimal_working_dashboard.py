#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–∞—à–±–æ—Ä–¥ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

from flask import Flask, render_template_string, jsonify
import pandas as pd
import plotly.graph_objects as go
import json
from pathlib import Path
from capital_flow_analyzer import CapitalFlowAnalyzer

app = Flask(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
data_files = list(Path('.').glob('enhanced_etf_data_*.csv'))
if not data_files:
    data_files = list(Path('.').glob('full_moex_etf_data_*.csv'))

if data_files:
    etf_data = pd.read_csv(max(data_files, key=lambda x: x.stat().st_mtime))
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(etf_data)} ETF")
else:
    etf_data = None
    print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

@app.route('/')
def index():
    return """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ETF –î–∞—à–±–æ—Ä–¥</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .chart { height: 500px; margin: 20px 0; border: 1px solid #ddd; }
        h1 { color: #333; }
    </style>
</head>
<body>
    <h1>üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ETF –î–∞—à–±–æ—Ä–¥</h1>
    
    <h2>–ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å</h2>
    <div id="risk-return-plot" class="chart"></div>
    
    <h2>–ü–æ—Ç–æ–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∞</h2>
    <div id="capital-flows-plot" class="chart"></div>
    
    <script>
        console.log('üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—à–±–æ—Ä–¥...');
        
        // –ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        fetch('/api/chart')
          .then(response => response.json())
          .then(data => {
            if (data.data && data.layout) {
              Plotly.newPlot('risk-return-plot', data.data, data.layout, {responsive: true});
              console.log('‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω');
            }
          })
          .catch(error => console.error('–û—à–∏–±–∫–∞:', error));
        
        // –ü–æ—Ç–æ–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∞
        fetch('/api/capital-flows')
          .then(response => response.json())
          .then(data => {
            if (data.data && data.layout) {
              Plotly.newPlot('capital-flows-plot', data.data, data.layout, {responsive: true});
              console.log('‚úÖ –ü–æ—Ç–æ–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            }
          })
          .catch(error => console.error('–û—à–∏–±–∫–∞:', error));
    </script>
</body>
</html>
    """

@app.route('/api/chart')
def api_chart():
    """API –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"""
    if etf_data is None:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'})
    
    try:
        # –°–æ–∑–¥–∞–µ–º scatter plot
        fig_data = [{
            'x': etf_data['volatility'].tolist(),
            'y': etf_data['annual_return'].tolist(),
            'text': etf_data['ticker'].tolist(),
            'mode': 'markers',
            'type': 'scatter',
            'marker': {
                'size': 8,
                'color': etf_data['annual_return'].tolist(),
                'colorscale': 'RdYlGn',
                'showscale': True
            }
        }]
        
        layout = {
            'title': '–†–∏—Å–∫ vs –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
            'xaxis': {'title': '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)'},
            'yaxis': {'title': '–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)'},
            'hovermode': 'closest'
        }
        
        return jsonify({'data': fig_data, 'layout': layout})
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/capital-flows')
def api_capital_flows():
    """API –ø–æ—Ç–æ–∫–æ–≤ –∫–∞–ø–∏—Ç–∞–ª–∞"""
    if etf_data is None:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'})
    
    try:
        analyzer = CapitalFlowAnalyzer(etf_data.copy())
        sector_flows = analyzer.calculate_sector_flows()
        
        sectors = sector_flows.index.tolist()
        volumes = [float(v) for v in sector_flows['volume_share'].tolist()]
        
        fig_data = [{
            'x': sectors,
            'y': volumes,
            'type': 'bar',
            'name': '–î–æ–ª—è –æ–±—ä–µ–º–∞ (%)',
            'marker': {'color': 'lightblue'},
            'text': [f"{v:.1f}%" for v in volumes],
            'textposition': 'outside'
        }]
        
        layout = {
            'title': 'üí∞ –ü–æ—Ç–æ–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º',
            'xaxis': {'title': '–°–µ–∫—Ç–æ—Ä', 'tickangle': -45},
            'yaxis': {'title': '–î–æ–ª—è –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤ (%)'},
            'height': 500,
            'margin': {'b': 120}
        }
        
        return jsonify({'data': fig_data, 'layout': layout})
    except Exception as e:
        return jsonify({'error': str(e)})

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞...")
    app.run(debug=False, host='0.0.0.0', port=5006)