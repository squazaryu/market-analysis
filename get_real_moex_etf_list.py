"""
–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ë–ü–ò–§–æ–≤ —Å MOEX –∏ –∏—Ö –∞–Ω–∞–ª–∏–∑
"""

import requests
import pandas as pd
from datetime import datetime
from logger_config import logger
from etf_data_collector import ETFDataCollectorWithFallback
import time
import json


def get_all_moex_etfs():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ë–ü–ò–§–æ–≤ —Å MOEX"""
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ë–ü–ò–§–æ–≤ —Å MOEX...")
    
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ MOEX API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö ETF
        url = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQTF/securities.json"
        
        session = requests.Session()
        session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
        })
        
        response = session.get(url, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        
        etf_list = []
        if 'securities' in data and 'data' in data['securities']:
            columns = data['securities']['columns']
            
            for row in data['securities']['data']:
                security_info = dict(zip(columns, row))
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ ETF
                if security_info.get('SECTYPE') == 'ETF':
                    etf_list.append({
                        'ticker': security_info.get('SECID'),
                        'name': security_info.get('SHORTNAME'),
                        'full_name': security_info.get('SECNAME'),
                        'lot_size': security_info.get('LOTSIZE'),
                        'currency': security_info.get('FACEUNIT', 'RUB'),
                        'list_level': security_info.get('LISTLEVEL'),
                        'trading_status': security_info.get('TRADINGSTATUS')
                    })
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(etf_list)} –ë–ü–ò–§–æ–≤ —Å MOEX")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        logger.info("–°–ø–∏—Å–æ–∫ –ë–ü–ò–§–æ–≤ —Å MOEX:")
        for etf in etf_list:
            logger.info(f"  {etf['ticker']}: {etf['name']} (—Å—Ç–∞—Ç—É—Å: {etf.get('trading_status', 'N/A')})")
        
        return etf_list
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ë–ü–ò–§–æ–≤ —Å MOEX: {e}")
        return []


def analyze_all_moex_etfs():
    """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ë–ü–ò–§–æ–≤ —Å MOEX"""
    logger.info("=== –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ë–ü–ò–§ –° –ú–û–°–ö–û–í–°–ö–û–ô –ë–ò–†–ñ–ò ===")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å MOEX
    moex_etfs = get_all_moex_etfs()
    
    if not moex_etfs:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ë–ü–ò–§–æ–≤ —Å MOEX")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
    collector = ETFDataCollectorWithFallback()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ë–ü–ò–§
    successful_data = []
    failed_tickers = []
    
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {len(moex_etfs)} –ë–ü–ò–§–æ–≤...")
    
    for i, etf_info in enumerate(moex_etfs, 1):
        ticker = etf_info['ticker']
        logger.info(f"[{i}/{len(moex_etfs)}] –ê–Ω–∞–ª–∏–∑ {ticker} ({etf_info['name']})...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            etf_data = collector.collect_etf_data(ticker)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å MOEX
            etf_data.update({
                'moex_name': etf_info['name'],
                'moex_full_name': etf_info['full_name'],
                'lot_size': etf_info['lot_size'],
                'list_level': etf_info['list_level'],
                'trading_status': etf_info['trading_status']
            })
            
            if etf_data.get('current_price') is not None:
                successful_data.append(etf_data)
                price = etf_data.get('current_price')
                return_val = etf_data.get('annual_return')
                logger.info(f"  ‚úì {ticker}: —Ü–µ–Ω–∞ {price} —Ä—É–±, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {return_val}%")
            else:
                failed_tickers.append(ticker)
                logger.warning(f"  ‚úó {ticker}: –Ω–µ—Ç —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            failed_tickers.append(ticker)
            logger.error(f"  ‚úó {ticker}: –æ—à–∏–±–∫–∞ - {e}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(0.5)
        
        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if i % 5 == 0:
            logger.info(f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —É—Å–ø–µ—à–Ω–æ {len(successful_data)}, –Ω–µ—É–¥–∞—á–Ω–æ {len(failed_tickers)}")
    
    # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    if successful_data:
        df = pd.DataFrame(successful_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        csv_file = f'complete_moex_etf_analysis_{timestamp}.csv'
        df.to_csv(csv_file, index=False, encoding='utf-8')
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report = create_detailed_analysis_report(df, moex_etfs, successful_data, failed_tickers)
        
        json_file = f'complete_moex_etf_report_{timestamp}.json'
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2, default=str)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print_comprehensive_results(report, df)
        
        logger.info(f"–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        logger.info(f"  üìä –î–∞–Ω–Ω—ã–µ: {csv_file}")
        logger.info(f"  üìã –û—Ç—á–µ—Ç: {json_file}")
        
        return df, report
    
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –ë–ü–ò–§—É")
        return None, None


def create_detailed_analysis_report(df, moex_etfs, successful_data, failed_tickers):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    valid_returns = df[df['annual_return'].notna()]
    performance_analysis = {}
    
    if len(valid_returns) > 0:
        performance_analysis = {
            'total_with_returns': len(valid_returns),
            'average_return': valid_returns['annual_return'].mean(),
            'median_return': valid_returns['annual_return'].median(),
            'min_return': valid_returns['annual_return'].min(),
            'max_return': valid_returns['annual_return'].max(),
            'std_return': valid_returns['annual_return'].std(),
            'positive_returns': (valid_returns['annual_return'] > 0).sum(),
            'negative_returns': (valid_returns['annual_return'] < 0).sum(),
            'top_performers': valid_returns.nlargest(5, 'annual_return')[['ticker', 'moex_name', 'annual_return']].to_dict('records'),
            'worst_performers': valid_returns.nsmallest(5, 'annual_return')[['ticker', 'moex_name', 'annual_return']].to_dict('records')
        }
    
    # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    valid_volatility = df[df['volatility'].notna()]
    risk_analysis = {}
    
    if len(valid_volatility) > 0:
        risk_analysis = {
            'total_with_volatility': len(valid_volatility),
            'average_volatility': valid_volatility['volatility'].mean(),
            'median_volatility': valid_volatility['volatility'].median(),
            'min_volatility': valid_volatility['volatility'].min(),
            'max_volatility': valid_volatility['volatility'].max(),
            'low_risk_funds': valid_volatility[valid_volatility['volatility'] < 15][['ticker', 'moex_name', 'volatility']].to_dict('records'),
            'high_risk_funds': valid_volatility[valid_volatility['volatility'] > 30][['ticker', 'moex_name', 'volatility']].to_dict('records')
        }
    
    # –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    valid_volume = df[df['daily_volume'].notna()]
    liquidity_analysis = {}
    
    if len(valid_volume) > 0:
        liquidity_analysis = {
            'total_with_volume': len(valid_volume),
            'average_volume': valid_volume['daily_volume'].mean(),
            'median_volume': valid_volume['daily_volume'].median(),
            'most_liquid': valid_volume.nlargest(5, 'daily_volume')[['ticker', 'moex_name', 'daily_volume']].to_dict('records'),
            'least_liquid': valid_volume.nsmallest(5, 'daily_volume')[['ticker', 'moex_name', 'daily_volume']].to_dict('records')
        }
    
    return {
        'analysis_metadata': {
            'analysis_date': datetime.now().isoformat(),
            'total_moex_etfs': len(moex_etfs),
            'successful_analysis': len(successful_data),
            'failed_analysis': len(failed_tickers),
            'success_rate_percent': len(successful_data) / len(moex_etfs) * 100
        },
        'performance_analysis': performance_analysis,
        'risk_analysis': risk_analysis,
        'liquidity_analysis': liquidity_analysis,
        'failed_tickers': failed_tickers,
        'data_quality_summary': {
            'records_with_price': df['current_price'].notna().sum(),
            'records_with_returns': df['annual_return'].notna().sum(),
            'records_with_volatility': df['volatility'].notna().sum(),
            'records_with_volume': df['daily_volume'].notna().sum(),
            'average_quality_score': df['data_quality_score'].mean()
        }
    }


def print_comprehensive_results(report, df):
    """–í—ã–≤–æ–¥ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("\n" + "="*80)
    print("üèÜ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –†–û–°–°–ò–ô–°–ö–ò–• –ë–ü–ò–§ –° –ú–û–°–ö–û–í–°–ö–û–ô –ë–ò–†–ñ–ò")
    print("="*80)
    
    meta = report['analysis_metadata']
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ –ë–ü–ò–§–æ–≤ –Ω–∞ MOEX: {meta['total_moex_etfs']}")
    print(f"   –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {meta['successful_analysis']}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {meta['success_rate_percent']:.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    if 'performance_analysis' in report and report['performance_analysis']:
        perf = report['performance_analysis']
        print(f"\nüí∞ –ê–ù–ê–õ–ò–ó –î–û–•–û–î–ù–û–°–¢–ò:")
        print(f"   –§–æ–Ω–¥–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {perf['total_with_returns']}")
        print(f"   –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {perf['average_return']:.2f}%")
        print(f"   –î–∏–∞–ø–∞–∑–æ–Ω –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {perf['min_return']:.2f}% - {perf['max_return']:.2f}%")
        print(f"   –§–æ–Ω–¥–æ–≤ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é: {perf['positive_returns']}")
        
        if perf.get('top_performers'):
            print(f"\nü•á –¢–û–ü-5 –ü–û –î–û–•–û–î–ù–û–°–¢–ò:")
            for i, fund in enumerate(perf['top_performers'], 1):
                print(f"   {i}. {fund['ticker']} ({fund['moex_name']}): {fund['annual_return']:.2f}%")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
    if 'risk_analysis' in report and report['risk_analysis']:
        risk = report['risk_analysis']
        print(f"\n‚ö†Ô∏è –ê–ù–ê–õ–ò–ó –†–ò–°–ö–û–í:")
        print(f"   –§–æ–Ω–¥–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {risk['total_with_volatility']}")
        print(f"   –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {risk['average_volatility']:.2f}%")
        print(f"   –î–∏–∞–ø–∞–∑–æ–Ω –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {risk['min_volatility']:.2f}% - {risk['max_volatility']:.2f}%")
        
        if risk.get('low_risk_funds'):
            print(f"\nüõ°Ô∏è –ù–ò–ó–ö–û–†–ò–°–ö–û–í–ê–ù–ù–´–ï –§–û–ù–î–´ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å < 15%):")
            for fund in risk['low_risk_funds']:
                print(f"   {fund['ticker']} ({fund['moex_name']}): {fund['volatility']:.2f}%")
    
    # –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    if 'liquidity_analysis' in report and report['liquidity_analysis']:
        liq = report['liquidity_analysis']
        print(f"\nüíß –ê–ù–ê–õ–ò–ó –õ–ò–ö–í–ò–î–ù–û–°–¢–ò:")
        print(f"   –§–æ–Ω–¥–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –æ–±—ä–µ–º–∞—Ö: {liq['total_with_volume']}")
        print(f"   –°—Ä–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π –æ–±—ä–µ–º: {liq['average_volume']:,.0f}")
        
        if liq.get('most_liquid'):
            print(f"\nüåä –°–ê–ú–´–ï –õ–ò–ö–í–ò–î–ù–´–ï –§–û–ù–î–´:")
            for i, fund in enumerate(liq['most_liquid'], 1):
                print(f"   {i}. {fund['ticker']} ({fund['moex_name']}): {fund['daily_volume']:,.0f}")
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    quality = report['data_quality_summary']
    print(f"\nüìä –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–•:")
    print(f"   –ó–∞–ø–∏—Å–µ–π —Å —Ü–µ–Ω–∞–º–∏: {quality['records_with_price']}")
    print(f"   –ó–∞–ø–∏—Å–µ–π —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é: {quality['records_with_returns']}")
    print(f"   –ó–∞–ø–∏—Å–µ–π —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é: {quality['records_with_volatility']}")
    print(f"   –ó–∞–ø–∏—Å–µ–π —Å –æ–±—ä–µ–º–∞–º–∏: {quality['records_with_volume']}")
    print(f"   –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality['average_quality_score']:.2f}")


if __name__ == "__main__":
    analyze_all_moex_etfs()