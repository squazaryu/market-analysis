#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –ë–ü–ò–§
–¢–æ–ª—å–∫–æ JSON API, –±–µ–∑ HTML —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
"""

from flask import Flask, jsonify, request
from flask_cors import CORS
import pandas as pd
import numpy as np
import json
from datetime import datetime
from pathlib import Path

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –¥—Ä—É–≥–∏—Ö –¥–æ–º–µ–Ω–æ–≤

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ numpy/pandas —Ç–∏–ø–æ–≤ –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ
def convert_to_json_serializable(obj):
    if isinstance(obj, np.integer):
        return int(obj)
    elif isinstance(obj, np.floating):
        return float(obj)
    elif isinstance(obj, np.ndarray):
        return obj.tolist()
    elif isinstance(obj, pd.Series):
        return obj.tolist()
    elif isinstance(obj, pd.DataFrame):
        return obj.to_dict('records')
    elif isinstance(obj, dict):
        return {key: convert_to_json_serializable(value) for key, value in obj.items()}
    elif isinstance(obj, list):
        return [convert_to_json_serializable(item) for item in obj]
    elif pd.isna(obj):
        return None
    else:
        return obj

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
etf_data = None

def load_latest_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ ETF"""
    global etf_data
    
    try:
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
        data_files = list(Path('.').glob('enhanced_etf_data_*.csv'))
        if not data_files:
            return False
        
        latest_file = max(data_files, key=lambda x: x.stat().st_mtime)
        etf_data = pd.read_csv(latest_file)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'sharpe_ratio' not in etf_data.columns:
            risk_free_rate = 15.0
            etf_data['sharpe_ratio'] = (etf_data['annual_return'] - risk_free_rate) / etf_data['volatility']
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(etf_data)} ETF –∏–∑ {latest_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

@app.route('/api/stats')
def api_stats():
    """API –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if etf_data is None or len(etf_data) == 0:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}), 404
    
    try:
        stats = {
            'total_etfs': len(etf_data),
            'total_nav': float(etf_data['nav_billions'].sum()),
            'avg_return': float(etf_data['annual_return'].mean()),
            'avg_volatility': float(etf_data['volatility'].mean()),
            'top_return': float(etf_data['annual_return'].max()),
            'lowest_return': float(etf_data['annual_return'].min()),
            'last_updated': datetime.now().strftime('%d.%m.%Y, %H:%M:%S')
        }
        
        return jsonify(convert_to_json_serializable(stats))
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/table')
def api_table():
    """API –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã"""
    if etf_data is None or len(etf_data) == 0:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}), 404
    
    try:
        limit = int(request.args.get('limit', 20))
        sort_by = request.args.get('sort_by', 'nav_billions')
        sort_order = request.args.get('sort_order', 'desc')
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        ascending = sort_order.lower() == 'asc'
        df_sorted = etf_data.sort_values(sort_by, ascending=ascending)
        
        # –õ–∏–º–∏—Ç
        df_limited = df_sorted.head(limit) if limit > 0 else df_sorted
        
        result = {
            'data': convert_to_json_serializable(df_limited.to_dict('records')),
            'total': len(etf_data),
            'showing': len(df_limited),
            'sort_by': sort_by,
            'sort_order': sort_order
        }
        
        return jsonify(result)
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/chart')
def api_chart():
    """API –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    if etf_data is None or len(etf_data) == 0:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}), 404
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è scatter plot
        scatter_data = {
            'x': convert_to_json_serializable(etf_data['volatility']),
            'y': convert_to_json_serializable(etf_data['annual_return']),
            'text': convert_to_json_serializable(etf_data['ticker']),
            'mode': 'markers',
            'type': 'scatter',
            'marker': {
                'size': 8,
                'color': convert_to_json_serializable(etf_data['nav_billions']),
                'colorscale': 'Viridis',
                'showscale': True,
                'colorbar': {'title': '–°–ß–ê (–º–ª—Ä–¥ ‚ÇΩ)'}
            },
            'name': '–ë–ü–ò–§'
        }
        
        layout = {
            'title': '–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ë–ü–ò–§',
            'xaxis': {'title': '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)'},
            'yaxis': {'title': '–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)'},
            'hovertemplate': '<b>%{text}</b><br>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: %{y:.1f}%<br>–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: %{x:.1f}%<extra></extra>'
        }
        
        return jsonify({
            'data': [scatter_data],
            'layout': layout
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/force-refresh')
def force_refresh():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        success = load_latest_data()
        
        if success:
            return jsonify({
                'status': 'success',
                'message': '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
                'updated_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'total_funds': len(etf_data) if etf_data is not None else 0
            })
        else:
            return jsonify({
                'status': 'error',
                'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'
            }), 500
            
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}'
        }), 500

@app.route('/api/archive-summary')
def archive_summary():
    """–°–≤–æ–¥–∫–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from investfunds_parser import InvestFundsParser
        
        parser = InvestFundsParser()
        summary = parser.get_fund_history_summary()
        
        return jsonify({
            'status': 'success',
            'archive_summary': summary,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}'
        }), 500

@app.route('/api/scheduler/start')
def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        from data_scheduler import DataScheduler
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler = DataScheduler()
        scheduler.setup_schedule()
        scheduler.start_background()
        
        return jsonify({
            'status': 'success',
            'message': '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω',
            'schedule': {
                'investfunds': '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00',
                'moex': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤ –ø—è—Ç–Ω–∏—Ü—É 09:00'
            }
        })
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {str(e)}'
        }), 500

@app.route('/')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return jsonify({
        'status': 'ok',
        'message': 'API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç',
        'endpoints': [
            '/api/stats',
            '/api/table',
            '/api/chart',
            '/api/force-refresh',
            '/api/archive-summary',
            '/api/scheduler/start'
        ],
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –ë–ü–ò–§...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if load_latest_data():
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, API –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫–∏")
    
    print("üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5005")
    print("üìÑ HTML –¥–∞—à–±–æ—Ä–¥: standalone_dashboard.html")
    print("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    app.run(debug=True, host='0.0.0.0', port=5005)