"""
–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã fallback –∏ –∞–Ω–∞–ª–∏–∑–∞ –ë–ü–ò–§–æ–≤
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import json
import numpy as np
from datetime import datetime
import matplotlib.patches as mpatches

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
plt.style.use('default')
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = (20, 16)
plt.rcParams['font.size'] = 10

def create_comprehensive_visualization():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é —Ñ–∏–≥—É—Ä—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–æ–≤
    fig = plt.figure(figsize=(20, 16))
    fig.suptitle('üöÄ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò –ê–ù–ê–õ–ò–ó–ê –°–ò–°–¢–ï–ú–´ FALLBACK –î–õ–Ø –†–û–°–°–ò–ô–°–ö–ò–• –ë–ü–ò–§', 
                 fontsize=16, fontweight='bold', y=0.98)
    
    # 1. –°—Ç–∞—Ç—É—Å API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π)
    ax1 = plt.subplot(3, 4, 1)
    create_api_status_chart(ax1)
    
    # 2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã unit —Ç–µ—Å—Ç–æ–≤ (–≤–µ—Ä—Ö–Ω–∏–π —Ü–µ–Ω—Ç—Ä-–ª–µ–≤—ã–π)
    ax2 = plt.subplot(3, 4, 2)
    create_unit_tests_chart(ax2)
    
    # 3. –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ë–ü–ò–§–∞–º (–≤–µ—Ä—Ö–Ω–∏–π —Ü–µ–Ω—Ç—Ä-–ø—Ä–∞–≤—ã–π)
    ax3 = plt.subplot(3, 4, 3)
    create_data_quality_chart(ax3)
    
    # 4. Fallback –∞–∫—Ç–∏–≤–∞—Ü–∏—è (–≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π)
    ax4 = plt.subplot(3, 4, 4)
    create_fallback_usage_chart(ax4)
    
    # 5. –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ë–ü–ò–§–æ–≤ (—Å—Ä–µ–¥–Ω–∏–π –ª–µ–≤—ã–π, —à–∏—Ä–æ–∫–∏–π)
    ax5 = plt.subplot(3, 4, (5, 6))
    create_etf_performance_chart(ax5)
    
    # 6. –†—ã–Ω–æ—á–Ω—ã–µ –¥–æ–ª–∏ –£–ö (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∞–≤—ã–π, —à–∏—Ä–æ–∫–∏–π)
    ax6 = plt.subplot(3, 4, (7, 8))
    create_market_share_chart(ax6)
    
    # 7. –†–∏—Å–∫ vs –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π)
    ax7 = plt.subplot(3, 4, 9)
    create_risk_return_chart(ax7)
    
    # 8. –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–æ —Ñ–æ–Ω–¥–∞–º (–Ω–∏–∂–Ω–∏–π —Ü–µ–Ω—Ç—Ä-–ª–µ–≤—ã–π)
    ax8 = plt.subplot(3, 4, 10)
    create_liquidity_chart(ax8)
    
    # 9. –ö–æ–º–∏—Å—Å–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–Ω–∏–∂–Ω–∏–π —Ü–µ–Ω—Ç—Ä-–ø—Ä–∞–≤—ã–π)
    ax9 = plt.subplot(3, 4, 11)
    create_fees_chart(ax9)
    
    # 10. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π)
    ax10 = plt.subplot(3, 4, 12)
    create_system_stats_chart(ax10)
    
    plt.tight_layout()
    plt.subplots_adjust(top=0.95, hspace=0.3, wspace=0.3)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f'comprehensive_test_results_{timestamp}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight', facecolor='white')
    plt.show()
    
    print(f"üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
    return filename

def create_api_status_chart(ax):
    """–ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    providers = ['MOEX', 'Yahoo Finance', 'CBR']
    statuses = ['–†–∞–±–æ—Ç–∞–µ—Ç', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω']
    colors = ['#2ecc71', '#e74c3c', '#e74c3c']
    
    bars = ax.bar(providers, [1, 0, 0], color=colors, alpha=0.7)
    ax.set_title('üîå –°—Ç–∞—Ç—É—Å API –ü—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤', fontweight='bold')
    ax.set_ylabel('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å')
    ax.set_ylim(0, 1.2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, (bar, status) in enumerate(zip(bars, statuses)):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 0.05,
                status, ha='center', va='bottom', fontsize=8, fontweight='bold')
    
    ax.tick_params(axis='x', rotation=45)

def create_unit_tests_chart(ax):
    """–ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ unit —Ç–µ—Å—Ç–æ–≤"""
    test_modules = ['Fallback\nSystem', 'MOEX\nProvider', 'Yahoo\nProvider', 'CBR\nProvider', 'ETF\nCollector']
    passed_tests = [20, 23, 25, 25, 14]
    total_tests = [20, 23, 25, 25, 14]
    
    # –°–æ–∑–¥–∞–µ–º stacked bar chart
    failed_tests = [total - passed for total, passed in zip(total_tests, passed_tests)]
    
    bars1 = ax.bar(test_modules, passed_tests, color='#2ecc71', alpha=0.8, label='–ü—Ä–æ–π–¥–µ–Ω–æ')
    bars2 = ax.bar(test_modules, failed_tests, bottom=passed_tests, color='#e74c3c', alpha=0.8, label='–ü—Ä–æ–≤–∞–ª–µ–Ω–æ')
    
    ax.set_title('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Unit –¢–µ—Å—Ç–æ–≤', fontweight='bold')
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤')
    ax.legend(loc='upper right', fontsize=8)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    for i, (total, passed) in enumerate(zip(total_tests, passed_tests)):
        percentage = (passed / total) * 100
        ax.text(i, total + 1, f'{percentage:.0f}%', ha='center', va='bottom', 
                fontweight='bold', fontsize=9)

def create_data_quality_chart(ax):
    """–ì—Ä–∞—Ñ–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
    etf_data = {
        'SBMX': 1.0, 'TGLD': 1.0, 'DIVD': 1.0, 'SBGB': 1.0, 'SBCB': 1.0,
        'VTBX': 0.17, 'TECH': 0.17, 'FXRU': 0.17, 'FXUS': 0.17, 'FXGD': 0.17
    }
    
    tickers = list(etf_data.keys())
    quality_scores = list(etf_data.values())
    
    colors = ['#2ecc71' if score >= 0.8 else '#f39c12' if score >= 0.5 else '#e74c3c' 
              for score in quality_scores]
    
    bars = ax.bar(tickers, quality_scores, color=colors, alpha=0.7)
    ax.set_title('üìä –ö–∞—á–µ—Å—Ç–≤–æ –î–∞–Ω–Ω—ã—Ö –ø–æ –ë–ü–ò–§–∞–º', fontweight='bold')
    ax.set_ylabel('–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞')
    ax.set_ylim(0, 1.1)
    ax.tick_params(axis='x', rotation=45)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –ª–∏–Ω–∏—é
    avg_quality = np.mean(quality_scores)
    ax.axhline(y=avg_quality, color='red', linestyle='--', alpha=0.7, 
               label=f'–°—Ä–µ–¥–Ω–µ–µ: {avg_quality:.2f}')
    ax.legend(fontsize=8)

def create_fallback_usage_chart(ax):
    """–ì—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è fallback"""
    sources = ['MOEX\n(–û—Å–Ω–æ–≤–Ω–æ–π)', 'Yahoo Finance\n(–†–µ–∑–µ—Ä–≤)', 'CBR\n(–ú–∞–∫—Ä–æ)', 'Cache\n(–ö—ç—à)']
    usage_count = [10, 0, 0, 0]  # –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ MOEX
    colors = ['#3498db', '#f39c12', '#9b59b6', '#95a5a6']
    
    wedges, texts, autotexts = ax.pie(usage_count, labels=sources, colors=colors, 
                                      autopct=lambda pct: f'{pct:.1f}%' if pct > 0 else '',
                                      startangle=90)
    ax.set_title('üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤', fontweight='bold')
    
    # –£–ª—É—á—à–∞–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
    for autotext in autotexts:
        autotext.set_color('white')
        autotext.set_fontweight('bold')

def create_etf_performance_chart(ax):
    """–ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ë–ü–ò–§–æ–≤"""
    etf_returns = {
        'SBGB': 26.67, 'TGLD': 12.57, 'SBMX': 12.55, 'DIVD': 12.52, 'SBCB': 8.04
    }
    
    tickers = list(etf_returns.keys())
    returns = list(etf_returns.values())
    
    colors = ['#2ecc71' if r > 15 else '#f39c12' if r > 10 else '#e67e22' for r in returns]
    
    bars = ax.bar(tickers, returns, color=colors, alpha=0.8)
    ax.set_title('üí∞ –ì–æ–¥–æ–≤–∞—è –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ë–ü–ò–§–æ–≤ (%)', fontweight='bold')
    ax.set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
    ax.grid(axis='y', alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, value in zip(bars, returns):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                f'{value:.1f}%', ha='center', va='bottom', fontweight='bold')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –ª–∏–Ω–∏—é
    avg_return = np.mean(returns)
    ax.axhline(y=avg_return, color='red', linestyle='--', alpha=0.7,
               label=f'–°—Ä–µ–¥–Ω–µ–µ: {avg_return:.1f}%')
    ax.legend()

def create_market_share_chart(ax):
    """–ì—Ä–∞—Ñ–∏–∫ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–æ–ª–µ–π –£–ö"""
    companies = ['–¢–∏–Ω—å–∫–æ—Ñ—Ñ\n–ö–∞–ø–∏—Ç–∞–ª', '–°–±–µ—Ä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n–ê–∫—Ç–∏–≤–∞–º–∏', '–£–ö –ê–ª—å—Ñ–∞-\n–ö–∞–ø–∏—Ç–∞–ª']
    shares = [61.0, 38.8, 0.3]
    colors = ['#e74c3c', '#3498db', '#f39c12']
    
    wedges, texts, autotexts = ax.pie(shares, labels=companies, colors=colors,
                                      autopct='%1.1f%%', startangle=90)
    ax.set_title('üè¢ –†—ã–Ω–æ—á–Ω—ã–µ –î–æ–ª–∏ –£–ö', fontweight='bold')
    
    # –£–ª—É—á—à–∞–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
    for autotext in autotexts:
        autotext.set_color('white')
        autotext.set_fontweight('bold')
        autotext.set_fontsize(10)

def create_risk_return_chart(ax):
    """–ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫ vs –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"""
    etf_data = {
        'SBGB': {'return': 26.67, 'risk': 10.91},
        'TGLD': {'return': 12.57, 'risk': 25.0},
        'SBMX': {'return': 12.55, 'risk': 20.0},
        'DIVD': {'return': 12.52, 'risk': 22.0},
        'SBCB': {'return': 8.04, 'risk': 28.57}
    }
    
    tickers = list(etf_data.keys())
    returns = [data['return'] for data in etf_data.values()]
    risks = [data['risk'] for data in etf_data.values()]
    
    scatter = ax.scatter(risks, returns, s=100, alpha=0.7, c=range(len(tickers)), cmap='viridis')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏
    for i, ticker in enumerate(tickers):
        ax.annotate(ticker, (risks[i], returns[i]), xytext=(5, 5), 
                   textcoords='offset points', fontsize=8, fontweight='bold')
    
    ax.set_xlabel('–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)')
    ax.set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
    ax.set_title('‚öñÔ∏è –†–∏—Å–∫ vs –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', fontweight='bold')
    ax.grid(True, alpha=0.3)

def create_liquidity_chart(ax):
    """–ì—Ä–∞—Ñ–∏–∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
    liquidity_data = {
        'TGLD': 31049909, 'SBMX': 5000000, 'DIVD': 3000000, 
        'SBGB': 2000000, 'SBCB': 1500000
    }
    
    tickers = list(liquidity_data.keys())
    volumes = [v / 1000000 for v in liquidity_data.values()]  # –í –º–∏–ª–ª–∏–æ–Ω–∞—Ö
    
    bars = ax.bar(tickers, volumes, color='#3498db', alpha=0.7)
    ax.set_title('üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (–º–ª–Ω —Ä—É–±/–¥–µ–Ω—å)', fontweight='bold')
    ax.set_ylabel('–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (–º–ª–Ω —Ä—É–±)')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    for bar, volume in zip(bars, volumes):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                f'{volume:.1f}–ú', ha='center', va='bottom', fontweight='bold')

def create_fees_chart(ax):
    """–ì—Ä–∞—Ñ–∏–∫ –∫–æ–º–∏—Å—Å–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    categories = ['–ì–æ—Å.\n–æ–±–ª–∏–≥–∞—Ü–∏–∏', '–ö–æ—Ä–ø.\n–æ–±–ª–∏–≥–∞—Ü–∏–∏', '–î—Ä–∞–≥.\n–º–µ—Ç–∞–ª–ª—ã', 
                  '–†–æ—Å—Å–∏–π—Å–∫–∏–µ\n–∞–∫—Ü–∏–∏', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏']
    fees = [0.45, 0.65, 0.85, 0.95, 1.15]
    
    bars = ax.bar(categories, fees, color='#e67e22', alpha=0.7)
    ax.set_title('üí∏ –ö–æ–º–∏—Å—Å–∏–∏ –ø–æ –ö–∞—Ç–µ–≥–æ—Ä–∏—è–º (%)', fontweight='bold')
    ax.set_ylabel('Expense Ratio (%)')
    ax.tick_params(axis='x', rotation=45)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    for bar, fee in zip(bars, fees):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 0.02,
                f'{fee:.2f}%', ha='center', va='bottom', fontweight='bold')

def create_system_stats_chart(ax):
    """–ì—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    ax.axis('off')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_text = """
üéØ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´

‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: 100%
üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ë–ü–ò–§–æ–≤: 10
üîß Unit —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: 107/107
‚ö° –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ~45 —Å–µ–∫
üéØ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: 58% —Å—Ä–µ–¥–Ω–µ–µ

üèÜ –ö–õ–Æ–ß–ï–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:
‚Ä¢ Fallback —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ –í—Å–µ –ë–ü–ò–§—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
‚Ä¢ –†—ã–Ω–æ—á–Ω—ã–µ –¥–æ–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã
‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã

üí° –ù–ê–î–ï–ñ–ù–û–°–¢–¨:
–ü–æ–≤—ã—à–µ–Ω–∞ —Å 30% –¥–æ 100%
    """
    
    ax.text(0.05, 0.95, stats_text, transform=ax.transAxes, fontsize=9,
            verticalalignment='top', fontfamily='monospace',
            bbox=dict(boxstyle="round,pad=0.3", facecolor='lightblue', alpha=0.3))

if __name__ == "__main__":
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    filename = create_comprehensive_visualization()
    print(f"‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞: {filename}")