#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ —Ñ–æ–Ω–¥–æ–≤ –ø–æ ISIN –∫–æ–¥–∞–º –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
–ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –ø–æ–∏—Å–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
"""

import pandas as pd
import requests
from bs4 import BeautifulSoup
import re
import time
import json
from typing import Dict, List, Optional, Tuple
import logging
from pathlib import Path
from urllib.parse import quote

class ISINBasedFundFinder:
    """–ü–æ–∏—Å–∫ —Ñ–æ–Ω–¥–æ–≤ –ø–æ ISIN –∫–æ–¥–∞–º"""
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
        })
        
        self.logger = self._setup_logger()
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ ISIN
        self.sources = {
            'investfunds': 'https://investfunds.ru',
            'cbr': 'https://www.cbr.ru',
            'moex': 'https://www.moex.com',
            'finam': 'https://www.finam.ru',
        }
        
        self.found_mappings = {}
        
    def _setup_logger(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞"""
        logger = logging.getLogger('ISINFundFinder')
        logger.setLevel(logging.INFO)
        
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            handler.setFormatter(formatter)
            logger.addHandler(handler)
            
        return logger
    
    def search_by_isin_investfunds(self, isin: str, ticker: str) -> Optional[Dict]:
        """–ü–æ–∏—Å–∫ –ø–æ ISIN –Ω–∞ investfunds.ru"""
        
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–∏—Å–∫–∞
            search_urls = [
                f"https://investfunds.ru/search/?q={isin}",
                f"https://investfunds.ru/funds/?search={isin}",
                f"https://investfunds.ru/funds/?isin={isin}"
            ]
            
            for search_url in search_urls:
                self.logger.info(f"–ò—â–µ–º {ticker} ({isin}) –ø–æ URL: {search_url}")
                
                response = self.session.get(search_url, timeout=15)
                if response.status_code != 200:
                    continue
                
                soup = BeautifulSoup(response.content, 'html.parser')
                
                # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ–Ω–¥—ã
                fund_links = soup.find_all('a', href=re.compile(r'/funds/\d+/'))
                
                for link in fund_links:
                    href = link.get('href', '')
                    fund_id_match = re.search(r'/funds/(\d+)/', href)
                    
                    if fund_id_match:
                        fund_id = int(fund_id_match.group(1))
                        link_text = link.get_text(strip=True)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ISIN –∏–ª–∏ —Ç–∏–∫–µ—Ä
                        page_text = soup.get_text().upper()
                        if isin in page_text or ticker.upper() in page_text:
                            
                            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω {ticker}: ID {fund_id} –Ω–∞ investfunds.ru")
                            return {
                                'source': 'investfunds.ru',
                                'fund_id': fund_id,
                                'url': f"https://investfunds.ru{href}",
                                'name': link_text,
                                'confidence': 0.9
                            }
                
                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {ticker} –Ω–∞ investfunds.ru: {e}")
        
        return None
    
    def search_by_isin_cbr(self, isin: str, ticker: str) -> Optional[Dict]:
        """–ü–æ–∏—Å–∫ –ø–æ ISIN –Ω–∞ —Å–∞–π—Ç–µ –¶–ë –†–§"""
        
        try:
            # –¶–ë –†–§ –≤–µ–¥–µ—Ç —Ä–µ–µ—Å—Ç—Ä –≤—Å–µ—Ö –ü–ò–§–æ–≤
            search_url = f"https://www.cbr.ru/registries/?UniDbQuery.Posted=True&UniDbQuery.SearchText={isin}"
            
            self.logger.info(f"–ò—â–µ–º {ticker} ({isin}) –≤ —Ä–µ–µ—Å—Ç—Ä–µ –¶–ë –†–§")
            
            response = self.session.get(search_url, timeout=15)
            if response.status_code == 200:
                soup = BeautifulSoup(response.content, 'html.parser')
                
                # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                tables = soup.find_all('table')
                
                for table in tables:
                    rows = table.find_all('tr')
                    for row in rows:
                        cells = row.find_all(['td', 'th'])
                        row_text = ' '.join([cell.get_text(strip=True) for cell in cells])
                        
                        if isin in row_text or ticker.upper() in row_text.upper():
                            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω {ticker} –≤ —Ä–µ–µ—Å—Ç—Ä–µ –¶–ë –†–§")
                            return {
                                'source': 'cbr.ru',
                                'url': search_url,
                                'name': row_text[:100],
                                'confidence': 0.95,
                                'official': True
                            }
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {ticker} –≤ –¶–ë –†–§: {e}")
        
        return None
    
    def search_by_isin_moex(self, isin: str, ticker: str) -> Optional[Dict]:
        """–ü–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ ISIN –Ω–∞ MOEX"""
        
        try:
            # MOEX API –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ ISIN
            search_url = f"https://iss.moex.com/iss/securities.json?q={isin}"
            
            response = self.session.get(search_url, timeout=15)
            if response.status_code == 200:
                data = response.json()
                
                securities = data.get('securities', {}).get('data', [])
                columns = data.get('securities', {}).get('columns', [])
                
                for security in securities:
                    if len(security) >= len(columns):
                        security_dict = dict(zip(columns, security))
                        
                        if security_dict.get('isin') == isin:
                            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω {ticker} –≤ MOEX —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                            return {
                                'source': 'moex.com',
                                'secid': security_dict.get('secid'),
                                'shortname': security_dict.get('shortname'),
                                'name': security_dict.get('name'),
                                'isin': security_dict.get('isin'),
                                'confidence': 1.0,
                                'official': True
                            }
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {ticker} –Ω–∞ MOEX: {e}")
        
        return None
    
    def get_nav_data_from_source(self, ticker: str, source_info: Dict) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –°–ß–ê –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        
        if source_info['source'] == 'investfunds.ru' and 'fund_id' in source_info:
            try:
                from investfunds_parser import InvestFundsParser
                parser = InvestFundsParser()
                
                fund_data = parser.get_fund_data(source_info['fund_id'])
                if fund_data and fund_data.get('nav', 0) > 0:
                    return {
                        'ticker': ticker,
                        'nav': fund_data['nav'],
                        'unit_price': fund_data['unit_price'],
                        'name': fund_data['name'],
                        'source': 'investfunds.ru',
                        'fund_id': source_info['fund_id'],
                        'date': fund_data['date']
                    }
                    
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ investfunds.ru –¥–ª—è {ticker}: {e}")
        
        return None
    
    def find_all_funds_by_isin(self, etf_data: pd.DataFrame, max_funds: int = None) -> Dict[str, Dict]:
        """–ò—â–µ—Ç –≤—Å–µ —Ñ–æ–Ω–¥—ã –ø–æ –∏—Ö ISIN –∫–æ–¥–∞–º"""
        
        self.logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ ISIN –¥–ª—è {len(etf_data)} —Ñ–æ–Ω–¥–æ–≤")
        
        results = {}
        found_count = 0
        
        for idx, row in etf_data.iterrows():
            if max_funds and found_count >= max_funds:
                break
                
            ticker = row['ticker']
            isin = row.get('isin', '')
            
            if not isin or pd.isna(isin):
                self.logger.warning(f"‚ùå {ticker}: –Ω–µ—Ç ISIN –∫–æ–¥–∞")
                continue
            
            self.logger.info(f"\nüîç –ò—â–µ–º {ticker} (ISIN: {isin})")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            source_results = []
            
            # 1. investfunds.ru
            investfunds_result = self.search_by_isin_investfunds(isin, ticker)
            if investfunds_result:
                source_results.append(investfunds_result)
            
            # 2. –¶–ë –†–§
            cbr_result = self.search_by_isin_cbr(isin, ticker)
            if cbr_result:
                source_results.append(cbr_result)
            
            # 3. MOEX
            moex_result = self.search_by_isin_moex(isin, ticker)
            if moex_result:
                source_results.append(moex_result)
            
            if source_results:
                # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É investfunds.ru –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –°–ß–ê)
                best_source = None
                for result in source_results:
                    if result['source'] == 'investfunds.ru':
                        best_source = result
                        break
                
                if not best_source:
                    best_source = max(source_results, key=lambda x: x.get('confidence', 0))
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –°–ß–ê
                nav_data = self.get_nav_data_from_source(ticker, best_source)
                
                if nav_data:
                    results[ticker] = nav_data
                    found_count += 1
                    self.logger.info(f"‚úÖ {ticker}: –°–ß–ê {nav_data['nav']/1e9:.1f} –º–ª—Ä–¥ ‚ÇΩ")
                else:
                    results[ticker] = {
                        'ticker': ticker,
                        'source_info': best_source,
                        'status': 'found_but_no_nav'
                    }
                    self.logger.info(f"‚ö†Ô∏è  {ticker}: –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –°–ß–ê")
            else:
                self.logger.warning(f"‚ùå {ticker}: –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏
            time.sleep(2)
        
        self.logger.info(f"\nüìä –ò—Ç–æ–≥–∏ –ø–æ–∏—Å–∫–∞ –ø–æ ISIN:")
        self.logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –°–ß–ê: {found_count}")
        self.logger.info(f"   üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results)}")
        
        return results
    
    def save_results(self, results: Dict, filename: str = "isin_search_results.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_data = {
            'timestamp': pd.Timestamp.now().isoformat(),
            'total_searched': len(results),
            'successful_nav_extraction': len([r for r in results.values() if 'nav' in r]),
            'results': results
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(save_data, f, indent=2, ensure_ascii=False, default=str)
        
        self.logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    
    def create_updated_mapping(self, results: Dict) -> Dict[str, int]:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è investfunds_parser.py"""
        
        mapping = {}
        
        for ticker, data in results.items():
            if 'fund_id' in data and 'nav' in data:
                mapping[ticker] = data['fund_id']
        
        self.logger.info(f"üìã –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è {len(mapping)} —Ñ–æ–Ω–¥–æ–≤")
        
        return mapping

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ ETF
    data_files = list(Path('.').glob('enhanced_etf_data_*.csv'))
    if not data_files:
        data_files = list(Path('.').glob('full_moex_etf_data_*.csv'))
    
    if not data_files:
        print("‚ùå –§–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ETF –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    latest_data = max(data_files, key=lambda x: x.stat().st_mtime)
    print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {latest_data}")
    
    etf_data = pd.read_csv(latest_data)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(etf_data)} ETF —Å ISIN –∫–æ–¥–∞–º–∏")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤–∏–∫
    finder = ISINBasedFundFinder()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ 20 –¥–ª—è —Ç–µ—Å—Ç–∞)
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ ISIN (—Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 20 —Ñ–æ–Ω–¥–æ–≤)")
    
    results = finder.find_all_funds_by_isin(etf_data.head(20), max_funds=20)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    finder.save_results(results)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
    new_mapping = finder.create_updated_mapping(results)
    
    if new_mapping:
        print(f"\n‚úÖ –ù–æ–≤—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è investfunds_parser.py:")
        for ticker, fund_id in new_mapping.items():
            print(f"   '{ticker}': {fund_id},")
    
    print(f"\nüéâ –ü–æ–∏—Å–∫ –ø–æ ISIN –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ isin_search_results.json")

if __name__ == "__main__":
    main()