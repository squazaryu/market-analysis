#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–µ—Å—Ç—Ä–∞ –ü–ò–§ –¶–ë –†–§ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
"""

import pandas as pd
import numpy as np
from pathlib import Path

def parse_pif_registry():
    """–ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –ü–ò–§ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    
    file_path = Path("list_PIF.xlsx")
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª, –ø—Ä–æ–ø—É—Å–∫–∞—è –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        print("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞...")
        
        # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        df_preview = pd.read_excel(file_path, sheet_name=0, nrows=10)
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç "‚Ññ –ø/–ø")
        header_row = None
        for idx, row in df_preview.iterrows():
            if any("‚Ññ –ø/–ø" in str(cell) for cell in row.values if pd.notna(cell)):
                header_row = idx
                break
        
        if header_row is None:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏")
            return None
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {header_row}")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        df = pd.read_excel(file_path, sheet_name=0, header=header_row)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = df.dropna(how='all')  # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        df = df.reset_index(drop=True)
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:")
        print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {len(df)}")
        print(f"   ‚Ä¢ –°—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}")
        
        print(f"\nüìã –°—Ç–æ–ª–±—Ü—ã:")
        for i, col in enumerate(df.columns):
            print(f"   {i+1:2d}. {col}")
        
        # –ò—â–µ–º –ë–ü–ò–§
        type_columns = [col for col in df.columns if any(word in str(col).lower() for word in ['—Ç–∏–ø', '–≤–∏–¥', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è'])]
        
        if type_columns:
            print(f"\nüè∑Ô∏è –ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã —Å —Ç–∏–ø–∞–º–∏ –ü–ò–§: {type_columns}")
            
            for col in type_columns:
                print(f"\nüìä –ó–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ '{col}':")
                values = df[col].value_counts().head(10)
                for val, count in values.items():
                    print(f"   ‚Ä¢ {val}: {count}")
                
                # –ò—â–µ–º –ë–ü–ò–§
                bpif_mask = df[col].astype(str).str.contains('–±–∏—Ä–∂–µ–≤–æ–π|–ë–ü–ò–§|ETF|exchange', case=False, na=False)
                bpif_count = bpif_mask.sum()
                print(f"   üéØ –ë–ü–ò–§ –≤ —ç—Ç–æ–º —Å—Ç–æ–ª–±—Ü–µ: {bpif_count}")
                
                if bpif_count > 0:
                    bpif_df = df[bpif_mask]
                    print(f"\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ë–ü–ò–§:")
                    
                    # –ò—â–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
                    name_cols = [c for c in df.columns if any(word in str(c).lower() for word in ['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–Ω–∞–∑–≤–∞–Ω–∏–µ', 'name'])]
                    
                    if name_cols:
                        name_col = name_cols[0]
                        print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü –Ω–∞–∑–≤–∞–Ω–∏–π: '{name_col}'")
                        
                        for idx, row in bpif_df.head(20).iterrows():
                            name = row[name_col] if pd.notna(row[name_col]) else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                            print(f"   ‚Ä¢ {name}")
                        
                        if len(bpif_df) > 20:
                            print(f"   ... –∏ –µ—â–µ {len(bpif_df) - 20} –ë–ü–ò–§")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–ü–ò–§ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
                    bpif_file = "cbr_bpif_list.csv"
                    bpif_df.to_csv(bpif_file, index=False, encoding='utf-8')
                    print(f"\nüíæ –ë–ü–ò–§ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {bpif_file}")
                    
                    return bpif_df
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–∏–ø—É, –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
        name_cols = [c for c in df.columns if any(word in str(c).lower() for word in ['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–Ω–∞–∑–≤–∞–Ω–∏–µ', 'name'])]
        
        if name_cols:
            print(f"\nüîç –ü–æ–∏—Å–∫ –ë–ü–ò–§ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö: {name_cols}")
            
            for name_col in name_cols:
                bpif_mask = df[name_col].astype(str).str.contains('–±–∏—Ä–∂–µ–≤–æ–π|–ë–ü–ò–§|ETF|exchange', case=False, na=False)
                bpif_count = bpif_mask.sum()
                
                if bpif_count > 0:
                    print(f"   üéØ –ù–∞–π–¥–µ–Ω–æ –ë–ü–ò–§ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤ '{name_col}': {bpif_count}")
                    bpif_df = df[bpif_mask]
                    
                    print(f"\nüìã –ë–ü–ò–§ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º:")
                    for idx, row in bpif_df.head(20).iterrows():
                        name = row[name_col] if pd.notna(row[name_col]) else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                        print(f"   ‚Ä¢ {name}")
                    
                    if len(bpif_df) > 20:
                        print(f"   ... –∏ –µ—â–µ {len(bpif_df) - 20} –ë–ü–ò–§")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                    bpif_file = "cbr_bpif_by_name.csv"
                    bpif_df.to_csv(bpif_file, index=False, encoding='utf-8')
                    print(f"\nüíæ –ë–ü–ò–§ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {bpif_file}")
                    
                    return bpif_df
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        print(f"\nüìã –û–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫):")
        print(df.head())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª
        full_file = "cbr_full_registry.csv"
        df.to_csv(full_file, index=False, encoding='utf-8')
        print(f"\nüíæ –ü–æ–ª–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {full_file}")
        
        return df
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    df = parse_pif_registry()
    
    if df is not None:
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        print("üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ CSV —Ñ–∞–π–ª—ã")
        print("   2. –ù–∞–π–¥–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã —Å —Ç–∏–∫–µ—Ä–∞–º–∏ MOEX")
        print("   3. –û–±–Ω–æ–≤–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –ë–ü–ò–§")