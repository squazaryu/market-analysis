#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ETF —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Plotly
"""

import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import numpy as np
import json
from datetime import datetime
from pathlib import Path

class InteractiveETFDashboard:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ETF"""
    
    def __init__(self):
        self.df = None
        self.report = None
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ ETF"""
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
        data_files = list(Path('.').glob('enhanced_etf_data_*.csv'))
        if not data_files:
            data_files = list(Path('.').glob('full_moex_etf_data_*.csv'))
        
        if not data_files:
            raise FileNotFoundError("–§–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ETF –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        latest_data = max(data_files, key=lambda x: x.stat().st_mtime)
        print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {latest_data}")
        
        self.df = pd.read_csv(latest_data)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        report_files = list(Path('.').glob('full_moex_etf_report_*.json'))
        if report_files:
            latest_report = max(report_files, key=lambda x: x.stat().st_mtime)
            with open(latest_report, 'r', encoding='utf-8') as f:
                self.report = json.load(f)
    
    def create_risk_return_scatter(self) -> go.Figure:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π scatter plot —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"""
        
        valid_data = self.df[(self.df['annual_return'].notna()) & 
                            (self.df['volatility'].notna()) & 
                            (self.df['avg_daily_volume'].notna())]
        
        if len(valid_data) == 0:
            return None
        
        # –°–æ–∑–¥–∞–µ–º scatter plot —Å —Ä–∞–∑–º–µ—Ä–æ–º –ø—É–∑—ã—Ä—å–∫–æ–≤ = –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
        fig = px.scatter(
            valid_data, 
            x='volatility', 
            y='annual_return',
            size='avg_daily_volume',
            color='category',
            hover_name='ticker',
            hover_data=['management_company', 'expense_ratio'],
            title='üìä –ê–Ω–∞–ª–∏–∑ –†–∏—Å–∫-–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ETF',
            labels={
                'volatility': '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)',
                'annual_return': '–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)',
                'avg_daily_volume': '–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤'
            }
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–µ–∑—Ä–∏—Å–∫–æ–≤—É—é —Å—Ç–∞–≤–∫—É
        fig.add_hline(y=15, line_dash="dot", line_color="green", 
                     annotation_text="–ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (15%)")
        
        fig.update_layout(
            width=1000,
            height=600,
            showlegend=True
        )
        
        return fig
    
    def create_sector_analysis(self) -> go.Figure:
        """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º/–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        
        if self.df is None or len(self.df) == 0:
            return None
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        sector_stats = self.df.groupby('category').agg({
            'annual_return': 'mean',
            'volatility': 'mean',
            'avg_daily_volume': 'sum',
            'ticker': 'count'
        }).round(2)
        
        sector_stats.columns = ['–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', '–°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å', 
                               '–û–±—â–∏–π –æ–±—ä–µ–º', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETF']
        
        # –°–æ–∑–¥–∞–µ–º subplot —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º', '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º',
                           '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETF', '–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤'),
            specs=[[{}, {}], [{}, {}]]
        )
        
        categories = sector_stats.index.tolist()
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        fig.add_trace(
            go.Bar(x=categories, y=sector_stats['–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å'], 
                   name='–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)', marker_color='lightgreen'),
            row=1, col=1
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        fig.add_trace(
            go.Bar(x=categories, y=sector_stats['–°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å'], 
                   name='–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)', marker_color='lightcoral'),
            row=1, col=2
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETF
        fig.add_trace(
            go.Bar(x=categories, y=sector_stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETF'], 
                   name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', marker_color='lightblue'),
            row=2, col=1
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
        fig.add_trace(
            go.Bar(x=categories, y=sector_stats['–û–±—â–∏–π –æ–±—ä–µ–º'], 
                   name='–û–±—ä–µ–º', marker_color='orange'),
            row=2, col=2
        )
        
        fig.update_layout(
            title='üè¢ –°–µ–∫—Ç–æ—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ETF',
            height=800,
            showlegend=False
        )
        
        return fig
    
    def create_performance_comparison(self) -> go.Figure:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ª–∏–¥–µ—Ä–æ–≤ –∏ –∞—É—Ç—Å–∞–π–¥–µ—Ä–æ–≤"""
        
        if self.df is None or len(self.df) == 0:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        df_sorted = self.df.sort_values('annual_return', ascending=True)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø –∏ –∞—É—Ç—Å–∞–π–¥–µ—Ä–æ–≤
        top_performers = df_sorted.tail(10)
        worst_performers = df_sorted.head(10)
        
        fig = make_subplots(
            rows=1, cols=2,
            subplot_titles=('üèÜ –¢–û–ü-10 –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏', 'üìâ –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã'),
            horizontal_spacing=0.1
        )
        
        # –¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
        fig.add_trace(
            go.Bar(
                y=top_performers['ticker'],
                x=top_performers['annual_return'],
                orientation='h',
                name='–õ–∏–¥–µ—Ä—ã',
                marker_color='green',
                text=top_performers['annual_return'].round(1),
                textposition='outside'
            ),
            row=1, col=1
        )
        
        # –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã
        fig.add_trace(
            go.Bar(
                y=worst_performers['ticker'],
                x=worst_performers['annual_return'],
                orientation='h',
                name='–ê—É—Ç—Å–∞–π–¥–µ—Ä—ã',
                marker_color='red',
                text=worst_performers['annual_return'].round(1),
                textposition='outside'
            ),
            row=1, col=2
        )
        
        fig.update_layout(
            title='üìä –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: –ª–∏–¥–µ—Ä—ã vs –∞—É—Ç—Å–∞–π–¥–µ—Ä—ã',
            height=600,
            showlegend=False
        )
        
        fig.update_xaxes(title_text="–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)", row=1, col=1)
        fig.update_xaxes(title_text="–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)", row=1, col=2)
        
        return fig
    
    def create_expense_ratio_analysis(self) -> go.Figure:
        """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π (expense ratio)"""
        
        if self.df is None or len(self.df) == 0:
            return None
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ expense_ratio
        valid_data = self.df[self.df['expense_ratio'].notna() & (self.df['expense_ratio'] > 0)]
        
        if len(valid_data) == 0:
            return None
        
        fig = px.scatter(
            valid_data,
            x='expense_ratio',
            y='annual_return',
            size='avg_daily_volume',
            color='category',
            hover_name='ticker',
            title='üí∞ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π vs –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
            labels={
                'expense_ratio': '–ö–æ–º–∏—Å—Å–∏—è (%)',
                'annual_return': '–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)'
            }
        )
        
        fig.update_layout(
            width=1000,
            height=600
        )
        
        return fig
    
    def create_liquidity_analysis(self) -> go.Figure:
        """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
        
        if self.df is None or len(self.df) == 0:
            return None
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        self.df['liquidity_category'] = pd.cut(
            self.df['avg_daily_volume'], 
            bins=[0, 1000, 10000, 100000, float('inf')],
            labels=['–ù–∏–∑–∫–∞—è', '–°—Ä–µ–¥–Ω—è—è', '–í—ã—Å–æ–∫–∞—è', '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è']
        )
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        liquidity_stats = self.df.groupby('liquidity_category').agg({
            'annual_return': 'mean',
            'volatility': 'mean',
            'ticker': 'count'
        }).round(2)
        
        fig = make_subplots(
            rows=1, cols=3,
            subplot_titles=('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏', '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETF')
        )
        
        categories = liquidity_stats.index.tolist()
        
        fig.add_trace(
            go.Bar(x=categories, y=liquidity_stats['annual_return'], 
                   marker_color='blue'),
            row=1, col=1
        )
        
        fig.add_trace(
            go.Bar(x=categories, y=liquidity_stats['volatility'], 
                   marker_color='red'),
            row=1, col=2
        )
        
        fig.add_trace(
            go.Bar(x=categories, y=liquidity_stats['ticker'], 
                   marker_color='green'),
            row=1, col=3
        )
        
        fig.update_layout(
            title='üíß –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ ETF',
            height=500,
            showlegend=False
        )
        
        return fig
    
    def create_comprehensive_dashboard(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π HTML –¥–∞—à–±–æ—Ä–¥"""
        
        print("üé® –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏
        risk_return_fig = self.create_risk_return_scatter()
        sector_fig = self.create_sector_analysis()
        performance_fig = self.create_performance_comparison()
        expense_fig = self.create_expense_ratio_analysis()
        liquidity_fig = self.create_liquidity_analysis()
        
        # –°–æ–∑–¥–∞–µ–º HTML –¥–∞—à–±–æ—Ä–¥
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"interactive_etf_dashboard_{timestamp}.html"
        
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö ETF</title>
            <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}
                .header {{ text-align: center; color: #2c3e50; margin-bottom: 30px; }}
                .chart-container {{ background: white; margin: 20px 0; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .stats {{ display: flex; justify-content: space-around; background: #e8f4fd; padding: 20px; border-radius: 10px; margin: 20px 0; }}
                .stat-item {{ text-align: center; }}
                .stat-number {{ font-size: 2em; font-weight: bold; color: #2c3e50; }}
                .stat-label {{ color: #7f8c8d; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üöÄ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö ETF</h1>
                <h2>–ê–Ω–∞–ª–∏–∑ {len(self.df)} —Ñ–æ–Ω–¥–æ–≤ –Ω–∞ MOEX</h2>
                <p>–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
            </div>
            
            <div class="stats">
                <div class="stat-item">
                    <div class="stat-number">{len(self.df)}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ ETF</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">{self.df['annual_return'].mean():.1f}%</div>
                    <div class="stat-label">–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">{self.df['volatility'].mean():.1f}%</div>
                    <div class="stat-label">–°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">{len(self.df['category'].unique())}</div>
                    <div class="stat-label">–ö–∞—Ç–µ–≥–æ—Ä–∏–π –∞–∫—Ç–∏–≤–æ–≤</div>
                </div>
            </div>
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        charts = [
            (risk_return_fig, "risk_return", "üìä –ê–Ω–∞–ª–∏–∑ –†–∏—Å–∫-–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"),
            (sector_fig, "sector_analysis", "üè¢ –°–µ–∫—Ç–æ—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"),
            (performance_fig, "performance_comparison", "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"),
            (expense_fig, "expense_analysis", "üí∞ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π"),
            (liquidity_fig, "liquidity_analysis", "üíß –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
        ]
        
        for fig, div_id, title in charts:
            if fig:
                html_content += f"""
                <div class="chart-container">
                    <h3>{title}</h3>
                    <div id="{div_id}"></div>
                    <script>
                        Plotly.newPlot('{div_id}', {fig.to_json()});
                    </script>
                </div>
                """
        
        html_content += """
        <div class="chart-container">
            <h3>üìã –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∞–Ω–∞–ª–∏–∑–∞</h3>
            <ul>
                <li><strong>–†–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</strong> –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏</li>
                <li><strong>–°–µ–∫—Ç–æ—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:</strong> –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∞–∫—Ç–∏–≤–æ–≤</li>
                <li><strong>–ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π:</strong> –í–ª–∏—è–Ω–∏–µ expense ratio –Ω–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å</li>
                <li><strong>–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å:</strong> –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–±—ä–µ–º–æ–≤ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏—è –Ω–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å</li>
                <li><strong>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:</strong> –í—ã—è–≤–ª–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–æ–≤ –∏ –∞—É—Ç—Å–∞–π–¥–µ—Ä–æ–≤ —Ä—ã–Ω–∫–∞</li>
            </ul>
        </div>
        </body>
        </html>
        """
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω: {filename}")
        return filename
        
        fig = px.scatter(valid_data, 
                        x='volatility', 
                        y='annual_return',
                        size='avg_daily_volume',
                        color='sharpe_ratio' if 'sharpe_ratio' in valid_data.columns else 'annual_return',
                        hover_name='ticker',
                        hover_data={
                            'short_name': True,
                            'annual_return': ':.2f',
                            'volatility': ':.2f',
                            'avg_daily_volume': ':,.0f',
                            'sharpe_ratio': ':.3f' if 'sharpe_ratio' in valid_data.columns else False
                        },
                        title="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
                        labels={
                            'volatility': '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)',
                            'annual_return': '–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)',
                            'avg_daily_volume': '–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤',
                            'sharpe_ratio': '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞'
                        },
                        color_continuous_scale='RdYlGn')
        
        fig.update_layout(
            width=800,
            height=600,
            showlegend=True
        )
        
        return fig
    
    def create_correlation_heatmap(self) -> go.Figure:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É"""
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-20 ETF –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        top_etf = self.df.nlargest(20, 'avg_daily_volume')
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
        from correlation_analysis import CorrelationAnalyzer
        analyzer = CorrelationAnalyzer()
        etf_list = top_etf.to_dict('records')
        correlation_matrix = analyzer.generate_synthetic_correlations(etf_list)
        
        fig = px.imshow(correlation_matrix,
                       title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —Ç–æ–ø-20 ETF",
                       color_continuous_scale='RdBu_r',
                       aspect='auto')
        
        fig.update_layout(
            width=700,
            height=700
        )
        
        return fig
    
    def create_portfolio_composition_sunburst(self) -> go.Figure:
        """–°–æ–∑–¥–∞–µ—Ç sunburst –¥–∏–∞–≥—Ä–∞–º–º—É —Å–æ—Å—Ç–∞–≤–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º ETF
        etf_types = {
            '–û–±–ª–∏–≥–∞—Ü–∏–∏': [],
            '–ê–∫—Ü–∏–∏': [],
            '–ó–æ–ª–æ—Ç–æ': [],
            '–í–∞–ª—é—Ç–Ω—ã–µ': [],
            '–î—Ä—É–≥–∏–µ': []
        }
        
        for _, row in self.df.iterrows():
            name = str(row.get('short_name', '')).lower()
            ticker = row['ticker']
            annual_return = row.get('annual_return', 0)
            
            if any(word in name for word in ['bond', '–æ–±–ª–∏–≥', 'gb', 'cb']):
                etf_types['–û–±–ª–∏–≥–∞—Ü–∏–∏'].append((ticker, annual_return))
            elif any(word in name for word in ['gold', '–∑–æ–ª–æ—Ç', 'gld']):
                etf_types['–ó–æ–ª–æ—Ç–æ'].append((ticker, annual_return))
            elif any(word in name for word in ['usd', 'eur', 'yuan']):
                etf_types['–í–∞–ª—é—Ç–Ω—ã–µ'].append((ticker, annual_return))
            elif any(word in name for word in ['equity', '–∞–∫—Ü', 'mx']):
                etf_types['–ê–∫—Ü–∏–∏'].append((ticker, annual_return))
            else:
                etf_types['–î—Ä—É–≥–∏–µ'].append((ticker, annual_return))
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è sunburst
        ids = []
        labels = []
        parents = []
        values = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category, etfs in etf_types.items():
            if etfs:
                ids.append(category)
                labels.append(f"{category} ({len(etfs)})")
                parents.append("")
                values.append(len(etfs))
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-3 ETF –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                top_etfs = sorted(etfs, key=lambda x: x[1], reverse=True)[:3]
                for ticker, return_val in top_etfs:
                    ids.append(f"{category}_{ticker}")
                    labels.append(f"{ticker} ({return_val:.1f}%)")
                    parents.append(category)
                    values.append(max(1, return_val))
        
        fig = go.Figure(go.Sunburst(
            ids=ids,
            labels=labels,
            parents=parents,
            values=values,
            branchvalues="total",
            title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞ ETF –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–æ–≤"
        ))
        
        fig.update_layout(
            width=600,
            height=600
        )
        
        return fig
    
    def create_performance_comparison(self) -> go.Figure:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–ø ETF"""
        
        top_etf = self.df.nlargest(10, 'sharpe_ratio' if 'sharpe_ratio' in self.df.columns else 'annual_return')
        
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞—Ä—ã –¥–ª—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        fig.add_trace(go.Bar(
            name='–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
            x=top_etf['ticker'],
            y=top_etf['annual_return'],
            yaxis='y',
            offsetgroup=1,
            marker_color='lightgreen'
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        fig.add_trace(go.Scatter(
            name='–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å',
            x=top_etf['ticker'],
            y=top_etf['volatility'],
            yaxis='y2',
            mode='lines+markers',
            line=dict(color='red', width=3),
            marker=dict(size=8)
        ))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏
        fig.update_layout(
            title='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–ø-10 ETF: –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å vs –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å',
            xaxis=dict(title='ETF'),
            yaxis=dict(title='–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)', side='left'),
            yaxis2=dict(title='–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)', side='right', overlaying='y'),
            width=900,
            height=500
        )
        
        return fig
    
    def create_dashboard(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥"""
        
        print("üé® –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_data()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        risk_return_fig = self.create_risk_return_scatter()
        correlation_fig = self.create_correlation_heatmap()
        sunburst_fig = self.create_portfolio_composition_sunburst()
        performance_fig = self.create_performance_comparison()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π –≥—Ä–∞—Ñ–∏–∫
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        files_created = []
        
        # –†–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        risk_return_file = f"interactive_risk_return_{timestamp}.html"
        risk_return_fig.write_html(risk_return_file)
        files_created.append(risk_return_file)
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        correlation_file = f"interactive_correlations_{timestamp}.html"
        correlation_fig.write_html(correlation_file)
        files_created.append(correlation_file)
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞
        sunburst_file = f"interactive_market_structure_{timestamp}.html"
        sunburst_fig.write_html(sunburst_file)
        files_created.append(sunburst_file)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_file = f"interactive_performance_{timestamp}.html"
        performance_fig.write_html(performance_file)
        files_created.append(performance_file)
        
        print("üíæ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        for file in files_created:
            print(f"   ‚Ä¢ {file}")
        
        return files_created[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    dashboard = InteractiveETFDashboard()
    result = dashboard.create_dashboard()
    
    if result:
        print("‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üåê –û—Ç–∫—Ä–æ–π—Ç–µ {result} –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")

if __name__ == "__main__":
    main()