#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö ETF –Ω–∞ MOEX
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –≤—Å–µ ETF –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –ø–æ –Ω–∏–º –¥–∞–Ω–Ω—ã–µ
"""

import pandas as pd
import requests
import time
import json
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É
from fallback_manager import DataProviderManager
from etf_data_collector import ETFDataCollectorWithFallback

class FullMOEXETFCollector:
    """–ü–æ–ª–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö ETF –Ω–∞ MOEX"""
    
    def __init__(self):
        self.fallback_manager = DataProviderManager()
        self.etf_collector = ETFDataCollectorWithFallback()
        self.logger = self._setup_logging()
        
        # –ö—ç—à –¥–ª—è —Å–ø–∏—Å–∫–∞ ETF
        self.etf_cache = {}
        self.cache_timestamp = None
        self.cache_ttl = 3600  # 1 —á–∞—Å
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        return logging.getLogger(__name__)
    
    def get_all_moex_etf(self, force_refresh: bool = False) -> pd.DataFrame:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö ETF —Å MOEX
        
        Args:
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
            
        Returns:
            DataFrame —Å–æ –≤—Å–µ–º–∏ ETF
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if not force_refresh and self._is_cache_valid():
            self.logger.info("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ ETF")
            return pd.DataFrame(self.etf_cache)
        
        try:
            self.logger.info("üìä –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ ETF —Å MOEX...")
            
            # –ü–æ–ª—É—á–∞–µ–º ETF —Å –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ—Å–∫–∏
            url = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQTF/securities.json"
            
            response = requests.get(url, timeout=30)
            response.raise_for_status()
            
            data = response.json()
            securities = data['securities']['data']
            columns = data['securities']['columns']
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            etf_df = pd.DataFrame(securities, columns=columns)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º ETF
            self.logger.info("üìã –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º ETF...")
            
            enhanced_etf_data = []
            
            for _, etf in etf_df.iterrows():
                ticker = etf['SECID']
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    detail_info = self._get_etf_details(ticker)
                    
                    etf_info = {
                        'ticker': ticker,
                        'short_name': etf.get('SHORTNAME', ''),
                        'full_name': etf.get('SECNAME', ''),
                        'isin': etf.get('ISIN', ''),
                        'reg_number': etf.get('REGNUMBER', ''),
                        'lot_size': etf.get('LOTSIZE', 1),
                        'face_value': etf.get('FACEVALUE', 0),
                        'status': etf.get('STATUS', ''),
                        'board_id': etf.get('BOARDID', ''),
                        'market_code': etf.get('MARKETCODE', ''),
                        'engine_id': etf.get('ENGINE', ''),
                        'type': etf.get('TYPE', ''),
                        'group': etf.get('GROUP', ''),
                        'is_traded': etf.get('STATUS') == 'A',  # A = Active
                        **detail_info
                    }
                    
                    enhanced_etf_data.append(etf_info)
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    time.sleep(0.1)
                    
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è {ticker}: {e}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    etf_info = {
                        'ticker': ticker,
                        'short_name': etf.get('SHORTNAME', ''),
                        'full_name': etf.get('SECNAME', ''),
                        'isin': etf.get('ISIN', ''),
                        'reg_number': etf.get('REGNUMBER', ''),
                        'lot_size': etf.get('LOTSIZE', 1),
                        'face_value': etf.get('FACEVALUE', 0),
                        'status': etf.get('STATUS', ''),
                        'board_id': etf.get('BOARDID', ''),
                        'market_code': etf.get('MARKETCODE', ''),
                        'engine_id': etf.get('ENGINE', ''),
                        'type': etf.get('TYPE', ''),
                        'group': etf.get('GROUP', ''),
                        'is_traded': etf.get('STATUS') == 'A',
                        'management_company': '',
                        'expense_ratio': None,
                        'inception_date': None,
                        'nav': None,
                        'assets_under_management': None
                    }
                    
                    enhanced_etf_data.append(etf_info)
            
            # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π DataFrame
            result_df = pd.DataFrame(enhanced_etf_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.etf_cache = result_df.to_dict('records')
            self.cache_timestamp = datetime.now()
            
            self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result_df)} ETF —Å MOEX")
            self.logger.info(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {result_df['is_traded'].sum()}")
            self.logger.info(f"   ‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {(~result_df['is_traded']).sum()}")
            
            return result_df
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ ETF: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.etf_cache:
                self.logger.info("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return pd.DataFrame(self.etf_cache)
            
            raise
    
    def _get_etf_details(self, ticker: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± ETF"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ–Ω–¥–µ
            url = f"https://iss.moex.com/iss/securities/{ticker}.json"
            
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            details = {}
            
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–∞–∑–Ω—ã—Ö —Å–µ–∫—Ü–∏—è—Ö
            if 'description' in data and data['description']['data']:
                desc_data = data['description']['data']
                desc_columns = data['description']['columns']
                
                for row in desc_data:
                    if len(row) >= 3:
                        name = row[0] if len(row) > 0 else ''
                        value = row[2] if len(row) > 2 else ''
                        
                        if name == 'TYPENAME':
                            details['fund_type'] = value
                        elif name == 'EMITTER_TITLE':
                            details['management_company'] = value
                        elif name == 'LISTLEVEL':
                            details['listing_level'] = value
                        elif name == 'ISSUEDATE':
                            details['inception_date'] = value
            
            return details
            
        except Exception as e:
            self.logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è {ticker}: {e}")
            return {
                'management_company': '',
                'expense_ratio': None,
                'inception_date': None,
                'nav': None,
                'assets_under_management': None
            }
    
    def _is_cache_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—ç—à–∞"""
        if not self.etf_cache or not self.cache_timestamp:
            return False
        
        return (datetime.now() - self.cache_timestamp).seconds < self.cache_ttl
    
    def collect_all_etf_data(self, active_only: bool = True) -> pd.DataFrame:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º ETF
        
        Args:
            active_only: –°–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º ETF
            
        Returns:
            DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –≤—Å–µ–º ETF
        """
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ETF
        etf_list = self.get_all_moex_etf()
        
        if active_only:
            etf_list = etf_list[etf_list['is_traded'] == True]
            self.logger.info(f"üìä –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ {len(etf_list)} –∞–∫—Ç–∏–≤–Ω—ã–º ETF")
        else:
            self.logger.info(f"üìä –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º {len(etf_list)} ETF")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É ETF
        all_etf_data = []
        successful_collections = 0
        failed_collections = 0
        
        for idx, etf_info in etf_list.iterrows():
            ticker = etf_info['ticker']
            
            try:
                self.logger.info(f"üìà –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker} ({idx + 1}/{len(etf_list)})")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
                etf_data = self.etf_collector.collect_etf_data(ticker)
                
                if etf_data:
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø–∏—Å–∫–∞ ETF
                    etf_data.update({
                        'short_name': etf_info['short_name'],
                        'full_name': etf_info['full_name'],
                        'isin': etf_info['isin'],
                        'reg_number': etf_info['reg_number'],
                        'management_company': etf_info.get('management_company', ''),
                        'is_traded': etf_info['is_traded'],
                        'listing_level': etf_info.get('listing_level', ''),
                        'inception_date': etf_info.get('inception_date', ''),
                        'collection_timestamp': datetime.now().isoformat()
                    })
                    
                    all_etf_data.append(etf_data)
                    successful_collections += 1
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker}")
                    failed_collections += 1
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(0.5)
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}: {e}")
                failed_collections += 1
                continue
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π DataFrame
        if all_etf_data:
            result_df = pd.DataFrame(all_etf_data)
            
            self.logger.info(f"‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω:")
            self.logger.info(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {successful_collections}")
            self.logger.info(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {failed_collections}")
            self.logger.info(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful_collections/(successful_collections+failed_collections)*100:.1f}%")
            
            return result_df
        else:
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É ETF")
            return pd.DataFrame()
    
    def create_comprehensive_report(self, etf_data: pd.DataFrame) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º ETF"""
        
        if etf_data.empty:
            return {}
        
        self.logger.info("üìä –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç...")
        
        report = {
            'summary': {
                'total_etf': len(etf_data),
                'active_etf': etf_data['is_traded'].sum() if 'is_traded' in etf_data.columns else len(etf_data),
                'total_market_cap': etf_data['market_cap'].sum() if 'market_cap' in etf_data.columns else 0,
                'average_return_1y': etf_data['annual_return'].mean() if 'annual_return' in etf_data.columns else 0,
                'average_volatility': etf_data['volatility'].mean() if 'volatility' in etf_data.columns else 0,
                'report_date': datetime.now().isoformat()
            },
            'top_performers': {},
            'management_companies': {},
            'categories': {},
            'risk_analysis': {}
        }
        
        # –¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
        if 'annual_return' in etf_data.columns:
            top_return = etf_data.nlargest(10, 'annual_return')[['ticker', 'short_name', 'annual_return']].to_dict('records')
            report['top_performers']['by_return'] = top_return
        
        if 'avg_daily_volume' in etf_data.columns:
            top_volume = etf_data.nlargest(10, 'avg_daily_volume')[['ticker', 'short_name', 'avg_daily_volume']].to_dict('records')
            report['top_performers']['by_volume'] = top_volume
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —É–ø—Ä–∞–≤–ª—è—é—â–∏–º –∫–æ–º–ø–∞–Ω–∏—è–º
        if 'management_company' in etf_data.columns:
            mc_stats = etf_data.groupby('management_company').agg({
                'ticker': 'count',
                'market_cap': 'sum' if 'market_cap' in etf_data.columns else lambda x: 0,
                'annual_return': 'mean' if 'annual_return' in etf_data.columns else lambda x: 0
            }).round(2)
            
            report['management_companies'] = mc_stats.to_dict('index')
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
        if 'volatility' in etf_data.columns and 'annual_return' in etf_data.columns:
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∏—Å–∫–∞
            low_risk = etf_data[etf_data['volatility'] < etf_data['volatility'].quantile(0.33)]
            medium_risk = etf_data[(etf_data['volatility'] >= etf_data['volatility'].quantile(0.33)) & 
                                 (etf_data['volatility'] < etf_data['volatility'].quantile(0.67))]
            high_risk = etf_data[etf_data['volatility'] >= etf_data['volatility'].quantile(0.67)]
            
            report['risk_analysis'] = {
                'low_risk': {
                    'count': len(low_risk),
                    'avg_return': low_risk['annual_return'].mean(),
                    'avg_volatility': low_risk['volatility'].mean()
                },
                'medium_risk': {
                    'count': len(medium_risk),
                    'avg_return': medium_risk['annual_return'].mean(),
                    'avg_volatility': medium_risk['volatility'].mean()
                },
                'high_risk': {
                    'count': len(high_risk),
                    'avg_return': high_risk['annual_return'].mean(),
                    'avg_volatility': high_risk['volatility'].mean()
                }
            }
        
        return report
    
    def save_results(self, etf_data: pd.DataFrame, report: Dict, prefix: str = "full_moex_etf"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if not etf_data.empty:
            csv_file = f"{prefix}_data_{timestamp}.csv"
            etf_data.to_csv(csv_file, index=False, encoding='utf-8')
            self.logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ ETF —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {csv_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        if report:
            json_file = f"{prefix}_report_{timestamp}.json"
            with open(json_file, 'w', encoding='utf-8') as f:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º numpy —Ç–∏–ø—ã –≤ –æ–±—ã—á–Ω—ã–µ Python —Ç–∏–ø—ã
                json.dump(report, f, ensure_ascii=False, indent=2, default=self._json_serializer)
            self.logger.info(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {json_file}")
        
        return csv_file if not etf_data.empty else None, json_file if report else None
    
    def _json_serializer(self, obj):
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è JSON, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π numpy —Ç–∏–ø—ã"""
        import numpy as np
        
        if isinstance(obj, np.integer):
            return int(obj)
        elif isinstance(obj, np.floating):
            return float(obj)
        elif isinstance(obj, np.ndarray):
            return obj.tolist()
        elif pd.isna(obj):
            return None
        
        raise TypeError(f"Object of type {type(obj)} is not JSON serializable")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    collector = FullMOEXETFCollector()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö ETF
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ETF –Ω–∞ MOEX...")
        etf_list = collector.get_all_moex_etf()
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ ETF –Ω–∞ MOEX:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ: {len(etf_list)}")
        print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {etf_list['is_traded'].sum()}")
        print(f"   ‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {(~etf_list['is_traded']).sum()}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º ETF
        etf_data = collector.collect_all_etf_data(active_only=True)
        
        if not etf_data.empty:
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            report = collector.create_comprehensive_report(etf_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            data_file, report_file = collector.save_results(etf_data, report)
            
            print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(etf_data)} ETF")
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
            if data_file:
                print(f"   ‚Ä¢ –î–∞–Ω–Ω—ã–µ: {data_file}")
            if report_file:
                print(f"   ‚Ä¢ –û—Ç—á–µ—Ç: {report_file}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if report and 'summary' in report:
                summary = report['summary']
                print(f"\nüìà –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {summary.get('average_return_1y', 0):.2f}%")
                print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {summary.get('average_volatility', 0):.2f}%")
                
                if 'top_performers' in report and 'by_return' in report['top_performers']:
                    top_etf = report['top_performers']['by_return'][0]
                    print(f"   ‚Ä¢ –õ—É—á—à–∏–π ETF: {top_etf['ticker']} ({top_etf['annual_return']:.2f}%)")
        
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ ETF")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()