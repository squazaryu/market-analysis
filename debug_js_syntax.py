#!/usr/bin/env python3
"""
–î–µ–±–∞–≥–≥–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ JavaScript –∫–æ–¥–µ –¥–∞—à–±–æ—Ä–¥–∞
"""

import re

def find_js_syntax_issues(file_path):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ JavaScript –∫–æ–¥–µ"""
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    lines = content.split('\n')
    issues = []
    
    # –ò—â–µ–º JavaScript —Å–µ–∫—Ü–∏–∏
    in_script = False
    script_start = 0
    
    for i, line in enumerate(lines, 1):
        if '<script>' in line:
            in_script = True
            script_start = i
            continue
        elif '</script>' in line:
            in_script = False
            continue
            
        if in_script:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ JavaScript
            if '<' in line and not any(tag in line for tag in ['innerHTML', 'console.log', '//', '/*', '*/']):
                # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ innerHTML
                if not line.strip().startswith('//') and not line.strip().startswith('*'):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –≤ —Å–∫–æ–±–∫–∞—Ö
                    if not re.search(r'\([^)]*<[^)]*\)', line):
                        issues.append({
                            'line': i,
                            'content': line.strip(),
                            'issue': '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª < –≤ JavaScript –∫–æ–¥–µ',
                            'type': 'syntax_error'
                        })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            single_quotes = line.count("'") - line.count("\\'")
            double_quotes = line.count('"') - line.count('\\"')
            backticks = line.count('`')
            
            if single_quotes % 2 != 0:
                issues.append({
                    'line': i,
                    'content': line.strip(),
                    'issue': '–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏',
                    'type': 'quote_error'
                })
            
            if double_quotes % 2 != 0:
                issues.append({
                    'line': i,
                    'content': line.strip(),
                    'issue': '–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏',
                    'type': 'quote_error'
                })
            
            if backticks % 2 != 0:
                issues.append({
                    'line': i,
                    'content': line.strip(),
                    'issue': '–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ (template literals)',
                    'type': 'template_error'
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if re.search(r'(let|var|const)\s+(\w+)', line):
                var_match = re.search(r'(let|var|const)\s+(\w+)', line)
                if var_match:
                    var_name = var_match.group(2)
                    # –ò—â–µ–º –¥—Ä—É–≥–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —ç—Ç–æ–π –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                    for j, other_line in enumerate(lines, 1):
                        if j != i and re.search(rf'(let|var|const)\s+{var_name}\b', other_line):
                            issues.append({
                                'line': i,
                                'content': line.strip(),
                                'issue': f'–î—É–±–ª–∏—Ä—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {var_name} (—Ç–∞–∫–∂–µ –Ω–∞ —Å—Ç—Ä–æ–∫–µ {j})',
                                'type': 'duplicate_var'
                            })
    
    return issues

def main():
    print("üîç –î–µ–±–∞–≥–≥–µ—Ä JavaScript —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞")
    print("=" * 50)
    
    issues = find_js_syntax_issues('simple_dashboard.py')
    
    if not issues:
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º:")
    print()
    
    for issue in issues:
        print(f"–°—Ç—Ä–æ–∫–∞ {issue['line']}: {issue['issue']}")
        print(f"  –¢–∏–ø: {issue['type']}")
        print(f"  –ö–æ–¥: {issue['content']}")
        print()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    by_type = {}
    for issue in issues:
        issue_type = issue['type']
        if issue_type not in by_type:
            by_type[issue_type] = []
        by_type[issue_type].append(issue)
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º:")
    for issue_type, type_issues in by_type.items():
        print(f"  {issue_type}: {len(type_issues)} –ø—Ä–æ–±–ª–µ–º")

if __name__ == "__main__":
    main()