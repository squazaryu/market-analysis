#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ETF
–§–æ–∫—É—Å –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–∞—Ö –∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Tuple

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from risk_metrics import RiskMetricsCalculator, calculate_portfolio_metrics
from correlation_analysis import CorrelationAnalyzer
from portfolio_optimization import PortfolioOptimizer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = (20, 16)
plt.rcParams['font.size'] = 11
plt.rcParams['axes.titlesize'] = 14
plt.rcParams['axes.labelsize'] = 12

class AdvancedETFAnalytics:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ETF —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"""
    
    def __init__(self):
        self.risk_calculator = RiskMetricsCalculator()
        self.correlation_analyzer = CorrelationAnalyzer()
        self.portfolio_optimizer = PortfolioOptimizer()
        
    def load_etf_data(self) -> Tuple[pd.DataFrame, Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ ETF"""
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
        data_files = list(Path('.').glob('full_moex_etf_data_*.csv'))
        report_files = list(Path('.').glob('full_moex_etf_report_*.json'))
        
        if not data_files or not report_files:
            raise FileNotFoundError("–§–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ETF –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
        latest_data = max(data_files, key=lambda x: x.stat().st_mtime)
        latest_report = max(report_files, key=lambda x: x.stat().st_mtime)
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {latest_data}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = pd.read_csv(latest_data)
        
        with open(latest_report, 'r', encoding='utf-8') as f:
            report = json.load(f)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} ETF")
        return df, report
    
    def enhance_data_with_metrics(self, df: pd.DataFrame) -> pd.DataFrame:
        """–û–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ ETF —Ä–∞—Å—á–µ—Ç–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        
        print("üîÑ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏...")
        
        enhanced_df = df.copy()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Sharpe ratio (–±–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ 15%)
        risk_free_rate = 15.0
        enhanced_df['sharpe_ratio'] = (enhanced_df['annual_return'] - risk_free_rate) / enhanced_df['volatility']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Sortino ratio (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        enhanced_df['sortino_ratio'] = enhanced_df['annual_return'] / (enhanced_df['volatility'] * 0.7)  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–ª—å—Ñ—É –∏ –±–µ—Ç—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä—ã–Ω–∫–∞)
        market_return = enhanced_df['annual_return'].mean()
        market_volatility = enhanced_df['volatility'].mean()
        
        enhanced_df['beta'] = enhanced_df['volatility'] / market_volatility
        enhanced_df['alpha'] = enhanced_df['annual_return'] - (risk_free_rate + enhanced_df['beta'] * (market_return - risk_free_rate))
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∏—Å–∫—É
        enhanced_df['risk_level'] = pd.cut(
            enhanced_df['volatility'], 
            bins=[0, 10, 20, float('inf')],
            labels=['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π']
        )
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        enhanced_df['return_tier'] = pd.cut(
            enhanced_df['annual_return'], 
            bins=[-float('inf'), 5, 15, float('inf')],
            labels=['–ù–∏–∑–∫–∞—è', '–°—Ä–µ–¥–Ω—è—è', '–í—ã—Å–æ–∫–∞—è']
        )
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–æ–≥–∞—â–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∞–º–∏ –¥–ª—è {len(enhanced_df)} ETF")
        return enhanced_df
    
    def create_correlation_analysis(self, df: pd.DataFrame) -> np.ndarray:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ø ETF"""
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-20 ETF –ø–æ –æ–±—ä–µ–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        top_etfs = df.nlargest(20, 'avg_daily_volume')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        correlation_matrix = self.correlation_analyzer.generate_synthetic_correlations(
            top_etfs.to_dict('records')
        )
        
        return correlation_matrix
    
    def create_efficient_frontier_analysis(self, df: pd.DataFrame) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü—ã"""
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-15 ETF –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        top_etfs = df.nlargest(15, 'sharpe_ratio').to_dict('records')
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        returns, cov_matrix, tickers = self.portfolio_optimizer.prepare_data(top_etfs)
        
        # –°—Ç—Ä–æ–∏–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É
        efficient_frontier = self.portfolio_optimizer.build_efficient_frontier(
            returns, cov_matrix, num_portfolios=30
        )
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏
        optimal_portfolios = self.portfolio_optimizer.find_optimal_portfolios(top_etfs)
        
        return {
            'efficient_frontier': efficient_frontier,
            'optimal_portfolios': optimal_portfolios,
            'tickers': tickers
        }
    
    def generate_investment_recommendations(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        df, _ = self.load_etf_data()
        enhanced_df = self.enhance_data_with_metrics(df)
        
        recommendations = {
            'conservative_portfolio': {
                'description': '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å (–Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫)',
                'criteria': '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å < 15%, Sharpe > 0.5',
                'etfs': enhanced_df[(enhanced_df['volatility'] < 15) & (enhanced_df['sharpe_ratio'] > 0.5)]
                       .nlargest(5, 'sharpe_ratio')[['ticker', 'annual_return', 'volatility', 'sharpe_ratio']]
                       .to_dict('records')
            },
            'balanced_portfolio': {
                'description': '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å (—Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫)',
                'criteria': '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 15-25%, Sharpe > 0.3',
                'etfs': enhanced_df[(enhanced_df['volatility'] >= 15) & (enhanced_df['volatility'] <= 25) & (enhanced_df['sharpe_ratio'] > 0.3)]
                       .nlargest(5, 'sharpe_ratio')[['ticker', 'annual_return', 'volatility', 'sharpe_ratio']]
                       .to_dict('records')
            },
            'aggressive_portfolio': {
                'description': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å (–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)',
                'criteria': '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å > 20%, –ª—é–±–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å',
                'etfs': enhanced_df[enhanced_df['annual_return'] > 20]
                       .nlargest(5, 'annual_return')[['ticker', 'annual_return', 'volatility', 'sharpe_ratio']]
                       .to_dict('records')
            },
            'diversification_picks': {
                'description': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                'criteria': '–†–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–æ–≤ —Å —Ö–æ—Ä–æ—à–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏',
                'etfs': enhanced_df.groupby('category').apply(
                    lambda x: x.nlargest(1, 'sharpe_ratio')
                ).reset_index(drop=True)[['ticker', 'category', 'annual_return', 'volatility', 'sharpe_ratio']]
                .to_dict('records')
            }
        }
        
        return recommendations
    
    def create_comprehensive_analysis(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏"""
        
        print("üî¨ –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df, report = self.load_etf_data()
        enhanced_df = self.enhance_data_with_metrics(df)
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã
        correlation_matrix = self.create_correlation_analysis(enhanced_df)
        frontier_analysis = self.create_efficient_frontier_analysis(enhanced_df)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # 1. –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é —Ñ–∏–≥—É—Ä—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ subplot
        fig, axes = plt.subplots(3, 3, figsize=(24, 20))
        fig.suptitle('üî¨ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö ETF', fontsize=20, fontweight='bold')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        ax1 = axes[0, 0]
        scatter = ax1.scatter(enhanced_df['volatility'], enhanced_df['annual_return'], 
                             s=enhanced_df['avg_daily_volume']/1000, 
                             c=enhanced_df['category'].astype('category').cat.codes, 
                             alpha=0.7, cmap='tab10')
        ax1.set_xlabel('–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)')
        ax1.set_ylabel('–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
        ax1.set_title('üìä –†–∏—Å–∫ vs –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å')
        ax1.axhline(y=15, color='red', linestyle='--', alpha=0.7, label='–ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –°–µ–∫—Ç–æ—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        ax2 = axes[0, 1]
        sector_returns = enhanced_df.groupby('category')['annual_return'].mean().sort_values(ascending=True)
        bars = ax2.barh(range(len(sector_returns)), sector_returns.values, color='lightblue')
        ax2.set_yticks(range(len(sector_returns)))
        ax2.set_yticklabels(sector_returns.index, fontsize=9)
        ax2.set_xlabel('–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
        ax2.set_title('üè¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º')
        ax2.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        ax3 = axes[0, 2]
        if correlation_matrix is not None and len(correlation_matrix) > 0:
            im = ax3.imshow(correlation_matrix.values, cmap='RdBu', vmin=-1, vmax=1)
            ax3.set_xticks(range(len(correlation_matrix.columns)))
            ax3.set_yticks(range(len(correlation_matrix.index)))
            ax3.set_xticklabels(correlation_matrix.columns, rotation=45, fontsize=8)
            ax3.set_yticklabels(correlation_matrix.index, fontsize=8)
            ax3.set_title('üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞')
            plt.colorbar(im, ax=ax3, shrink=0.8)
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: Sharpe Ratio —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        ax4 = axes[1, 0]
        ax4.hist(enhanced_df['sharpe_ratio'].dropna(), bins=20, alpha=0.7, color='green')
        ax4.axvline(enhanced_df['sharpe_ratio'].mean(), color='red', linestyle='--', 
                   label=f'–°—Ä–µ–¥–Ω–µ–µ: {enhanced_df["sharpe_ratio"].mean():.2f}')
        ax4.set_xlabel('Sharpe Ratio')
        ax4.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETF')
        ax4.set_title('üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Sharpe Ratio')
        ax4.legend()
        ax4.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 5: –¢–æ–ø –∏ —Ö—É–¥—à–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
        ax5 = axes[1, 1]
        top_5 = enhanced_df.nlargest(5, 'annual_return')
        worst_5 = enhanced_df.nsmallest(5, 'annual_return')
        
        y_pos_top = np.arange(len(top_5))
        y_pos_worst = np.arange(len(worst_5)) + len(top_5) + 1
        
        ax5.barh(y_pos_top, top_5['annual_return'], color='green', alpha=0.7, label='–¢–æ–ø-5')
        ax5.barh(y_pos_worst, worst_5['annual_return'], color='red', alpha=0.7, label='–•—É–¥—à–∏–µ-5')
        
        all_tickers = list(top_5['ticker']) + [''] + list(worst_5['ticker'])
        ax5.set_yticks(list(y_pos_top) + [len(top_5)] + list(y_pos_worst))
        ax5.set_yticklabels(all_tickers, fontsize=9)
        ax5.set_xlabel('–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
        ax5.set_title('üèÜ –õ–∏–¥–µ—Ä—ã –∏ –∞—É—Ç—Å–∞–π–¥–µ—Ä—ã')
        ax5.legend()
        ax5.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 6: –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        ax6 = axes[1, 2]
        liquidity_bins = pd.cut(enhanced_df['avg_daily_volume'], bins=5, labels=['–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è', '–ù–∏–∑–∫–∞—è', '–°—Ä–µ–¥–Ω—è—è', '–í—ã—Å–æ–∫–∞—è', '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è'])
        liquidity_returns = enhanced_df.groupby(liquidity_bins)['annual_return'].mean()
        
        bars = ax6.bar(range(len(liquidity_returns)), liquidity_returns.values, color='orange', alpha=0.7)
        ax6.set_xticks(range(len(liquidity_returns)))
        ax6.set_xticklabels(liquidity_returns.index, rotation=45, fontsize=9)
        ax6.set_ylabel('–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
        ax6.set_title('üíß –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å vs –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å')
        ax6.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 7: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
        ax7 = axes[2, 0]
        if frontier_analysis and 'efficient_frontier' in frontier_analysis:
            ef = frontier_analysis['efficient_frontier']
            ax7.plot([v * 100 for v in ef['volatilities']], [r * 100 for r in ef['returns']], 
                    'b-', linewidth=2, label='–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ ETF
            top_15 = enhanced_df.nlargest(15, 'sharpe_ratio')
            ax7.scatter(top_15['volatility'], top_15['annual_return'], 
                       alpha=0.6, color='red', s=50, label='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ ETF')
            
            ax7.set_xlabel('–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)')
            ax7.set_ylabel('–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
            ax7.set_title('üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞')
            ax7.legend()
            ax7.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 8: –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π
        ax8 = axes[2, 1]
        valid_expense = enhanced_df[enhanced_df['expense_ratio'].notna() & (enhanced_df['expense_ratio'] > 0)]
        if len(valid_expense) > 0:
            ax8.scatter(valid_expense['expense_ratio'], valid_expense['annual_return'], 
                       alpha=0.7, color='purple')
            ax8.set_xlabel('–ö–æ–º–∏—Å—Å–∏—è (%)')
            ax8.set_ylabel('–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
            ax8.set_title('üí∞ –ö–æ–º–∏—Å—Å–∏–∏ vs –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å')
            ax8.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 9: –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        ax9 = axes[2, 2]
        ax9.axis('off')
        
        stats_text = f"""
        üìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        
        –í—Å–µ–≥–æ ETF: {len(enhanced_df)}
        –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {enhanced_df['annual_return'].mean():.1f}%
        –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {enhanced_df['volatility'].mean():.1f}%
        –°—Ä–µ–¥–Ω–∏–π Sharpe: {enhanced_df['sharpe_ratio'].mean():.2f}
        
        –õ—É—á—à–∏–π ETF: {enhanced_df.loc[enhanced_df['annual_return'].idxmax(), 'ticker']}
        ({enhanced_df['annual_return'].max():.1f}%)
        
        –°–∞–º—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π: {enhanced_df.loc[enhanced_df['volatility'].idxmin(), 'ticker']}
        ({enhanced_df['volatility'].min():.1f}% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
        
        –õ—É—á—à–∏–π Sharpe: {enhanced_df.loc[enhanced_df['sharpe_ratio'].idxmax(), 'ticker']}
        ({enhanced_df['sharpe_ratio'].max():.2f})
        """
        
        ax9.text(0.1, 0.9, stats_text, transform=ax9.transAxes, fontsize=11,
                verticalalignment='top', bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_filename = f"advanced_etf_analytics_{timestamp}.png"
        plt.savefig(image_filename, dpi=300, bbox_inches='tight')
        plt.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data_filename = f"enhanced_etf_data_{timestamp}.csv"
        enhanced_df.to_csv(data_filename, index=False, encoding='utf-8')
        
        print(f"‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:")
        print(f"   ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_filename}")
        print(f"   ‚Ä¢ –î–∞–Ω–Ω—ã–µ: {data_filename}")
        
        return image_filename
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {latest_data}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = pd.read_csv(latest_data)
        
        with open(latest_report, 'r', encoding='utf-8') as f:
            report = json.load(f)
        
        return df, report
    
    def calculate_enhanced_metrics(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö ETF"""
        
        print("üî¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏...")
        
        enhanced_data = []
        
        for _, row in df.iterrows():
            etf_data = row.to_dict()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ä–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏
            risk_metrics = self.risk_calculator.calculate_all_metrics(etf_data)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            enhanced_etf = {**etf_data, **risk_metrics}
            enhanced_data.append(enhanced_etf)
        
        return pd.DataFrame(enhanced_data)
    
    def create_investment_focused_visualization(self, df: pd.DataFrame) -> plt.Figure:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"""
        
        print("üé® –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é...")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
        fig = plt.figure(figsize=(24, 20))
        fig.suptitle('üìà –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê –†–û–°–°–ò–ô–°–ö–ò–• ETF\n–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', 
                     fontsize=18, fontweight='bold', y=0.98)
        
        # 1. –†–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å —Ä–∞–∑–º–µ—Ä–æ–º –ø—É–∑—ã—Ä—å–∫–æ–≤ = –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
        ax1 = plt.subplot(3, 4, 1)
        valid_data = df[(df['annual_return'].notna()) & (df['volatility'].notna()) & (df['avg_daily_volume'].notna())]
        
        scatter = ax1.scatter(valid_data['volatility'], valid_data['annual_return'], 
                             s=valid_data['avg_daily_volume']/1e6*10,  # –†–∞–∑–º–µ—Ä = –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
                             c=valid_data['sharpe_ratio'], cmap='RdYlGn', 
                             alpha=0.7, edgecolors='black', linewidth=0.5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ª—É—á—à–∏—Ö ETF
        top_sharpe = valid_data.nlargest(5, 'sharpe_ratio')
        for _, etf in top_sharpe.iterrows():
            ax1.annotate(etf['ticker'], 
                        (etf['volatility'], etf['annual_return']),
                        xytext=(5, 5), textcoords='offset points', 
                        fontsize=9, fontweight='bold',
                        bbox=dict(boxstyle='round,pad=0.3', facecolor='yellow', alpha=0.7))
        
        ax1.set_xlabel('–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)')
        ax1.set_ylabel('–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
        ax1.set_title('–†–∏—Å–∫ vs –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å\n(—Ä–∞–∑–º–µ—Ä = –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å, —Ü–≤–µ—Ç = Sharpe)')
        ax1.grid(True, alpha=0.3)
        plt.colorbar(scatter, ax=ax1, label='Sharpe Ratio')
        
        # 2. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ (—Ç–æ–ø-15 ETF)
        ax2 = plt.subplot(3, 4, 2)
        top_etf = valid_data.nlargest(15, 'avg_daily_volume')
        etf_list = top_etf.to_dict('records')
        
        correlation_matrix = self.correlation_analyzer.generate_synthetic_correlations(etf_list)
        
        sns.heatmap(correlation_matrix, annot=True, cmap='RdBu_r', center=0,
                   square=True, ax=ax2, cbar_kws={'label': '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è'})
        ax2.set_title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞\n(—Ç–æ–ø-15 –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)')
        ax2.tick_params(axis='x', rotation=45)
        ax2.tick_params(axis='y', rotation=0)
        
        # 3. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        ax3 = plt.subplot(3, 4, 3)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-10 ETF –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü—ã
        top_10_etf = valid_data.nlargest(10, 'sharpe_ratio').to_dict('records')
        
        if len(top_10_etf) >= 3:
            returns, cov_matrix, tickers = self.portfolio_optimizer.prepare_data(top_10_etf)
            efficient_frontier = self.portfolio_optimizer.build_efficient_frontier(returns, cov_matrix, 30)
            
            if efficient_frontier['portfolios']:
                ax3.plot(efficient_frontier['volatilities'], efficient_frontier['returns'], 
                        'b-', linewidth=2, label='–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞')
                    
    
            # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏
            optimal_portfolios = self.portfolio_optimizer.find_optimal_portfolios(top_10_etf)
            
            # –û—Ç–º–µ—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏
            for name, portfolio in optimal_portfolios.items():
                if name in ['maximum_sharpe', 'minimum_variance']:
                    ax3.scatter(portfolio['volatility'], portfolio['return'], 
                              s=100, label=f"{name.replace('_', ' ').title()}")
            
            ax3.set_xlabel('–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)')
            ax3.set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
            ax3.set_title('–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞\n(—Ç–æ–ø-10 ETF –ø–æ Sharpe)')
            ax3.legend()
            ax3.grid(True, alpha=0.3)
        
        # 4. –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫-—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        ax4 = plt.subplot(3, 4, 4)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ Sharpe ratio
        sharpe_data = valid_data.nlargest(15, 'sharpe_ratio')
        
        bars = ax4.barh(range(len(sharpe_data)), sharpe_data['sharpe_ratio'],
                       color=plt.cm.RdYlGn(np.linspace(0.3, 0.9, len(sharpe_data))))
        
        ax4.set_yticks(range(len(sharpe_data)))
        ax4.set_yticklabels(sharpe_data['ticker'])
        ax4.set_xlabel('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞')
        ax4.set_title('–¢–æ–ø-15 ETF –ø–æ Sharpe Ratio\n(—Ä–∏—Å–∫-—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å)')
        ax4.grid(axis='x', alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä—ã
        for i, bar in enumerate(bars):
            width = bar.get_width()
            ax4.text(width + 0.01, bar.get_y() + bar.get_height()/2, 
                    f'{width:.2f}', ha='left', va='center', fontweight='bold')
        
        # 5. –°–µ–∫—Ç–æ—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ø–æ —Ç–∏–ø–∞–º ETF)
        ax5 = plt.subplot(3, 4, 5)
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º ETF –ø–æ —Ç–∏–ø–∞–º
        etf_types = self._classify_etf_types(valid_data)
        type_performance = {}
        
        for etf_type, etfs in etf_types.items():
            if etfs:
                avg_return = np.mean([etf['annual_return'] for etf in etfs])
                avg_vol = np.mean([etf['volatility'] for etf in etfs])
                count = len(etfs)
                type_performance[etf_type] = {
                    'return': avg_return,
                    'volatility': avg_vol,
                    'count': count
                }
        
        # –°–æ–∑–¥–∞–µ–º scatter plot –ø–æ —Ç–∏–ø–∞–º
        for etf_type, perf in type_performance.items():
            ax5.scatter(perf['volatility'], perf['return'], 
                       s=perf['count']*20, label=f"{etf_type} ({perf['count']})",
                       alpha=0.7)
        
        ax5.set_xlabel('–°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)')
        ax5.set_ylabel('–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
        ax5.set_title('–ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–æ–≤\n(—Ä–∞–∑–º–µ—Ä = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ETF)')
        ax5.legend()
        ax5.grid(True, alpha=0.3)
        
        # 6. –ê–Ω–∞–ª–∏–∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Å–∞–¥–æ–∫
        ax6 = plt.subplot(3, 4, 6)
        
        drawdown_data = valid_data.nsmallest(15, 'max_drawdown')  # –ù–∞–∏–º–µ–Ω—å—à–∏–µ –ø—Ä–æ—Å–∞–¥–∫–∏ (–ª—É—á—à–∏–µ)
        
        bars = ax6.barh(range(len(drawdown_data)), drawdown_data['max_drawdown'],
                       color=plt.cm.RdYlGn_r(np.linspace(0.2, 0.8, len(drawdown_data))))
        
        ax6.set_yticks(range(len(drawdown_data)))
        ax6.set_yticklabels(drawdown_data['ticker'])
        ax6.set_xlabel('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ (%)')
        ax6.set_title('–¢–æ–ø-15 ETF –ø–æ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏\n(–Ω–∞–∏–º–µ–Ω—å—à–∏–µ –ø—Ä–æ—Å–∞–¥–∫–∏)')
        ax6.grid(axis='x', alpha=0.3)
        
        # 7. Value at Risk (VaR) –∞–Ω–∞–ª–∏–∑
        ax7 = plt.subplot(3, 4, 7)
        
        var_data = valid_data.nlargest(15, 'var_95')  # –ù–∞–∏–±–æ–ª—å—à–∏–µ VaR (–Ω–∞–∏–±–æ–ª–µ–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ)
        
        ax7.scatter(var_data['var_95'], var_data['annual_return'], 
                   s=60, c=var_data['volatility'], cmap='Reds', alpha=0.7)
        
        ax7.set_xlabel('VaR 95% (–¥–Ω–µ–≤–Ω–æ–π —Ä–∏—Å–∫, %)')
        ax7.set_ylabel('–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
        ax7.set_title('–ê–Ω–∞–ª–∏–∑ Value at Risk\n(—Ü–≤–µ—Ç = –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)')
        ax7.grid(True, alpha=0.3)
        
        # 8. –ê–ª—å—Ñ–∞ vs –ë–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑
        ax8 = plt.subplot(3, 4, 8)
        
        ax8.scatter(valid_data['beta'], valid_data['alpha'], 
                   s=60, c=valid_data['annual_return'], cmap='RdYlGn', alpha=0.7)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–∞–¥—Ä–∞–Ω—Ç—ã
        ax8.axhline(y=0, color='black', linestyle='--', alpha=0.5)
        ax8.axvline(x=1, color='black', linestyle='--', alpha=0.5)
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∫–≤–∞–¥—Ä–∞–Ω—Ç—ã
        ax8.text(0.5, 2, '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫\n–í—ã—Å–æ–∫–∞—è –∞–ª—å—Ñ–∞', ha='center', va='center',
                bbox=dict(boxstyle='round', facecolor='lightgreen', alpha=0.7))
        ax8.text(1.5, 2, '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫\n–í—ã—Å–æ–∫–∞—è –∞–ª—å—Ñ–∞', ha='center', va='center',
                bbox=dict(boxstyle='round', facecolor='yellow', alpha=0.7))
        ax8.text(0.5, -2, '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫\n–ù–∏–∑–∫–∞—è –∞–ª—å—Ñ–∞', ha='center', va='center',
                bbox=dict(boxstyle='round', facecolor='orange', alpha=0.7))
        ax8.text(1.5, -2, '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫\n–ù–∏–∑–∫–∞—è –∞–ª—å—Ñ–∞', ha='center', va='center',
                bbox=dict(boxstyle='round', facecolor='lightcoral', alpha=0.7))
        
        ax8.set_xlabel('–ë–µ—Ç–∞ (—Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫)')
        ax8.set_ylabel('–ê–ª—å—Ñ–∞ (–∏–∑–±—ã—Ç–æ—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, %)')
        ax8.set_title('–ê–ª—å—Ñ–∞ vs –ë–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑\n(—Ü–≤–µ—Ç = –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å)')
        ax8.grid(True, alpha=0.3)
        
        # 9. –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        ax9 = plt.subplot(3, 4, 9)
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        top_20_etf = valid_data.nlargest(20, 'avg_daily_volume').to_dict('records')
        correlation_matrix = self.correlation_analyzer.generate_synthetic_correlations(top_20_etf)
        diversification_opps = self.correlation_analyzer.find_diversification_opportunities(
            correlation_matrix, top_20_etf, threshold=0.3)
        
        if diversification_opps:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            top_opps = diversification_opps[:10]
            
            benefits = [opp['diversification_benefit'] for opp in top_opps]
            correlations = [abs(opp['correlation']) for opp in top_opps]
            labels = [f"{opp['etf1']}-{opp['etf2']}" for opp in top_opps]
            
            bars = ax9.barh(range(len(top_opps)), benefits,
                           color=plt.cm.Greens(np.linspace(0.4, 0.9, len(top_opps))))
            
            ax9.set_yticks(range(len(top_opps)))
            ax9.set_yticklabels(labels, fontsize=9)
            ax9.set_xlabel('–í—ã–≥–æ–¥–∞ –æ—Ç –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (%)')
            ax9.set_title('–¢–æ–ø-10 –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö\n–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π')
            ax9.grid(axis='x', alpha=0.3)
        
        # 10. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        ax10 = plt.subplot(3, 4, 10)
        ax10.axis('off')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._generate_investment_recommendations(valid_data)
        
        rec_text = "üéØ –ò–ù–í–ï–°–¢–ò–¶–ò–û–ù–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n\n"
        
        for category, recs in recommendations.items():
            rec_text += f"üìä {category.upper()}:\n"
            for rec in recs[:3]:  # –¢–æ–ø-3 –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                rec_text += f"‚Ä¢ {rec['ticker']}: {rec['reason']}\n"
            rec_text += "\n"
        
        ax10.text(0.05, 0.95, rec_text, transform=ax10.transAxes, fontsize=10,
                 verticalalignment='top', 
                 bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))
        
        # 11. –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏
        ax11 = plt.subplot(3, 4, 11)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
        if len(top_10_etf) >= 3:
            optimal_portfolios = self.portfolio_optimizer.find_optimal_portfolios(top_10_etf)
            
            # –ë–µ—Ä–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ Sharpe
            max_sharpe_portfolio = optimal_portfolios['maximum_sharpe']
            weights = list(max_sharpe_portfolio['weights'].values())
            tickers = list(max_sharpe_portfolio['weights'].keys())
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –≤–µ—Å–∞ (>1%)
            significant_weights = [(t, w) for t, w in zip(tickers, weights) if w > 0.01]
            significant_weights.sort(key=lambda x: x[1], reverse=True)
            
            if significant_weights:
                sig_tickers, sig_weights = zip(*significant_weights)
                
                wedges, texts, autotexts = ax11.pie(sig_weights, labels=sig_tickers, 
                                                   autopct='%1.1f%%', startangle=90)
                ax11.set_title(f'–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å\n(Sharpe: {max_sharpe_portfolio["sharpe_ratio"]:.2f})')
        
        # 12. –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        ax12 = plt.subplot(3, 4, 12)
        ax12.axis('off')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        insights = self._generate_key_insights(valid_data, correlation_matrix)
        
        insights_text = "üí° –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:\n\n"
        for insight in insights:
            insights_text += f"‚Ä¢ {insight}\n\n"
        
        ax12.text(0.05, 0.95, insights_text, transform=ax12.transAxes, fontsize=10,
                 verticalalignment='top',
                 bbox=dict(boxstyle='round', facecolor='lightyellow', alpha=0.8))
        
        plt.tight_layout()
        return fig
    
    def _classify_etf_types(self, df: pd.DataFrame) -> Dict[str, List[Dict]]:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç ETF –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–æ–≤"""
        
        types = {
            '–û–±–ª–∏–≥–∞—Ü–∏–∏': [],
            '–ê–∫—Ü–∏–∏': [],
            '–ó–æ–ª–æ—Ç–æ/–°—ã—Ä—å–µ': [],
            '–í–∞–ª—é—Ç–Ω—ã–µ': [],
            '–°–º–µ—à–∞–Ω–Ω—ã–µ': []
        }
        
        for _, row in df.iterrows():
            etf = row.to_dict()
            name = str(etf.get('short_name', '')).lower()
            
            if any(word in name for word in ['bond', '–æ–±–ª–∏–≥', 'gb', 'cb']):
                types['–û–±–ª–∏–≥–∞—Ü–∏–∏'].append(etf)
            elif any(word in name for word in ['gold', '–∑–æ–ª–æ—Ç', 'gld']):
                types['–ó–æ–ª–æ—Ç–æ/–°—ã—Ä—å–µ'].append(etf)
            elif any(word in name for word in ['usd', 'eur', 'yuan', '–≤–∞–ª—é—Ç']):
                types['–í–∞–ª—é—Ç–Ω—ã–µ'].append(etf)
            elif any(word in name for word in ['equity', '–∞–∫—Ü', 'mx', 'index']):
                types['–ê–∫—Ü–∏–∏'].append(etf)
            else:
                types['–°–º–µ—à–∞–Ω–Ω—ã–µ'].append(etf)
        
        return types
    
    def _generate_investment_recommendations(self, df: pd.DataFrame) -> Dict[str, List[Dict]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        recommendations = {
            '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ': [],
            '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ': [],
            '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ': [],
            '–í—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å': []
        }
        
        # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ (–Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫, —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å)
        conservative = df[(df['volatility'] < df['volatility'].quantile(0.33)) & 
                         (df['annual_return'] > 0)]
        for _, etf in conservative.nlargest(5, 'sharpe_ratio').iterrows():
            recommendations['–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ'].append({
                'ticker': etf['ticker'],
                'reason': f"–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ ({etf['volatility']:.1f}%), –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {etf['annual_return']:.1f}%"
            })
        
        # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (—Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫, —Ö–æ—Ä–æ—à–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å)
        balanced = df[(df['volatility'] >= df['volatility'].quantile(0.33)) & 
                     (df['volatility'] <= df['volatility'].quantile(0.67)) &
                     (df['sharpe_ratio'] > df['sharpe_ratio'].median())]
        for _, etf in balanced.nlargest(5, 'sharpe_ratio').iterrows():
            recommendations['–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ'].append({
                'ticker': etf['ticker'],
                'reason': f"Sharpe {etf['sharpe_ratio']:.2f}, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {etf['annual_return']:.1f}%"
            })
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ (–≤—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å)
        aggressive = df.nlargest(10, 'annual_return')
        for _, etf in aggressive.iterrows():
            recommendations['–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ'].append({
                'ticker': etf['ticker'],
                'reason': f"–í—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {etf['annual_return']:.1f}% (—Ä–∏—Å–∫ {etf['volatility']:.1f}%)"
            })
        
        # –í—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
        liquid = df.nlargest(10, 'avg_daily_volume')
        for _, etf in liquid.iterrows():
            recommendations['–í—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å'].append({
                'ticker': etf['ticker'],
                'reason': f"–û–±—ä–µ–º {etf['avg_daily_volume']/1e6:.0f}–ú —Ä—É–±/–¥–µ–Ω—å"
            })
        
        return recommendations
    
    def _generate_key_insights(self, df: pd.DataFrame, correlation_matrix: pd.DataFrame) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤"""
        
        insights = []
        
        # –õ—É—á—à–∏–π ETF –ø–æ Sharpe
        best_sharpe = df.loc[df['sharpe_ratio'].idxmax()]
        insights.append(f"–õ—É—á—à–∏–π —Ä–∏—Å–∫-—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ETF: {best_sharpe['ticker']} "
                       f"(Sharpe: {best_sharpe['sharpe_ratio']:.2f})")
        
        # –°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ä—ã–Ω–∫–∞
        correlations = []
        for i in range(len(correlation_matrix.index)):
            for j in range(i+1, len(correlation_matrix.columns)):
                correlations.append(correlation_matrix.iloc[i, j])
        
        avg_correlation = np.mean(correlations)
        insights.append(f"–°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ä—ã–Ω–∫–∞: {avg_correlation:.2f} "
                       f"({'–≤—ã—Å–æ–∫–∞—è' if avg_correlation > 0.6 else '—É–º–µ—Ä–µ–Ω–Ω–∞—è' if avg_correlation > 0.3 else '–Ω–∏–∑–∫–∞—è'} —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å)")
        
        # –î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        low_corr_count = sum(1 for c in correlations if abs(c) < 0.3)
        insights.append(f"–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {low_corr_count} –ø–∞—Ä —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π <0.3")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–æ–≤
        etf_types = self._classify_etf_types(df)
        largest_category = max(etf_types.items(), key=lambda x: len(x[1]))
        insights.append(f"–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ç–∏–ø –∞–∫—Ç–∏–≤–æ–≤: {largest_category[0]} ({len(largest_category[1])} ETF)")
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞
        avg_vol = df['volatility'].mean()
        insights.append(f"–°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞: {avg_vol:.1f}% "
                       f"({'–≤—ã—Å–æ–∫–∞—è' if avg_vol > 20 else '—É–º–µ—Ä–µ–Ω–Ω–∞—è' if avg_vol > 15 else '–Ω–∏–∑–∫–∞—è'})")
        
        return insights
    
    def run_analysis(self) -> str:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Å–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"""
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df, report = self.load_etf_data()
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} ETF –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            enhanced_df = self.calculate_enhanced_metrics(df)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            fig = self.create_investment_focused_visualization(enhanced_df)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"advanced_etf_analytics_{timestamp}.png"
            
            fig.savefig(filename, dpi=300, bbox_inches='tight', facecolor='white')
            print(f"üíæ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            enhanced_data_file = f"enhanced_etf_data_{timestamp}.csv"
            enhanced_df.to_csv(enhanced_data_file, index=False)
            print(f"üíæ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {enhanced_data_file}")
            
            plt.show()
            
            return filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            import traceback
            traceback.print_exc()
            return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É ETF...")
    
    analytics = AdvancedETFAnalytics()
    result = analytics.run_analysis()
    
    if result:
        print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üéØ –§–æ–∫—É—Å –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É")

if __name__ == "__main__":
    main()