#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –≤–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ETF
–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ
"""

from flask import Flask, render_template_string, jsonify
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.utils
import json
from datetime import datetime
from pathlib import Path
from capital_flow_analyzer import CapitalFlowAnalyzer

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
etf_data = None

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
def load_etf_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ ETF"""
    global etf_data
    
    try:
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
        data_files = list(Path('.').glob('enhanced_etf_data_*.csv'))
        if not data_files:
            data_files = list(Path('.').glob('full_moex_etf_data_*.csv'))
        
        if not data_files:
            print("‚ùå –§–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ETF –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        latest_data = max(data_files, key=lambda x: x.stat().st_mtime)
        print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {latest_data}")
        
        etf_data = pd.read_csv(latest_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'sharpe_ratio' not in etf_data.columns:
            risk_free_rate = 15.0
            etf_data['sharpe_ratio'] = (etf_data['annual_return'] - risk_free_rate) / etf_data['volatility']
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(etf_data)} ETF")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
load_etf_data()

# HTML —à–∞–±–ª–æ–Ω
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üìä –ü—Ä–æ—Å—Ç–æ–π ETF –î–∞—à–±–æ—Ä–¥</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    
    <style>
        body { background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%); }
        .navbar { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
        .card { border: none; border-radius: 15px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); }
        .stat-card { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
        .stat-number { font-size: 2rem; font-weight: bold; }
        .positive { color: #28a745; font-weight: bold; }
        .negative { color: #dc3545; font-weight: bold; }
        .btn-working { background: #28a745; color: white; }
        
        /* –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ */
        .plotly-graph-div {
            min-height: 600px !important;
            width: 100% !important;
        }
        
        /* –£–ª—É—á—à–µ–Ω–Ω–∞—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–µ–∫ */
        .card {
            margin-bottom: 2rem;
        }
        
        .card-header h5 {
            margin-bottom: 0;
            font-weight: 600;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-dark">
        <div class="container">
            <span class="navbar-brand">
                <i class="fas fa-chart-line me-2"></i>
                –ü—Ä–æ—Å—Ç–æ–π ETF –î–∞—à–±–æ—Ä–¥
            </span>
            <span class="navbar-text" id="current-time"></span>
        </div>
    </nav>

    <div class="container mt-4">
        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        <div class="row mb-4" id="stats-section">
            <div class="col-12 text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                </div>
                <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
            </div>
        </div>

        <!-- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏</h5>
                    </div>
                    <div class="card-body">
                        <div class="btn-group me-2" role="group">
                            <button class="btn btn-outline-primary active" onclick="toggleChart('scatter', this)">
                                <i class="fas fa-circle me-1"></i>Scatter
                            </button>
                            <button class="btn btn-outline-primary" onclick="toggleChart('bubble', this)">
                                <i class="fas fa-dot-circle me-1"></i>Bubble
                            </button>
                        </div>
                        <button class="btn btn-warning" onclick="refreshData()">
                            <i class="fas fa-refresh me-1"></i>–û–±–Ω–æ–≤–∏—Ç—å
                        </button>
                        <button class="btn btn-info" onclick="forceLoadCharts()">
                            <i class="fas fa-chart-bar me-1"></i>–ó–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
                        </button>
                        <button class="btn btn-secondary" onclick="testAPI()">
                            <i class="fas fa-bug me-1"></i>–¢–µ—Å—Ç API
                        </button>
                        <button class="btn btn-warning" onclick="showCharts()">
                            <i class="fas fa-eye me-1"></i>–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏
                        </button>
                        <button class="btn btn-success" onclick="fixGraphics()">
                            <i class="fas fa-magic me-1"></i>–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        </button>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>üìä –§–∏–ª—å—Ç—Ä—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</h5>
                    </div>
                    <div class="card-body">
                        <div class="btn-group" role="group">
                            <button class="btn btn-outline-success" onclick="filterRecs('conservative', this)">
                                <i class="fas fa-shield-alt me-1"></i>–ö–æ–Ω—Å–µ—Ä–≤.
                            </button>
                            <button class="btn btn-outline-warning" onclick="filterRecs('balanced', this)">
                                <i class="fas fa-balance-scale me-1"></i>–°–±–∞–ª–∞–Ω—Å.
                            </button>
                            <button class="btn btn-outline-danger" onclick="filterRecs('aggressive', this)">
                                <i class="fas fa-rocket me-1"></i>–ê–≥—Ä–µ—Å—Å–∏–≤.
                            </button>
                            <button class="btn btn-outline-primary active" onclick="filterRecs('all', this)">
                                <i class="fas fa-list me-1"></i>–í—Å–µ
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ -->
        <div class="row mb-4" id="recommendations-section">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5>üí° –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h5>
                    </div>
                    <div class="card-body">
                        <div id="recommendations-content">
                            <div class="text-center py-3">
                                <div class="spinner-border text-primary" role="status"></div>
                                <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        <div class="row mb-4" id="detailed-stats-section">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5>üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞</h5>
                    </div>
                    <div class="card-body">
                        <div id="detailed-stats-content">
                            <div class="text-center py-3">
                                <div class="spinner-border text-primary" role="status"></div>
                                <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5>üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å</h5>
                    </div>
                    <div class="card-body">
                        <div id="risk-return-plot" style="height: 700px;">
                            <div class="text-center py-5">
                                <div class="spinner-border text-primary" role="status"></div>
                                <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –°–µ–∫—Ç–æ—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5>üè¢ –°–µ–∫—Ç–æ—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</h5>
                    </div>
                    <div class="card-body">
                        <div id="sector-analysis-plot" style="height: 700px;">
                            <div class="text-center py-5">
                                <div class="spinner-border text-primary" role="status"></div>
                                <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ç–æ—Ä–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5>üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¢–û–ü-15 ETF</h5>
                    </div>
                    <div class="card-body">
                        <div id="correlation-matrix-plot" style="height: 700px;">
                            <div class="text-center py-5">
                                <div class="spinner-border text-primary" role="status"></div>
                                <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5>üìä –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: –ª–∏–¥–µ—Ä—ã vs –∞—É—Ç—Å–∞–π–¥–µ—Ä—ã</h5>
                    </div>
                    <div class="card-body">
                        <div id="performance-analysis-plot" style="height: 700px;">
                            <div class="text-center py-5">
                                <div class="spinner-border text-primary" role="status"></div>
                                <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –ü–æ—Ç–æ–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∞ -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-exchange-alt me-2"></i>–ü–æ—Ç–æ–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º</h5>
                    </div>
                    <div class="card-body">
                        <div id="capital-flows-plot" style="height: 600px;">
                            <div class="text-center py-5">
                                <div class="spinner-border text-primary" role="status"></div>
                                <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–æ–∫–æ–≤...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –†—ã–Ω–æ—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-tachometer-alt me-2"></i>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <div id="market-sentiment-plot" style="height: 500px;">
                                    <div class="text-center py-5">
                                        <div class="spinner-border text-primary" role="status"></div>
                                        <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π...</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div id="flow-insights">
                                    <div class="text-center py-5">
                                        <div class="spinner-border text-primary" role="status"></div>
                                        <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å–∞–π—Ç–æ–≤...</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –ú–æ–º–µ–Ω—Ç—É–º —Å–µ–∫—Ç–æ—Ä–æ–≤ -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-rocket me-2"></i>–ê–Ω–∞–ª–∏–∑ –º–æ–º–µ–Ω—Ç—É–º–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤</h5>
                    </div>
                    <div class="card-body">
                        <div id="sector-momentum-plot" style="height: 600px;">
                            <div class="text-center py-5">
                                <div class="spinner-border text-primary" role="status"></div>
                                <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–º–µ–Ω—Ç—É–º–∞...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –ü–µ—Ä–µ—Ç–æ–∫–∏ –º–µ–∂–¥—É —Ñ–æ–Ω–¥–∞–º–∏ -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-arrows-alt-h me-2"></i>–ü–µ—Ä–µ—Ç–æ–∫–∏ –º–µ–∂–¥—É —Ñ–æ–Ω–¥–∞–º–∏</h5>
                    </div>
                    <div class="card-body">
                        <div id="fund-flows-plot" style="height: 700px;">
                            <div class="text-center py-5">
                                <div class="spinner-border text-primary" role="status"></div>
                                <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ—Ç–æ–∫–æ–≤ —Ñ–æ–Ω–¥–æ–≤...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –†–æ—Ç–∞—Ü–∏—è —Å–µ–∫—Ç–æ—Ä–æ–≤ -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-sync-alt me-2"></i>–†–æ—Ç–∞—Ü–∏—è —Å–µ–∫—Ç–æ—Ä–æ–≤ (–ø—Ä–∏—Ç–æ–∫/–æ—Ç—Ç–æ–∫ —Ñ–æ–Ω–¥–æ–≤)</h5>
                    </div>
                    <div class="card-body">
                        <div id="sector-rotation-plot" style="height: 600px;">
                            <div class="text-center py-5">
                                <div class="spinner-border text-primary" role="status"></div>
                                <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Å–µ–∫—Ç–æ—Ä–æ–≤...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã —Ñ–æ–Ω–¥–æ–≤ -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-layer-group me-2"></i>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–æ–Ω–¥–æ–≤ –ø–æ —Å–æ—Å—Ç–∞–≤–∞–º</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <div id="detailed-compositions-plot" style="height: 600px;">
                                    <div class="text-center py-5">
                                        <div class="spinner-border text-primary" role="status"></div>
                                        <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤–æ–≤...</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div id="composition-stats">
                                    <div class="text-center py-5">
                                        <div class="spinner-border text-primary" role="status"></div>
                                        <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –¢–∞–±–ª–∏—Ü–∞ -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5>üìã –¢–æ–ø ETF</h5>
                        <div>
                            <input type="text" class="form-control form-control-sm" id="search-input" 
                                   placeholder="–ü–æ–∏—Å–∫..." style="width: 200px;" onkeyup="searchTable()">
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover" id="etf-table">
                                <thead>
                                    <tr>
                                        <th>–¢–∏–∫–µ—Ä</th>
                                        <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                        <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                                        <th>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å</th>
                                        <th>–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å</th>
                                        <th>Sharpe</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td colspan="6" class="text-center py-4">
                                            <div class="spinner-border text-primary" role="status"></div>
                                            <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        function updateTime() {
            const now = new Date();
            document.getElementById('current-time').textContent = now.toLocaleString('ru-RU');
        }
        updateTime();
        setInterval(updateTime, 1000);

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        function toggleChart(type, element) {
            // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ –≥—Ä—É–ø–ø–µ
            const buttons = element.parentElement.querySelectorAll('.btn');
            buttons.forEach(btn => btn.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º active –∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
            element.classList.add('active');
            
            showAlert(`–ì—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ ${type} —Ä–µ–∂–∏–º`, 'info');
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            loadChart();
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        function filterRecs(type, element) {
            // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ –≥—Ä—É–ø–ø–µ
            const buttons = element.parentElement.querySelectorAll('.btn');
            buttons.forEach(btn => btn.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º active –∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
            element.classList.add('active');
            
            const typeNames = {
                'conservative': '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ',
                'balanced': '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ',
                'aggressive': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ',
                'all': '–í—Å–µ'
            };
            
            showAlert(`–ü–æ–∫–∞–∑–∞–Ω—ã ${typeNames[type]} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏`, 'info');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            loadRecommendations(type);
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        function showAlert(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type === 'success' ? 'success' : 'info'} alert-dismissible fade show position-fixed`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 300px;';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(alertDiv);
            
            setTimeout(() => {
                if (alertDiv.parentElement) {
                    alertDiv.remove();
                }
            }, 5000);
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        function refreshData() {
            showAlert('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...', 'info');
            loadStats();
            loadChart();
            loadTable();
        }

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        function forceLoadCharts() {
            console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤...');
            showAlert('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤...', 'info');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            const riskContainer = document.getElementById('risk-return-plot');
            const sectorContainer = document.getElementById('sector-analysis-plot');
            
            console.log('–†–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:');
            console.log(`risk-return-plot: ${riskContainer.offsetWidth}x${riskContainer.offsetHeight}`);
            console.log(`sector-analysis-plot: ${sectorContainer.offsetWidth}x${sectorContainer.offsetHeight}`);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            riskContainer.style.minHeight = '500px';
            sectorContainer.style.minHeight = '500px';
            
            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            riskContainer.innerHTML = '<div class="text-center py-3"><div class="spinner-border text-primary"></div><p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';
            sectorContainer.innerHTML = '<div class="text-center py-3"><div class="spinner-border text-primary"></div><p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>';
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
            setTimeout(() => {
                loadChart();
                loadPlotlyChart('/api/sector-analysis', 'sector-analysis-plot');
            }, 500);
        }

        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
        async function testAPI() {
            console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints...');
            
            const endpoints = [
                '/api/stats',
                '/api/chart', 
                '/api/sector-analysis',
                '/api/table'
            ];
            
            let results = [];
            
            for (const endpoint of endpoints) {
                try {
                    const response = await fetch(endpoint);
                    const data = await response.json();
                    
                    if (response.ok) {
                        if (data.error) {
                            results.push(`‚ùå ${endpoint}: ${data.error}`);
                        } else {
                            results.push(`‚úÖ ${endpoint}: OK`);
                        }
                    } else {
                        results.push(`‚ùå ${endpoint}: HTTP ${response.status}`);
                    }
                } catch (error) {
                    results.push(`‚ùå ${endpoint}: ${error.message}`);
                }
            }
            
            alert('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:\\n\\n' + results.join('\\n'));
            console.log('API —Ç–µ—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', results);
        }

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        function showCharts() {
            console.log('üëÅÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤...');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            const riskPlot = document.getElementById('risk-return-plot');
            const sectorPlot = document.getElementById('sector-analysis-plot');
            
            if (riskPlot) {
                riskPlot.style.height = '500px';
                riskPlot.style.width = '100%';
                riskPlot.style.display = 'block';
            }
            
            if (sectorPlot) {
                sectorPlot.style.height = '500px';
                sectorPlot.style.width = '100%';
                sectorPlot.style.display = 'block';
            }
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            setTimeout(() => {
                loadChart();
                loadPlotlyChart('/api/sector-analysis', 'sector-analysis-plot');
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö Plotly –≥—Ä–∞—Ñ–∏–∫–æ–≤
                setTimeout(() => {
                    Plotly.Plots.resize('risk-return-plot');
                    Plotly.Plots.resize('sector-analysis-plot');
                    console.log('–†–∞–∑–º–µ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                }, 1000);
            }, 100);
            
            showAlert('–ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
        }

        // –û—Ç–ª–∞–¥–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        function debugCharts() {
            console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...');
            
            const containers = ['risk-return-plot', 'sector-analysis-plot'];
            let debug = [];
            
            containers.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    const rect = element.getBoundingClientRect();
                    const plotlyDiv = element._fullLayout ? 'Plotly –≥—Ä–∞—Ñ–∏–∫ –Ω–∞–π–¥–µ–Ω' : 'Plotly –≥—Ä–∞—Ñ–∏–∫ –ù–ï –Ω–∞–π–¥–µ–Ω';
                    
                    debug.push(`${id}:`);
                    debug.push(`  –†–∞–∑–º–µ—Ä: ${rect.width}x${rect.height}`);
                    debug.push(`  –í–∏–¥–∏–º–æ—Å—Ç—å: ${element.style.display || 'default'}`);
                    debug.push(`  Plotly: ${plotlyDiv}`);
                    debug.push(`  HTML: ${element.innerHTML.substring(0, 100)}...`);
                    debug.push('');
                } else {
                    debug.push(`${id}: –≠–õ–ï–ú–ï–ù–¢ –ù–ï –ù–ê–ô–î–ï–ù`);
                }
            });
            
            alert('–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\\n\\n' + debug.join('\\n'));
            console.log('–û—Ç–ª–∞–¥–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤:', debug);
        }

        // –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        function searchTable() {
            const input = document.getElementById('search-input');
            const filter = input.value.toLowerCase();
            const table = document.getElementById('etf-table');
            const rows = table.getElementsByTagName('tr');

            for (let i = 1; i < rows.length; i++) {
                const cells = rows[i].getElementsByTagName('td');
                let found = false;
                
                for (let j = 0; j < cells.length; j++) {
                    if (cells[j].textContent.toLowerCase().includes(filter)) {
                        found = true;
                        break;
                    }
                }
                
                rows[i].style.display = found ? '' : 'none';
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        async function loadStats() {
            try {
                const response = await fetch('/api/stats');
                const data = await response.json();
                
                const statsHtml = `
                    <div class="col-md-3">
                        <div class="card stat-card">
                            <div class="card-body text-center">
                                <div class="stat-number">${data.total}</div>
                                <div>–í—Å–µ–≥–æ ETF</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card stat-card">
                            <div class="card-body text-center">
                                <div class="stat-number">${data.avg_return}%</div>
                                <div>–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card stat-card">
                            <div class="card-body text-center">
                                <div class="stat-number">${data.avg_volatility}%</div>
                                <div>–°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card stat-card">
                            <div class="card-body text-center">
                                <div class="stat-number">${data.best_etf}</div>
                                <div>–õ—É—á—à–∏–π ETF</div>
                            </div>
                        </div>
                    </div>
                `;
                
                document.getElementById('stats-section').innerHTML = statsHtml;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
                document.getElementById('stats-section').innerHTML = 
                    '<div class="col-12"><div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div></div>';
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        async function loadChart() {
            console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å...');
            
            try {
                const response = await fetch('/api/chart');
                console.log('–û—Ç–≤–µ—Ç API chart:', response.status);
                
                const data = await response.json();
                console.log('–î–∞–Ω–Ω—ã–µ chart –ø–æ–ª—É—á–µ–Ω—ã:', typeof data, data);
                
                if (data.error) {
                    console.error('API –æ—à–∏–±–∫–∞ chart:', data.error);
                    document.getElementById('risk-return-plot').innerHTML = 
                        `<div class="alert alert-danger">–û—à–∏–±–∫–∞: ${data.error}</div>`;
                    return;
                }
                
                if (data.data && data.layout) {
                    console.log('–°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å');
                    Plotly.newPlot('risk-return-plot', data.data, data.layout, {responsive: true});
                    console.log('–ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
                    
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —á–µ—Ä–µ–∑ 100–º—Å
                    setTimeout(() => {
                        Plotly.Plots.resize('risk-return-plot');
                        console.log('–†–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω');
                    }, 100);
                } else {
                    console.error('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö chart:', data);
                    document.getElementById('risk-return-plot').innerHTML = 
                        '<div class="alert alert-warning">–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
                }
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', error);
                document.getElementById('risk-return-plot').innerHTML = 
                    `<div class="alert alert-danger">–û—à–∏–±–∫–∞: ${error.message}</div>`;
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        async function loadTable() {
            try {
                const response = await fetch('/api/table');
                const data = await response.json();
                
                const tbody = document.querySelector('#etf-table tbody');
                tbody.innerHTML = '';
                
                data.forEach(etf => {
                    const returnClass = etf.annual_return > 15 ? 'positive' : etf.annual_return < 0 ? 'negative' : '';
                    const row = `
                        <tr>
                            <td><strong>${etf.ticker}</strong></td>
                            <td>${etf.name || etf.short_name || 'N/A'}</td>
                            <td><span class="badge bg-secondary">${etf.category}</span></td>
                            <td class="${returnClass}">${etf.annual_return.toFixed(1)}%</td>
                            <td>${etf.volatility.toFixed(1)}%</td>
                            <td>${etf.sharpe_ratio.toFixed(2)}</td>
                        </tr>
                    `;
                    tbody.innerHTML += row;
                });
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
                document.querySelector('#etf-table tbody').innerHTML = 
                    '<tr><td colspan="6" class="text-center text-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</td></tr>';
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        async function loadDetailedStats() {
            try {
                const response = await fetch('/api/detailed-stats');
                const data = await response.json();
                
                const content = document.getElementById('detailed-stats-content');
                
                const html = `
                    <div class="row">
                        <div class="col-md-3">
                            <div class="card bg-primary text-white">
                                <div class="card-body text-center">
                                    <h4>${data.overview.total_etfs}</h4>
                                    <p class="mb-0">–í—Å–µ–≥–æ ETF</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-success text-white">
                                <div class="card-body text-center">
                                    <h4>${data.overview.avg_return}%</h4>
                                    <p class="mb-0">–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-warning text-white">
                                <div class="card-body text-center">
                                    <h4>${data.overview.avg_volatility}%</h4>
                                    <p class="mb-0">–°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-info text-white">
                                <div class="card-body text-center">
                                    <h4>${data.overview.avg_sharpe}</h4>
                                    <p class="mb-0">–°—Ä–µ–¥–Ω–∏–π Sharpe</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mt-4">
                        <div class="col-md-6">
                            <h6>üèÜ –õ–∏–¥–µ—Ä—ã —Ä—ã–Ω–∫–∞</h6>
                            <ul class="list-group">
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>–õ—É—á—à–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</span>
                                    <strong class="text-success">${data.top_performers.best_return.ticker} (${data.top_performers.best_return.value}%)</strong>
                                </li>
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>–õ—É—á—à–∏–π Sharpe:</span>
                                    <strong class="text-primary">${data.top_performers.best_sharpe.ticker} (${data.top_performers.best_sharpe.value})</strong>
                                </li>
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>–ù–∞–∏–º–µ–Ω—å—à–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:</span>
                                    <strong class="text-info">${data.top_performers.lowest_volatility.ticker} (${data.top_performers.lowest_volatility.value}%)</strong>
                                </li>
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>–ù–∞–∏–±–æ–ª—å—à–∏–π –æ–±—ä–µ–º:</span>
                                    <strong class="text-warning">${data.top_performers.highest_volume.ticker}</strong>
                                </li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</h6>
                            <div class="progress mb-2">
                                <div class="progress-bar bg-danger" style="width: ${(data.distribution.return_ranges.negative / data.overview.total_etfs * 100).toFixed(1)}%">
                                    –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è (${data.distribution.return_ranges.negative})
                                </div>
                            </div>
                            <div class="progress mb-2">
                                <div class="progress-bar bg-warning" style="width: ${(data.distribution.return_ranges.low_0_10 / data.overview.total_etfs * 100).toFixed(1)}%">
                                    0-10% (${data.distribution.return_ranges.low_0_10})
                                </div>
                            </div>
                            <div class="progress mb-2">
                                <div class="progress-bar bg-info" style="width: ${(data.distribution.return_ranges.medium_10_20 / data.overview.total_etfs * 100).toFixed(1)}%">
                                    10-20% (${data.distribution.return_ranges.medium_10_20})
                                </div>
                            </div>
                            <div class="progress mb-2">
                                <div class="progress-bar bg-success" style="width: ${(data.distribution.return_ranges.high_20_plus / data.overview.total_etfs * 100).toFixed(1)}%">
                                    20%+ (${data.distribution.return_ranges.high_20_plus})
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                content.innerHTML = html;
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
                document.getElementById('detailed-stats-content').innerHTML = 
                    '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>';
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ Plotly
        async function loadPlotlyChart(endpoint, elementId) {
            console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫: ${endpoint} -> ${elementId}`);
            
            try {
                const response = await fetch(endpoint);
                console.log(`–û—Ç–≤–µ—Ç API ${endpoint}: ${response.status}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const data = await response.json();
                console.log(`–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è ${elementId}:`, typeof data);
                
                if (data.error) {
                    console.error(`API –æ—à–∏–±–∫–∞ –¥–ª—è ${elementId}:`, data.error);
                    document.getElementById(elementId).innerHTML = 
                        `<div class="alert alert-warning">–û—à–∏–±–∫–∞: ${data.error}</div>`;
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                if (data.data && data.layout) {
                    console.log(`–°–æ–∑–¥–∞–µ–º Plotly –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è ${elementId}`);
                    Plotly.newPlot(elementId, data.data, data.layout, {responsive: true});
                    console.log(`–ì—Ä–∞—Ñ–∏–∫ ${elementId} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
                    
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —á–µ—Ä–µ–∑ 100–º—Å
                    setTimeout(() => {
                        Plotly.Plots.resize(elementId);
                        console.log(`–†–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ ${elementId} –æ–±–Ω–æ–≤–ª–µ–Ω`);
                    }, 100);
                } else {
                    console.error(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${elementId}:`, data);
                    document.getElementById(elementId).innerHTML = 
                        `<div class="alert alert-warning">–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö</div>`;
                }
                
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞ ${elementId}:`, error);
                document.getElementById(elementId).innerHTML = 
                    `<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</div>`;
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        async function loadRecommendations(filter = 'all') {
            try {
                const response = await fetch('/api/recommendations');
                const data = await response.json();
                
                const content = document.getElementById('recommendations-content');
                let html = '<div class="row">';
                
                for (const [key, rec] of Object.entries(data)) {
                    if (filter !== 'all' && key !== filter) continue;
                    
                    html += `
                        <div class="col-md-4 mb-3">
                            <div class="card border-primary">
                                <div class="card-header bg-primary text-white">
                                    <h6 class="mb-0">${rec.title}</h6>
                                </div>
                                <div class="card-body">
                                    <p class="small">${rec.description}</p>
                                    <div class="table-responsive">
                                        <table class="table table-sm">
                                            <thead>
                                                <tr>
                                                    <th>–¢–∏–∫–µ—Ä</th>
                                                    <th>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å</th>
                                                    <th>Sharpe</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                    `;
                    
                    rec.etfs.slice(0, 3).forEach(etf => {
                        const returnClass = etf.annual_return > 15 ? 'text-success' : 'text-danger';
                        html += `
                            <tr>
                                <td><strong>${etf.ticker}</strong></td>
                                <td class="${returnClass}">${etf.annual_return.toFixed(1)}%</td>
                                <td>${etf.sharpe_ratio.toFixed(2)}</td>
                            </tr>
                        `;
                    });
                    
                    html += `
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                }
                
                html += '</div>';
                content.innerHTML = html;
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
                document.getElementById('recommendations-content').innerHTML = 
                    '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</div>';
            }
        }

        // –ü—Ä–æ—Å—Ç–∞—è —Ä–∞–±–æ—á–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞...');
            
            // –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π
            setTimeout(() => {
                // –ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                fetch('/api/chart')
                  .then(response => response.json())
                  .then(data => {
                    if (data.data && data.layout) {
                      // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç —Å–ø–∏–Ω–Ω–µ—Ä–∞
                      document.getElementById('risk-return-plot').innerHTML = '';
                      Plotly.newPlot('risk-return-plot', data.data, data.layout, {responsive: true});
                      console.log('‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω');
                    }
                  })
                  .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', error);
                    document.getElementById('risk-return-plot').innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞</div>';
                  });
                
                // –°–µ–∫—Ç–æ—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                fetch('/api/sector-analysis')
                  .then(response => response.json())
                  .then(data => {
                    if (data.data && data.layout) {
                      // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç —Å–ø–∏–Ω–Ω–µ—Ä–∞
                      document.getElementById('sector-analysis-plot').innerHTML = '';
                      Plotly.newPlot('sector-analysis-plot', data.data, data.layout, {responsive: true});
                      console.log('‚úÖ –°–µ–∫—Ç–æ—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω');
                    }
                  })
                  .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ç–æ—Ä–∞:', error);
                    document.getElementById('sector-analysis-plot').innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏–∑–∞</div>';
                  });
                
                // –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
                fetch('/api/correlation-matrix')
                  .then(response => response.json())
                  .then(data => {
                    if (data.data && data.layout) {
                      Plotly.newPlot('correlation-matrix-plot', data.data, data.layout, {responsive: true});
                      console.log('‚úÖ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                    }
                  })
                  .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:', error);
                    document.getElementById('correlation-matrix-plot').innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã</div>';
                  });
                
                // –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                fetch('/api/performance-analysis')
                  .then(response => response.json())
                  .then(data => {
                    if (data.data && data.layout) {
                      Plotly.newPlot('performance-analysis-plot', data.data, data.layout, {responsive: true});
                      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω');
                    }
                  })
                  .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏–∑–∞:', error);
                    document.getElementById('performance-analysis-plot').innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</div>';
                  });
                
                // –ü–æ—Ç–æ–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∞
                fetch('/api/capital-flows')
                  .then(response => response.json())
                  .then(data => {
                    if (data.data && data.layout) {
                      document.getElementById('capital-flows-plot').innerHTML = '';
                      Plotly.newPlot('capital-flows-plot', data.data, data.layout, {responsive: true});
                      console.log('‚úÖ –ü–æ—Ç–æ–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                    }
                  })
                  .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ç–æ–∫–æ–≤:', error);
                    document.getElementById('capital-flows-plot').innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ç–æ–∫–æ–≤ –∫–∞–ø–∏—Ç–∞–ª–∞</div>';
                  });
                
                // –†—ã–Ω–æ—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                fetch('/api/market-sentiment')
                  .then(response => response.json())
                  .then(data => {
                    if (data.data && data.layout) {
                      document.getElementById('market-sentiment-plot').innerHTML = '';
                      Plotly.newPlot('market-sentiment-plot', data.data, data.layout, {responsive: true});
                      console.log('‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                    }
                  })
                  .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π:', error);
                    document.getElementById('market-sentiment-plot').innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π</div>';
                  });
                
                // –ú–æ–º–µ–Ω—Ç—É–º —Å–µ–∫—Ç–æ—Ä–æ–≤
                fetch('/api/sector-momentum')
                  .then(response => response.json())
                  .then(data => {
                    if (data.data && data.layout) {
                      document.getElementById('sector-momentum-plot').innerHTML = '';
                      Plotly.newPlot('sector-momentum-plot', data.data, data.layout, {responsive: true});
                      console.log('‚úÖ –ú–æ–º–µ–Ω—Ç—É–º —Å–µ–∫—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω');
                    }
                  })
                  .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–º–µ–Ω—Ç—É–º–∞:', error);
                    document.getElementById('sector-momentum-plot').innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–º–µ–Ω—Ç—É–º–∞</div>';
                  });
                
                // –ü–µ—Ä–µ—Ç–æ–∫–∏ –º–µ–∂–¥—É —Ñ–æ–Ω–¥–∞–º–∏
                fetch('/api/fund-flows')
                  .then(response => response.json())
                  .then(data => {
                    if (data.data && data.layout) {
                      document.getElementById('fund-flows-plot').innerHTML = '';
                      Plotly.newPlot('fund-flows-plot', data.data, data.layout, {responsive: true});
                      console.log('‚úÖ –ü–µ—Ä–µ—Ç–æ–∫–∏ –º–µ–∂–¥—É —Ñ–æ–Ω–¥–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                    }
                  })
                  .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ—Ç–æ–∫–æ–≤ —Ñ–æ–Ω–¥–æ–≤:', error);
                    document.getElementById('fund-flows-plot').innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ—Ç–æ–∫–æ–≤ —Ñ–æ–Ω–¥–æ–≤</div>';
                  });
                
                // –†–æ—Ç–∞—Ü–∏—è —Å–µ–∫—Ç–æ—Ä–æ–≤
                fetch('/api/sector-rotation')
                  .then(response => response.json())
                  .then(data => {
                    if (data.data && data.layout) {
                      document.getElementById('sector-rotation-plot').innerHTML = '';
                      Plotly.newPlot('sector-rotation-plot', data.data, data.layout, {responsive: true});
                      console.log('‚úÖ –†–æ—Ç–∞—Ü–∏—è —Å–µ–∫—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                    }
                  })
                  .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏:', error);
                    document.getElementById('sector-rotation-plot').innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏</div>';
                  });
                
                // –ò–Ω—Å–∞–π—Ç—ã –ø–æ –ø–æ—Ç–æ–∫–∞–º
                fetch('/api/flow-insights')
                  .then(response => response.json())
                  .then(data => {
                    if (data.insights) {
                      const insights = data.insights;
                      const anomalies = data.anomalies || [];
                      
                      let html = `
                        <div class="mb-3">
                          <h6>üéØ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞</h6>
                          <div class="badge bg-${insights.market_sentiment.sentiment === 'Risk-On' ? 'success' : insights.market_sentiment.sentiment === 'Risk-Off' ? 'danger' : 'secondary'} mb-2">
                            ${insights.market_sentiment.sentiment} (${insights.market_sentiment.confidence}%)
                          </div>
                        </div>
                        
                        <div class="mb-3">
                          <h6>üìä –õ–∏–¥–µ—Ä—ã –ø–æ –æ–±—ä–µ–º—É</h6>
                          <ul class="list-unstyled">
                            ${insights.top_volume_sectors.map(sector => `<li><i class="fas fa-arrow-up text-success"></i> ${sector}</li>`).join('')}
                          </ul>
                        </div>
                        
                        <div class="mb-3">
                          <h6>‚ö° –õ–∏–¥–µ—Ä—ã –ø–æ –º–æ–º–µ–Ω—Ç—É–º—É</h6>
                          <ul class="list-unstyled">
                            ${insights.momentum_leaders.map(sector => `<li><i class="fas fa-rocket text-primary"></i> ${sector}</li>`).join('')}
                          </ul>
                        </div>
                      `;
                      
                      if (anomalies.length > 0) {
                        html += `
                          <div class="mb-3">
                            <h6>‚ö†Ô∏è –ê–Ω–æ–º–∞–ª–∏–∏ (${insights.critical_anomalies})</h6>
                            <ul class="list-unstyled">
                              ${anomalies.slice(0, 3).map(anomaly => `
                                <li class="small">
                                  <span class="badge bg-${anomaly.severity === '–í—ã—Å–æ–∫–∞—è' ? 'danger' : 'warning'}">${anomaly.type}</span>
                                  ${anomaly.sector}
                                </li>
                              `).join('')}
                            </ul>
                          </div>
                        `;
                      }
                      
                      document.getElementById('flow-insights').innerHTML = html;
                      console.log('‚úÖ –ò–Ω—Å–∞–π—Ç—ã –ø–æ –ø–æ—Ç–æ–∫–∞–º –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                    }
                  })
                  .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å–∞–π—Ç–æ–≤:', error);
                    document.getElementById('flow-insights').innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å–∞–π—Ç–æ–≤</div>';
                  });
                
                // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã —Ñ–æ–Ω–¥–æ–≤
                fetch('/api/detailed-compositions')
                  .then(response => response.json())
                  .then(data => {
                    if (data.data && data.layout) {
                      document.getElementById('detailed-compositions-plot').innerHTML = '';
                      Plotly.newPlot('detailed-compositions-plot', data.data, data.layout, {responsive: true});
                      console.log('‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                      
                      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—Ä—ã—Ç–∏—è
                      if (data.analysis && data.analysis.coverage_stats) {
                        const stats = data.analysis.coverage_stats;
                        const styleFlows = data.analysis.style_flows;
                        const riskFlows = data.analysis.risk_flows;
                        
                        let statsHtml = `
                          <div class="mb-3">
                            <h6>üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h6>
                            <div class="progress mb-2">
                              <div class="progress-bar bg-success" style="width: ${stats.coverage_percent}%"></div>
                            </div>
                            <small class="text-muted">
                              ${stats.detailed_funds} –∏–∑ ${stats.total_funds} —Ñ–æ–Ω–¥–æ–≤ (${stats.coverage_percent}%)
                            </small>
                          </div>
                          
                          <div class="mb-3">
                            <h6>üéØ –ü–æ —Å—Ç–∏–ª—é –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h6>
                            <ul class="list-unstyled">
                        `;
                        
                        Object.entries(styleFlows).forEach(([style, data]) => {
                          if (style !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
                            statsHtml += `<li><small><strong>${style}:</strong> ${data.ticker} —Ñ–æ–Ω–¥–æ–≤ (${data.annual_return.toFixed(1)}%)</small></li>`;
                          }
                        });
                        
                        statsHtml += `
                            </ul>
                          </div>
                          
                          <div class="mb-3">
                            <h6>‚ö†Ô∏è –ü–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞</h6>
                            <ul class="list-unstyled">
                        `;
                        
                        Object.entries(riskFlows).forEach(([risk, data]) => {
                          if (risk !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
                            const badgeClass = risk === '–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π' ? 'success' : 
                                             risk === '–ù–∏–∑–∫–∏–π' ? 'info' :
                                             risk === '–°—Ä–µ–¥–Ω–∏–π' ? 'warning' : 'danger';
                            statsHtml += `<li><small><span class="badge bg-${badgeClass}">${risk}</span> ${data.ticker} —Ñ–æ–Ω–¥–æ–≤</small></li>`;
                          }
                        });
                        
                        statsHtml += '</ul></div>';
                        
                        document.getElementById('composition-stats').innerHTML = statsHtml;
                      }
                    }
                  })
                  .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–∞–≤–æ–≤:', error);
                    document.getElementById('detailed-compositions-plot').innerHTML = '<div class="alert alert-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–∞–≤–æ–≤</div>';
                  });
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                if (typeof loadStats === 'function') loadStats();
                if (typeof loadTable === 'function') loadTable();
                if (typeof loadRecommendations === 'function') loadRecommendations();
                if (typeof loadDetailedStats === 'function') loadDetailedStats();
                
            }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤

        });
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    from flask import Response
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π HTML —à–∞–±–ª–æ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    html = HTML_TEMPLATE
    response = Response(html, mimetype='text/html; charset=utf-8')
    response.headers['Content-Type'] = 'text/html; charset=utf-8'
    response.headers['Cache-Control'] = 'no-cache'
    return response

@app.route('/api/stats')
def api_stats():
    """API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if etf_data is None:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'})
    
    try:
        stats = {
            'total': len(etf_data),
            'avg_return': round(etf_data['annual_return'].mean(), 1),
            'avg_volatility': round(etf_data['volatility'].mean(), 1),
            'best_etf': etf_data.loc[etf_data['annual_return'].idxmax(), 'ticker']
        }
        return jsonify(stats)
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/chart')
def api_chart():
    """API –≥—Ä–∞—Ñ–∏–∫–∞"""
    if etf_data is None or len(etf_data) == 0:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'})
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π scatter plot
        fig_data = [{
            'x': etf_data['volatility'].fillna(0).tolist(),
            'y': etf_data['annual_return'].fillna(0).tolist(),
            'text': etf_data['ticker'].tolist(),
            'mode': 'markers',
            'type': 'scatter',
            'marker': {
                'size': 8,
                'color': etf_data['annual_return'].fillna(0).tolist(),
                'colorscale': 'RdYlGn',
                'showscale': True
            }
        }]
        
        layout = {
            'title': '–†–∏—Å–∫ vs –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
            'xaxis': {'title': '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)'},
            'yaxis': {'title': '–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)'},
            'hovermode': 'closest'
        }
        
        return jsonify({'data': fig_data, 'layout': layout})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ api_chart: {e}")
        return jsonify({'error': str(e)})

@app.route('/api/table')
def api_table():
    """API —Ç–∞–±–ª–∏—Ü—ã"""
    if etf_data is None:
        return jsonify([])
    
    try:
        # –¢–æ–ø-20 ETF –ø–æ –æ–±—ä–µ–º—É
        top_etfs = etf_data.nlargest(20, 'avg_daily_volume')
        
        columns = ['ticker', 'name', 'short_name', 'category', 'annual_return', 'volatility', 'sharpe_ratio']
        available_columns = [col for col in columns if col in top_etfs.columns]
        
        return jsonify(top_etfs[available_columns].to_dict('records'))
    except Exception as e:
        return jsonify([])

@app.route('/api/recommendations')
def api_recommendations():
    """API —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    if etf_data is None:
        return jsonify({})
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º sharpe_ratio –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'sharpe_ratio' not in etf_data.columns:
            etf_data['sharpe_ratio'] = (etf_data['annual_return'] - 15) / etf_data['volatility']
        
        recommendations = {
            'conservative': {
                'title': '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
                'description': '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫, —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
                'etfs': etf_data[(etf_data['volatility'] < 15) & (etf_data['sharpe_ratio'] > 0.5)]
                       .nlargest(5, 'sharpe_ratio')[['ticker', 'annual_return', 'volatility', 'sharpe_ratio']]
                       .to_dict('records')
            },
            'balanced': {
                'title': '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
                'description': '–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫, —É–º–µ—Ä–µ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
                'etfs': etf_data[(etf_data['volatility'] >= 15) & (etf_data['volatility'] <= 25) & (etf_data['sharpe_ratio'] > 0.3)]
                       .nlargest(5, 'sharpe_ratio')[['ticker', 'annual_return', 'volatility', 'sharpe_ratio']]
                       .to_dict('records')
            },
            'aggressive': {
                'title': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
                'description': '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫, –≤—ã—Å–æ–∫–∞—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
                'etfs': etf_data[etf_data['annual_return'] > 20]
                       .nlargest(5, 'annual_return')[['ticker', 'annual_return', 'volatility', 'sharpe_ratio']]
                       .to_dict('records')
            }
        }
        
        return jsonify(recommendations)
    except Exception as e:
        return jsonify({})

@app.route('/api/sector-analysis')
def api_sector_analysis():
    """API —Å–µ–∫—Ç–æ—Ä–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    if etf_data is None or len(etf_data) == 0:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'})
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Å–µ–∫—Ç–æ—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        sector_stats = etf_data.groupby('category').agg({
            'annual_return': 'mean',
            'volatility': 'mean',
            'ticker': 'count'
        }).round(2)
        
        categories = sector_stats.index.tolist()
        
        # –ü—Ä–æ—Å—Ç–æ–π bar chart
        fig_data = [{
            'x': categories,
            'y': sector_stats['annual_return'].tolist(),
            'type': 'bar',
            'name': '–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)',
            'marker': {'color': 'lightgreen'}
        }]
        
        layout = {
            'title': 'üè¢ –°–µ–∫—Ç–æ—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ETF',
            'xaxis': {'title': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'},
            'yaxis': {'title': '–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)'},
            'height': 500
        }
        
        return jsonify({'data': fig_data, 'layout': layout})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ api_sector_analysis: {e}")
        return jsonify({'error': str(e)})

@app.route('/api/correlation-matrix')
def api_correlation_matrix():
    """API –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã"""
    if etf_data is None:
        return jsonify({})
    
    try:
        # –ë–µ—Ä–µ–º —Ç–æ–ø-15 ETF –ø–æ –æ–±—ä–µ–º—É
        top_etfs = etf_data.nlargest(15, 'avg_daily_volume')
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        import numpy as np
        
        tickers = top_etfs['ticker'].tolist()
        n = len(tickers)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
        correlation_matrix = np.eye(n)
        
        for i in range(n):
            for j in range(i+1, n):
                # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                cat_i = top_etfs.iloc[i]['category']
                cat_j = top_etfs.iloc[j]['category']
                vol_i = top_etfs.iloc[i]['volatility']
                vol_j = top_etfs.iloc[j]['volatility']
                
                if cat_i == cat_j:
                    # –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –≤—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
                    base_corr = 0.7
                else:
                    # –†–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –Ω–∏–∑–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
                    base_corr = 0.2
                
                # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                vol_diff = abs(vol_i - vol_j) / max(vol_i, vol_j)
                corr = base_corr * (1 - vol_diff * 0.3) + np.random.normal(0, 0.1)
                corr = max(-0.8, min(0.9, corr))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                
                correlation_matrix[i][j] = corr
                correlation_matrix[j][i] = corr
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –≤ –ø—Ä–æ—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        fig_data = [{
            'z': correlation_matrix.tolist(),
            'x': tickers,
            'y': tickers,
            'type': 'heatmap',
            'colorscale': 'RdBu',
            'zmid': 0,
            'text': np.round(correlation_matrix, 2).tolist(),
            'texttemplate': '%{text}',
            'textfont': {'size': 10},
            'hoverongaps': False
        }]
        
        layout = {
            'title': 'üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¢–û–ü-15 ETF',
            'height': 600,
            'xaxis': {'title': 'ETF'},
            'yaxis': {'title': 'ETF'}
        }
        
        return jsonify({'data': fig_data, 'layout': layout})
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/performance-analysis')
def api_performance_analysis():
    """API –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
    if etf_data is None:
        return jsonify({})
    
    try:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        df_sorted = etf_data.sort_values('annual_return', ascending=True)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø –∏ –∞—É—Ç—Å–∞–π–¥–µ—Ä–æ–≤
        top_performers = df_sorted.tail(10)
        worst_performers = df_sorted.head(10)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–≤—É—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        fig_data = [
            # –¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
            {
                'y': top_performers['ticker'].tolist(),
                'x': top_performers['annual_return'].round(1).tolist(),
                'orientation': 'h',
                'type': 'bar',
                'name': 'üèÜ –õ–∏–¥–µ—Ä—ã',
                'marker': {'color': 'green'},
                'text': top_performers['annual_return'].round(1).tolist(),
                'textposition': 'outside',
                'xaxis': 'x',
                'yaxis': 'y'
            },
            # –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã  
            {
                'y': worst_performers['ticker'].tolist(),
                'x': worst_performers['annual_return'].round(1).tolist(),
                'orientation': 'h',
                'type': 'bar',
                'name': 'üìâ –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã',
                'marker': {'color': 'red'},
                'text': worst_performers['annual_return'].round(1).tolist(),
                'textposition': 'outside',
                'xaxis': 'x2',
                'yaxis': 'y2'
            }
        ]
        
        layout = {
            'title': 'üìä –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: –ª–∏–¥–µ—Ä—ã vs –∞—É—Ç—Å–∞–π–¥–µ—Ä—ã',
            'height': 600,
            'showlegend': True,
            'xaxis': {
                'title': '–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)',
                'domain': [0, 0.45]
            },
            'xaxis2': {
                'title': '–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)',
                'domain': [0.55, 1]
            },
            'yaxis': {
                'title': 'üèÜ –¢–û–ü-10 –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏',
                'domain': [0, 1]
            },
            'yaxis2': {
                'title': 'üìâ –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã',
                'domain': [0, 1],
                'anchor': 'x2'
            }
        }
        
        return jsonify({'data': fig_data, 'layout': layout})
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/detailed-stats')
def api_detailed_stats():
    """API –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if etf_data is None:
        return jsonify({})
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if 'sharpe_ratio' not in etf_data.columns:
            etf_data['sharpe_ratio'] = (etf_data['annual_return'] - 15) / etf_data['volatility']
        
        stats = {
            'overview': {
                'total_etfs': len(etf_data),
                'avg_return': round(etf_data['annual_return'].mean(), 2),
                'median_return': round(etf_data['annual_return'].median(), 2),
                'avg_volatility': round(etf_data['volatility'].mean(), 2),
                'avg_sharpe': round(etf_data['sharpe_ratio'].mean(), 2),
                'total_volume': int(etf_data['avg_daily_volume'].sum()),
                'categories': len(etf_data['category'].unique())
            },
            'top_performers': {
                'best_return': {
                    'ticker': etf_data.loc[etf_data['annual_return'].idxmax(), 'ticker'],
                    'value': round(etf_data['annual_return'].max(), 2)
                },
                'best_sharpe': {
                    'ticker': etf_data.loc[etf_data['sharpe_ratio'].idxmax(), 'ticker'],
                    'value': round(etf_data['sharpe_ratio'].max(), 2)
                },
                'lowest_volatility': {
                    'ticker': etf_data.loc[etf_data['volatility'].idxmin(), 'ticker'],
                    'value': round(etf_data['volatility'].min(), 2)
                },
                'highest_volume': {
                    'ticker': etf_data.loc[etf_data['avg_daily_volume'].idxmax(), 'ticker'],
                    'value': int(etf_data['avg_daily_volume'].max())
                }
            },
            'distribution': {
                'return_ranges': {
                    'negative': len(etf_data[etf_data['annual_return'] < 0]),
                    'low_0_10': len(etf_data[(etf_data['annual_return'] >= 0) & (etf_data['annual_return'] < 10)]),
                    'medium_10_20': len(etf_data[(etf_data['annual_return'] >= 10) & (etf_data['annual_return'] < 20)]),
                    'high_20_plus': len(etf_data[etf_data['annual_return'] >= 20])
                },
                'volatility_ranges': {
                    'low_0_10': len(etf_data[etf_data['volatility'] < 10]),
                    'medium_10_20': len(etf_data[(etf_data['volatility'] >= 10) & (etf_data['volatility'] < 20)]),
                    'high_20_plus': len(etf_data[etf_data['volatility'] >= 20])
                }
            },
            'sector_breakdown': etf_data['category'].value_counts().to_dict()
        }
        
        return jsonify(stats)
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/capital-flows')
def api_capital_flows():
    """API –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ—Ç–æ–∫–æ–≤ –∫–∞–ø–∏—Ç–∞–ª–∞"""
    if etf_data is None:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'})
    
    try:
        analyzer = CapitalFlowAnalyzer(etf_data.copy())
        sector_flows = analyzer.calculate_sector_flows()
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Ç–æ–∫–æ–≤ –∫–∞–ø–∏—Ç–∞–ª–∞
        sectors = sector_flows.index.tolist()
        volumes = sector_flows['volume_share'].tolist()
        returns = sector_flows['avg_return'].tolist()
        
        fig_data = [{
            'x': sectors,
            'y': volumes,
            'type': 'bar',
            'name': '–î–æ–ª—è –æ–±—ä–µ–º–∞ (%)',
            'marker': {'color': 'lightblue'},
            'text': [f"{v}%" for v in volumes],
            'textposition': 'outside'
        }]
        
        layout = {
            'title': 'üí∞ –ü–æ—Ç–æ–∫–∏ –∫–∞–ø–∏—Ç–∞–ª–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º',
            'xaxis': {'title': '–°–µ–∫—Ç–æ—Ä', 'tickangle': -45},
            'yaxis': {'title': '–î–æ–ª—è –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤ (%)'},
            'height': 500,
            'margin': {'b': 120}
        }
        
        return jsonify({'data': fig_data, 'layout': layout})
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/market-sentiment')
def api_market_sentiment():
    """API –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
    if etf_data is None:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'})
    
    try:
        analyzer = CapitalFlowAnalyzer(etf_data.copy())
        sentiment = analyzer.detect_risk_sentiment()
        
        # –°–æ–∑–¥–∞–µ–º gauge chart –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        fig_data = [{
            'type': 'indicator',
            'mode': 'gauge+number+delta',
            'value': sentiment['confidence'],
            'domain': {'x': [0, 1], 'y': [0, 1]},
            'title': {'text': f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {sentiment['sentiment']}"},
            'gauge': {
                'axis': {'range': [None, 100]},
                'bar': {'color': 'darkblue'},
                'steps': [
                    {'range': [0, 30], 'color': 'lightgray'},
                    {'range': [30, 70], 'color': 'gray'},
                    {'range': [70, 100], 'color': 'lightgreen'}
                ],
                'threshold': {
                    'line': {'color': 'red', 'width': 4},
                    'thickness': 0.75,
                    'value': 90
                }
            }
        }]
        
        layout = {
            'title': 'üéØ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π',
            'height': 400
        }
        
        return jsonify({'data': fig_data, 'layout': layout})
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/sector-momentum')
def api_sector_momentum():
    """API –∞–Ω–∞–ª–∏–∑–∞ –º–æ–º–µ–Ω—Ç—É–º–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤"""
    if etf_data is None:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'})
    
    try:
        analyzer = CapitalFlowAnalyzer(etf_data.copy())
        momentum = analyzer.analyze_sector_momentum()
        
        # –°–æ–∑–¥–∞–µ–º scatter plot –º–æ–º–µ–Ω—Ç—É–º–∞
        sectors = momentum.index.tolist()
        momentum_scores = momentum['momentum_score'].tolist()
        returns = momentum['avg_return'].tolist()
        volumes = momentum['volume_share'].tolist()
        
        fig_data = [{
            'x': returns,
            'y': momentum_scores,
            'mode': 'markers+text',
            'type': 'scatter',
            'text': sectors,
            'textposition': 'top center',
            'marker': {
                'size': volumes,
                'sizemode': 'diameter',
                'sizeref': max(volumes) / 50,
                'color': momentum_scores,
                'colorscale': 'Viridis',
                'showscale': True,
                'colorbar': {'title': '–ú–æ–º–µ–Ω—Ç—É–º'}
            },
            'name': '–°–µ–∫—Ç–æ—Ä—ã'
        }]
        
        layout = {
            'title': '‚ö° –ê–Ω–∞–ª–∏–∑ –º–æ–º–µ–Ω—Ç—É–º–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤',
            'xaxis': {'title': '–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)'},
            'yaxis': {'title': '–ò–Ω–¥–µ–∫—Å –º–æ–º–µ–Ω—Ç—É–º–∞'},
            'height': 500
        }
        
        return jsonify({'data': fig_data, 'layout': layout})
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/flow-insights')
def api_flow_insights():
    """API –∏–Ω—Å–∞–π—Ç–æ–≤ –ø–æ –ø–æ—Ç–æ–∫–∞–º –∫–∞–ø–∏—Ç–∞–ª–∞"""
    if etf_data is None:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'})
    
    try:
        analyzer = CapitalFlowAnalyzer(etf_data.copy())
        insights = analyzer.generate_flow_insights()
        anomalies = analyzer.detect_flow_anomalies()
        
        return jsonify({
            'insights': insights,
            'anomalies': anomalies[:5],  # –¢–æ–ø-5 –∞–Ω–æ–º–∞–ª–∏–π
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/fund-flows')
def api_fund_flows():
    """API –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ—Ç–æ–∫–æ–≤ –º–µ–∂–¥—É —Ñ–æ–Ω–¥–∞–º–∏"""
    if etf_data is None:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'})
    
    try:
        analyzer = CapitalFlowAnalyzer(etf_data.copy())
        fund_flows = analyzer.analyze_fund_flows()
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-20 —Ñ–æ–Ω–¥–æ–≤ –ø–æ –æ–±—ä–µ–º—É
        top_funds = fund_flows.head(20)
        
        # –°–æ–∑–¥–∞–µ–º bubble chart –¥–ª—è —Ñ–æ–Ω–¥–æ–≤
        fig_data = [{
            'x': top_funds['annual_return'].tolist(),
            'y': top_funds['flow_score'].tolist(),
            'mode': 'markers+text',
            'type': 'scatter',
            'text': top_funds['ticker'].tolist(),
            'textposition': 'middle center',
            'marker': {
                'size': (top_funds['avg_daily_volume'] / top_funds['avg_daily_volume'].max() * 50).tolist(),
                'color': top_funds['sector'].astype('category').cat.codes.tolist(),
                'colorscale': 'Set3',
                'showscale': True,
                'colorbar': {'title': '–°–µ–∫—Ç–æ—Ä'},
                'line': {'width': 1, 'color': 'black'}
            },
            'hovertemplate': '<b>%{text}</b><br>' +
                           '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: %{x:.1f}%<br>' +
                           'Flow Score: %{y:.1f}<br>' +
                           '<extra></extra>'
        }]
        
        layout = {
            'title': 'üí∏ –ü–µ—Ä–µ—Ç–æ–∫–∏ –º–µ–∂–¥—É —Ñ–æ–Ω–¥–∞–º–∏ (—Ä–∞–∑–º–µ—Ä = –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤)',
            'xaxis': {'title': '–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)'},
            'yaxis': {'title': '–ò–Ω–¥–µ–∫—Å –ø–æ—Ç–æ–∫–∞'},
            'height': 600
        }
        
        return jsonify({'data': fig_data, 'layout': layout})
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/sector-rotation')
def api_sector_rotation():
    """API –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Ç–∞—Ü–∏–∏ —Å–µ–∫—Ç–æ—Ä–æ–≤"""
    if etf_data is None:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'})
    
    try:
        analyzer = CapitalFlowAnalyzer(etf_data.copy())
        rotation = analyzer.detect_sector_rotation()
        
        # –°–æ–∑–¥–∞–µ–º waterfall chart –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
        inflow_sectors = rotation['inflow_sectors']
        outflow_sectors = rotation['outflow_sectors']
        
        sectors = []
        flows = []
        colors = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—Ç–æ–∫–∏ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
        for sector_data in inflow_sectors:
            sectors.append(sector_data['sector'])
            flows.append(sector_data['net_flow'])
            colors.append('green')
            
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ç–æ–∫–∏ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ)
        for sector_data in outflow_sectors:
            sectors.append(sector_data['sector'])
            flows.append(-sector_data['net_flow'])  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –æ—Ç—Ç–æ–∫–∞
            colors.append('red')
        
        fig_data = [{
            'x': sectors,
            'y': flows,
            'type': 'bar',
            'marker': {'color': colors},
            'text': [f"{abs(f)}" for f in flows],
            'textposition': 'outside'
        }]
        
        layout = {
            'title': 'üîÑ –†–æ—Ç–∞—Ü–∏—è —Å–µ–∫—Ç–æ—Ä–æ–≤ (–ø—Ä–∏—Ç–æ–∫/–æ—Ç—Ç–æ–∫ —Ñ–æ–Ω–¥–æ–≤)',
            'xaxis': {'title': '–°–µ–∫—Ç–æ—Ä', 'tickangle': -45},
            'yaxis': {'title': '–ß–∏—Å—Ç—ã–π –ø–æ—Ç–æ–∫ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ–Ω–¥–æ–≤)'},
            'height': 500,
            'margin': {'b': 120}
        }
        
        return jsonify({'data': fig_data, 'layout': layout})
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/detailed-compositions')
def api_detailed_compositions():
    """API –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–∞–≤–∞—Ö —Ñ–æ–Ω–¥–æ–≤"""
    if etf_data is None:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'})
    
    try:
        analyzer = CapitalFlowAnalyzer(etf_data.copy())
        composition_analysis = analyzer.analyze_composition_flows()
        detailed_funds = analyzer.get_detailed_fund_info()
        
        # –°–æ–∑–¥–∞–µ–º treemap –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = list(composition_analysis['category_flows'].keys())
        volumes = [composition_analysis['category_flows'][cat]['avg_daily_volume'] 
                  for cat in categories]
        returns = [composition_analysis['category_flows'][cat]['annual_return'] 
                  for cat in categories]
        counts = [composition_analysis['category_flows'][cat]['ticker'] 
                 for cat in categories]
        
        fig_data = [{
            'type': 'treemap',
            'labels': categories,
            'values': volumes,
            'parents': [''] * len(categories),
            'text': [f"{cat}<br>–§–æ–Ω–¥–æ–≤: {counts[i]}<br>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {returns[i]:.1f}%" 
                    for i, cat in enumerate(categories)],
            'textinfo': 'label+text',
            'hovertemplate': '<b>%{label}</b><br>' +
                           '–û–±—ä–µ–º: %{value:,.0f}<br>' +
                           '<extra></extra>'
        }]
        
        layout = {
            'title': 'üèóÔ∏è –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–æ–Ω–¥–æ–≤ –ø–æ —Å–æ—Å—Ç–∞–≤–∞–º',
            'height': 600
        }
        
        return jsonify({
            'data': fig_data, 
            'layout': layout,
            'analysis': composition_analysis,
            'detailed_funds': detailed_funds.head(20).to_dict('records')
        })
    except Exception as e:
        return jsonify({'error': str(e)})

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ ETF –¥–∞—à–±–æ—Ä–¥–∞...")
    
    if not load_etf_data():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ETF")
        exit(1)
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    print("üåê –î–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5004")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    app.run(debug=True, host='0.0.0.0', port=5004)