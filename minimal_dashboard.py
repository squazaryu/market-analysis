#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
"""

from flask import Flask, render_template_string, jsonify
import pandas as pd
from pathlib import Path

app = Flask(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def get_etf_data():
    try:
        data_files = list(Path('.').glob('enhanced_etf_data_*.csv'))
        if not data_files:
            data_files = list(Path('.').glob('full_moex_etf_data_*.csv'))
        
        if data_files:
            latest_data = max(data_files, key=lambda x: x.stat().st_mtime)
            df = pd.read_csv(latest_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º sharpe_ratio –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'sharpe_ratio' not in df.columns:
                df['sharpe_ratio'] = (df['annual_return'] - 15) / df['volatility']
            
            return df
        return None
    except:
        return None

etf_df = get_etf_data()

HTML = """
<!DOCTYPE html>
<html>
<head>
    <title>üß™ –¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ ETF –¥–∞—à–±–æ—Ä–¥–∞</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body { background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%); padding: 20px; }
        .test-card { background: white; border-radius: 15px; padding: 20px; margin: 20px 0; box-shadow: 0 4px 15px rgba(0,0,0,0.1); }
        .btn-test { margin: 5px; }
        .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
        .status-success { background: #d4edda; color: #155724; }
        .status-error { background: #f8d7da; color: #721c24; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π ETF –¥–∞—à–±–æ—Ä–¥–∞</h1>
        
        <div class="test-card">
            <h3>1. –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫</h3>
            <button class="btn btn-primary btn-test" onclick="testBasic('–ö–Ω–æ–ø–∫–∞ 1')">–¢–µ—Å—Ç 1</button>
            <button class="btn btn-success btn-test" onclick="testBasic('–ö–Ω–æ–ø–∫–∞ 2')">–¢–µ—Å—Ç 2</button>
            <button class="btn btn-warning btn-test" onclick="testBasic('–ö–Ω–æ–ø–∫–∞ 3')">–¢–µ—Å—Ç 3</button>
            <div id="basic-status" class="status">–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É</div>
        </div>

        <div class="test-card">
            <h3>2. –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π</h3>
            <div class="btn-group" role="group">
                <button class="btn btn-outline-primary active" onclick="toggleButton(this, '–†–µ–∂–∏–º 1')">–†–µ–∂–∏–º 1</button>
                <button class="btn btn-outline-primary" onclick="toggleButton(this, '–†–µ–∂–∏–º 2')">–†–µ–∂–∏–º 2</button>
                <button class="btn btn-outline-primary" onclick="toggleButton(this, '–†–µ–∂–∏–º 3')">–†–µ–∂–∏–º 3</button>
            </div>
            <div id="toggle-status" class="status">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º</div>
        </div>

        <div class="test-card">
            <h3>3. –¢–µ—Å—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤</h3>
            <button class="btn btn-info btn-test" onclick="testAPI()">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</button>
            <button class="btn btn-secondary btn-test" onclick="testTable()">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É</button>
            <div id="api-status" class="status">–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞ API</div>
        </div>

        <div class="test-card">
            <h3>4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h3>
            <div id="results">
                <p>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ETF: <span id="etf-count">–ó–∞–≥—Ä—É–∑–∫–∞...</span></p>
                <div id="etf-table"></div>
            </div>
        </div>
    </div>

    <script>
        // –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        function testBasic(buttonName) {
            const status = document.getElementById('basic-status');
            status.innerHTML = `‚úÖ ${buttonName} —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}`;
            status.className = 'status status-success';
            console.log(`–ö–Ω–æ–ø–∫–∞ ${buttonName} –Ω–∞–∂–∞—Ç–∞`);
        }

        // –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        function toggleButton(element, mode) {
            // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ –≥—Ä—É–ø–ø–µ
            const buttons = element.parentElement.querySelectorAll('.btn');
            buttons.forEach(btn => btn.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º active –∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
            element.classList.add('active');
            
            const status = document.getElementById('toggle-status');
            status.innerHTML = `üîÑ –ê–∫—Ç–∏–≤–µ–Ω: ${mode}`;
            status.className = 'status status-success';
            console.log(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ ${mode}`);
        }

        // –¢–µ—Å—Ç API
        async function testAPI() {
            const status = document.getElementById('api-status');
            status.innerHTML = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...';
            status.className = 'status';
            
            try {
                const response = await fetch('/api/stats');
                const data = await response.json();
                
                status.innerHTML = `‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.total} ETF`;
                status.className = 'status status-success';
                
                document.getElementById('etf-count').textContent = `${data.total} ETF –Ω–∞–π–¥–µ–Ω–æ`;
            } catch (error) {
                status.innerHTML = `‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`;
                status.className = 'status status-error';
            }
        }

        // –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã
        async function testTable() {
            const status = document.getElementById('api-status');
            status.innerHTML = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã...';
            
            try {
                const response = await fetch('/api/table');
                const data = await response.json();
                
                let tableHTML = '<table class="table table-sm"><thead><tr><th>–¢–∏–∫–µ—Ä</th><th>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å</th><th>–†–∏—Å–∫</th></tr></thead><tbody>';
                
                data.slice(0, 5).forEach(etf => {
                    tableHTML += `<tr>
                        <td><strong>${etf.ticker}</strong></td>
                        <td>${etf.annual_return.toFixed(1)}%</td>
                        <td>${etf.volatility.toFixed(1)}%</td>
                    </tr>`;
                });
                
                tableHTML += '</tbody></table>';
                document.getElementById('etf-table').innerHTML = tableHTML;
                
                status.innerHTML = `‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –ü–æ–∫–∞–∑–∞–Ω–æ ${Math.min(5, data.length)} –∑–∞–ø–∏—Å–µ–π`;
                status.className = 'status status-success';
            } catch (error) {
                status.innerHTML = `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: ${error.message}`;
                status.className = 'status status-error';
            }
        }

        // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üöÄ –¢–µ—Å—Ç–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω');
            testAPI(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        });
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    return render_template_string(HTML)

@app.route('/api/stats')
def api_stats():
    if etf_df is None:
        return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'total': 0})
    
    return jsonify({
        'total': len(etf_df),
        'avg_return': round(etf_df['annual_return'].mean(), 1),
        'avg_volatility': round(etf_df['volatility'].mean(), 1)
    })

@app.route('/api/table')
def api_table():
    if etf_df is None:
        return jsonify([])
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-10 ETF
    top_etfs = etf_df.nlargest(10, 'avg_daily_volume')
    
    result = []
    for _, row in top_etfs.iterrows():
        result.append({
            'ticker': row['ticker'],
            'annual_return': float(row['annual_return']),
            'volatility': float(row['volatility']),
            'sharpe_ratio': float(row.get('sharpe_ratio', 0))
        })
    
    return jsonify(result)

if __name__ == '__main__':
    print("üß™ –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞...")
    
    if etf_df is not None:
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(etf_df)} ETF")
    else:
        print("‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ ETF –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –¥–∞—à–±–æ—Ä–¥ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:5002")
    print("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: Ctrl+C")
    
    app.run(debug=True, host='0.0.0.0', port=5002)