#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ –ü–ò–§ –∏–∑ —Ñ–∞–π–ª–∞ –¶–ë –†–§
–ß–∏—Ç–∞–µ—Ç list_PIF.xlsx –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö 96 –ë–ü–ò–§
"""

import pandas as pd
import sys
from pathlib import Path

def analyze_pif_registry():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –ü–ò–§ –æ—Ç –¶–ë –†–§"""
    
    file_path = Path("list_PIF.xlsx")
    
    if not file_path.exists():
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        print("üìä –ß–∏—Ç–∞–µ–º —Ä–µ–µ—Å—Ç—Ä –ü–ò–§ –æ—Ç –¶–ë –†–§...")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ª–∏—Å—Ç—ã
        xl_file = pd.ExcelFile(file_path)
        print(f"üìã –ù–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã: {xl_file.sheet_names}")
        
        # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
        df = pd.read_excel(file_path, sheet_name=0)
        
        print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
        print(f"   ‚Ä¢ –°—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}")
        
        print(f"\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   ‚Ä¢ –°—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
        
        print(f"\nüîç –ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π:")
        print(df.head())
        
        print(f"\nüìä –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(df.dtypes)
        
        # –ò—â–µ–º –ë–ü–ò–§ (–ë–∏—Ä–∂–µ–≤—ã–µ –ü–ò–§)
        if '–¢–∏–ø –ü–ò–§' in df.columns or '–¢–∏–ø' in df.columns:
            type_col = '–¢–∏–ø –ü–ò–§' if '–¢–∏–ø –ü–ò–§' in df.columns else '–¢–∏–ø'
            print(f"\nüè∑Ô∏è –¢–∏–ø—ã –ü–ò–§:")
            print(df[type_col].value_counts())
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ë–ü–ò–§
            bpif_mask = df[type_col].str.contains('–±–∏—Ä–∂–µ–≤–æ–π|–ë–ü–ò–§|ETF', case=False, na=False)
            bpif_df = df[bpif_mask]
            print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ –ë–ü–ò–§: {len(bpif_df)}")
            
            if len(bpif_df) > 0:
                print("\nüìã –ë–ü–ò–§ –≤ —Ä–µ–µ—Å—Ç—Ä–µ:")
                for idx, row in bpif_df.iterrows():
                    name_col = None
                    for col in ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ù–∞–∑–≤–∞–Ω–∏–µ', 'Name']:
                        if col in df.columns:
                            name_col = col
                            break
                    
                    if name_col:
                        print(f"   ‚Ä¢ {row[name_col]}")
        
        # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å —Ç–∏–∫–µ—Ä–∞–º–∏ –∏–ª–∏ –∫–æ–¥–∞–º–∏
        ticker_cols = [col for col in df.columns if any(word in col.lower() for word in ['—Ç–∏–∫–µ—Ä', '–∫–æ–¥', 'symbol', 'ticker'])]
        if ticker_cols:
            print(f"\nüè∑Ô∏è –ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã —Å —Ç–∏–∫–µ—Ä–∞–º–∏: {ticker_cols}")
            for col in ticker_cols:
                unique_values = df[col].dropna().unique()
                print(f"   ‚Ä¢ {col}: {len(unique_values)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
                if len(unique_values) <= 20:
                    print(f"     –ó–Ω–∞—á–µ–Ω–∏—è: {list(unique_values)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        csv_path = "cbr_pif_registry_analysis.csv"
        df.to_csv(csv_path, index=False, encoding='utf-8')
        print(f"\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {csv_path}")
        
        return df
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

if __name__ == "__main__":
    df = analyze_pif_registry()
    
    if df is not None:
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ –ü–ò–§")
        print("üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–∏–µ –∏–∑ –∑–∞–ø–∏—Å–µ–π —è–≤–ª—è—é—Ç—Å—è –ë–ü–ò–§")
        print("   2. –ò–∑–≤–ª–µ—á—å —Ç–∏–∫–µ—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ MOEX")
        print("   3. –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ–Ω–¥–æ–≤")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–µ—Å—Ç—Ä –ü–ò–§")