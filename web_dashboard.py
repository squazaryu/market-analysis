#!/usr/bin/env python3
"""
–í–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ETF –Ω–∞ Flask
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ localhost –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

from flask import Flask, render_template, jsonify, request
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.utils
import json
import numpy as np
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from risk_metrics import RiskMetricsCalculator
from correlation_analysis import CorrelationAnalyzer
from portfolio_optimization import PortfolioOptimizer

app = Flask(__name__)

class ETFWebDashboard:
    """–í–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ETF"""
    
    def __init__(self):
        self.df = None
        self.enhanced_df = None
        self.risk_calculator = RiskMetricsCalculator()
        self.correlation_analyzer = CorrelationAnalyzer()
        self.portfolio_optimizer = PortfolioOptimizer()
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ ETF"""
        try:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
            data_files = list(Path('.').glob('enhanced_etf_data_*.csv'))
            if not data_files:
                data_files = list(Path('.').glob('full_moex_etf_data_*.csv'))
            
            if not data_files:
                print("‚ùå –§–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ETF –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            
            latest_data = max(data_files, key=lambda x: x.stat().st_mtime)
            print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {latest_data}")
            
            self.df = pd.read_csv(latest_data)
            
            # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if 'sharpe_ratio' not in self.df.columns:
                self.enhance_data()
            else:
                self.enhanced_df = self.df.copy()
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.df)} ETF")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def enhance_data(self):
        """–û–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        if self.df is None:
            return
        
        print("üîÑ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏...")
        
        enhanced_df = self.df.copy()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Sharpe ratio (–±–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ 15%)
        risk_free_rate = 15.0
        enhanced_df['sharpe_ratio'] = (enhanced_df['annual_return'] - risk_free_rate) / enhanced_df['volatility']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Sortino ratio (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        enhanced_df['sortino_ratio'] = enhanced_df['annual_return'] / (enhanced_df['volatility'] * 0.7)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–ª—å—Ñ—É –∏ –±–µ—Ç—É
        market_return = enhanced_df['annual_return'].mean()
        market_volatility = enhanced_df['volatility'].mean()
        
        enhanced_df['beta'] = enhanced_df['volatility'] / market_volatility
        enhanced_df['alpha'] = enhanced_df['annual_return'] - (risk_free_rate + enhanced_df['beta'] * (market_return - risk_free_rate))
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ä–∏—Å–∫—É
        enhanced_df['risk_level'] = pd.cut(
            enhanced_df['volatility'], 
            bins=[0, 10, 20, float('inf')],
            labels=['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π']
        )
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        enhanced_df['return_tier'] = pd.cut(
            enhanced_df['annual_return'], 
            bins=[-float('inf'), 5, 15, float('inf')],
            labels=['–ù–∏–∑–∫–∞—è', '–°—Ä–µ–¥–Ω—è—è', '–í—ã—Å–æ–∫–∞—è']
        )
        
        self.enhanced_df = enhanced_df
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–æ–≥–∞—â–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∞–º–∏ –¥–ª—è {len(enhanced_df)} ETF")
    
    def get_summary_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if self.enhanced_df is None:
            return {}
        
        return {
            'total_etfs': len(self.enhanced_df),
            'avg_return': round(self.enhanced_df['annual_return'].mean(), 1),
            'avg_volatility': round(self.enhanced_df['volatility'].mean(), 1),
            'avg_sharpe': round(self.enhanced_df['sharpe_ratio'].mean(), 2),
            'categories': len(self.enhanced_df['category'].unique()),
            'best_etf': {
                'ticker': self.enhanced_df.loc[self.enhanced_df['annual_return'].idxmax(), 'ticker'],
                'return': round(self.enhanced_df['annual_return'].max(), 1)
            },
            'best_sharpe': {
                'ticker': self.enhanced_df.loc[self.enhanced_df['sharpe_ratio'].idxmax(), 'ticker'],
                'sharpe': round(self.enhanced_df['sharpe_ratio'].max(), 2)
            }
        }
    
    def create_risk_return_plot(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"""
        if self.enhanced_df is None:
            return "{}"
        
        valid_data = self.enhanced_df[(self.enhanced_df['annual_return'].notna()) & 
                                     (self.enhanced_df['volatility'].notna()) & 
                                     (self.enhanced_df['avg_daily_volume'].notna())]
        
        fig = px.scatter(
            valid_data, 
            x='volatility', 
            y='annual_return',
            size='avg_daily_volume',
            color='category',
            hover_name='ticker',
            hover_data=['sharpe_ratio', 'management_company'],
            title='üìä –ê–Ω–∞–ª–∏–∑ –†–∏—Å–∫-–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å ETF',
            labels={
                'volatility': '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)',
                'annual_return': '–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)',
                'avg_daily_volume': '–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤'
            }
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–µ–∑—Ä–∏—Å–∫–æ–≤—É—é —Å—Ç–∞–≤–∫—É
        fig.add_hline(y=15, line_dash="dot", line_color="green", 
                     annotation_text="–ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (15%)")
        
        fig.update_layout(height=600)
        
        return json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
    
    def create_sector_analysis_plot(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º"""
        if self.enhanced_df is None:
            return "{}"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        sector_stats = self.enhanced_df.groupby('category').agg({
            'annual_return': 'mean',
            'volatility': 'mean',
            'sharpe_ratio': 'mean',
            'ticker': 'count'
        }).round(2)
        
        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=('–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', '–°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å',
                           '–°—Ä–µ–¥–Ω–∏–π Sharpe Ratio', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETF'),
            specs=[[{}, {}], [{}, {}]]
        )
        
        categories = sector_stats.index.tolist()
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        fig.add_trace(
            go.Bar(x=categories, y=sector_stats['annual_return'], 
                   name='–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)', marker_color='lightgreen'),
            row=1, col=1
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        fig.add_trace(
            go.Bar(x=categories, y=sector_stats['volatility'], 
                   name='–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)', marker_color='lightcoral'),
            row=1, col=2
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: Sharpe Ratio
        fig.add_trace(
            go.Bar(x=categories, y=sector_stats['sharpe_ratio'], 
                   name='Sharpe Ratio', marker_color='lightblue'),
            row=2, col=1
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETF
        fig.add_trace(
            go.Bar(x=categories, y=sector_stats['ticker'], 
                   name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', marker_color='orange'),
            row=2, col=2
        )
        
        fig.update_layout(
            title='üè¢ –°–µ–∫—Ç–æ—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ETF',
            height=800,
            showlegend=False
        )
        
        return json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
    
    def create_performance_comparison_plot(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
        if self.enhanced_df is None:
            return "{}"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        df_sorted = self.enhanced_df.sort_values('annual_return', ascending=True)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø –∏ –∞—É—Ç—Å–∞–π–¥–µ—Ä–æ–≤
        top_performers = df_sorted.tail(10)
        worst_performers = df_sorted.head(10)
        
        fig = make_subplots(
            rows=1, cols=2,
            subplot_titles=('üèÜ –¢–û–ü-10 –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏', 'üìâ –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã'),
            horizontal_spacing=0.15
        )
        
        # –¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
        fig.add_trace(
            go.Bar(
                y=top_performers['ticker'],
                x=top_performers['annual_return'],
                orientation='h',
                name='–õ–∏–¥–µ—Ä—ã',
                marker_color='green',
                text=top_performers['annual_return'].round(1),
                textposition='outside'
            ),
            row=1, col=1
        )
        
        # –ê—É—Ç—Å–∞–π–¥–µ—Ä—ã
        fig.add_trace(
            go.Bar(
                y=worst_performers['ticker'],
                x=worst_performers['annual_return'],
                orientation='h',
                name='–ê—É—Ç—Å–∞–π–¥–µ—Ä—ã',
                marker_color='red',
                text=worst_performers['annual_return'].round(1),
                textposition='outside'
            ),
            row=1, col=2
        )
        
        fig.update_layout(
            title='üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: –ª–∏–¥–µ—Ä—ã vs –∞—É—Ç—Å–∞–π–¥–µ—Ä—ã',
            height=600,
            showlegend=False
        )
        
        fig.update_xaxes(title_text="–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)", row=1, col=1)
        fig.update_xaxes(title_text="–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)", row=1, col=2)
        
        return json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
    
    def create_correlation_heatmap(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É"""
        if self.enhanced_df is None:
            return "{}"
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-15 ETF –ø–æ –æ–±—ä–µ–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        top_etfs = self.enhanced_df.nlargest(15, 'avg_daily_volume')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
        correlation_matrix = self.correlation_analyzer.generate_synthetic_correlations(
            top_etfs.to_dict('records')
        )
        
        fig = go.Figure(data=go.Heatmap(
            z=correlation_matrix.values,
            x=correlation_matrix.columns,
            y=correlation_matrix.index,
            colorscale='RdBu',
            zmid=0,
            text=correlation_matrix.round(2).values,
            texttemplate="%{text}",
            textfont={"size": 10},
            hoverongaps=False
        ))
        
        fig.update_layout(
            title='üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¢–û–ü-15 ETF',
            height=600,
            xaxis_title='ETF',
            yaxis_title='ETF'
        )
        
        return json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
    
    def create_efficient_frontier_plot(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É"""
        if self.enhanced_df is None:
            return "{}"
        
        try:
            # –ë–µ—Ä–µ–º —Ç–æ–ø-10 ETF –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            top_etfs = self.enhanced_df.nlargest(10, 'sharpe_ratio').to_dict('records')
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            returns, cov_matrix, tickers = self.portfolio_optimizer.prepare_data(top_etfs)
            
            # –°—Ç—Ä–æ–∏–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É
            efficient_frontier = self.portfolio_optimizer.build_efficient_frontier(
                returns, cov_matrix, num_portfolios=20
            )
            
            # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏
            optimal_portfolios = self.portfolio_optimizer.find_optimal_portfolios(top_etfs)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig = go.Figure()
            
            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
            fig.add_trace(go.Scatter(
                x=[v * 100 for v in efficient_frontier['volatilities']],
                y=[r * 100 for r in efficient_frontier['returns']],
                mode='lines+markers',
                name='–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞',
                line=dict(color='blue', width=3),
                marker=dict(size=6)
            ))
            
            # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏
            colors = ['red', 'green', 'orange', 'purple']
            for i, (name, portfolio) in enumerate(optimal_portfolios.items()):
                fig.add_trace(go.Scatter(
                    x=[portfolio['volatility']],
                    y=[portfolio['return']],
                    mode='markers',
                    name=portfolio['description'],
                    marker=dict(size=15, color=colors[i % len(colors)]),
                    text=f"Sharpe: {portfolio['sharpe_ratio']:.2f}",
                    hovertemplate=f"{portfolio['description']}<br>" +
                                 f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {portfolio['return']:.1f}%<br>" +
                                 f"–†–∏—Å–∫: {portfolio['volatility']:.1f}%<br>" +
                                 f"Sharpe: {portfolio['sharpe_ratio']:.2f}<extra></extra>"
                ))
            
            # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ ETF
            individual_returns = [etf['annual_return'] for etf in top_etfs]
            individual_vols = [etf['volatility'] for etf in top_etfs]
            individual_tickers = [etf['ticker'] for etf in top_etfs]
            
            fig.add_trace(go.Scatter(
                x=individual_vols,
                y=individual_returns,
                mode='markers',
                name='–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ ETF',
                marker=dict(size=8, color='lightblue', opacity=0.7),
                text=individual_tickers,
                hovertemplate="%{text}<br>" +
                             "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: %{y:.1f}%<br>" +
                             "–†–∏—Å–∫: %{x:.1f}%<extra></extra>"
            ))
            
            fig.update_layout(
                title='üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–¢–û–ü-10 ETF)',
                xaxis_title='–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)',
                yaxis_title='–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)',
                height=600,
                showlegend=True
            )
            
            return json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü—ã: {e}")
            return "{}"
    
    def get_investment_recommendations(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        if self.enhanced_df is None:
            return {}
        
        recommendations = {
            'conservative': {
                'title': '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
                'description': '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫, —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
                'criteria': '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å < 15%, Sharpe > 0.5',
                'etfs': self.enhanced_df[(self.enhanced_df['volatility'] < 15) & 
                                        (self.enhanced_df['sharpe_ratio'] > 0.5)]
                       .nlargest(5, 'sharpe_ratio')[['ticker', 'annual_return', 'volatility', 'sharpe_ratio']]
                       .to_dict('records')
            },
            'balanced': {
                'title': '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
                'description': '–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫, —É–º–µ—Ä–µ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
                'criteria': '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 15-25%, Sharpe > 0.3',
                'etfs': self.enhanced_df[(self.enhanced_df['volatility'] >= 15) & 
                                        (self.enhanced_df['volatility'] <= 25) & 
                                        (self.enhanced_df['sharpe_ratio'] > 0.3)]
                       .nlargest(5, 'sharpe_ratio')[['ticker', 'annual_return', 'volatility', 'sharpe_ratio']]
                       .to_dict('records')
            },
            'aggressive': {
                'title': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
                'description': '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫, –≤—ã—Å–æ–∫–∞—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
                'criteria': '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å > 20%',
                'etfs': self.enhanced_df[self.enhanced_df['annual_return'] > 20]
                       .nlargest(5, 'annual_return')[['ticker', 'annual_return', 'volatility', 'sharpe_ratio']]
                       .to_dict('records')
            }
        }
        
        return recommendations

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∞—à–±–æ—Ä–¥–∞
dashboard = ETFWebDashboard()

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    return render_template('dashboard.html')

@app.route('/api/summary')
def api_summary():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return jsonify(dashboard.get_summary_stats())

@app.route('/api/risk-return-plot')
def api_risk_return_plot():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∏—Å–∫-–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"""
    return dashboard.create_risk_return_plot()

@app.route('/api/sector-analysis-plot')
def api_sector_analysis_plot():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ç–æ—Ä–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    return dashboard.create_sector_analysis_plot()

@app.route('/api/performance-comparison-plot')
def api_performance_comparison_plot():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
    return dashboard.create_performance_comparison_plot()

@app.route('/api/correlation-heatmap')
def api_correlation_heatmap():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    return dashboard.create_correlation_heatmap()

@app.route('/api/efficient-frontier-plot')
def api_efficient_frontier_plot():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü—ã"""
    return dashboard.create_efficient_frontier_plot()

@app.route('/api/recommendations')
def api_recommendations():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    return jsonify(dashboard.get_investment_recommendations())

@app.route('/api/etf-data')
def api_etf_data():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ETF"""
    if dashboard.enhanced_df is None:
        return jsonify([])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä limit –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    limit = request.args.get('limit', 50, type=int)
    limit = min(limit, 100)  # –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø–∏—Å–µ–π
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø ETF –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    top_etfs = dashboard.enhanced_df.nlargest(limit, 'avg_daily_volume')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    columns = ['ticker', 'short_name', 'name', 'category', 'annual_return', 
               'volatility', 'sharpe_ratio', 'avg_daily_volume', 
               'management_company', 'isin']
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    available_columns = [col for col in columns if col in top_etfs.columns]
    
    return jsonify(top_etfs[available_columns].to_dict('records'))

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞ ETF –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    app.run(debug=True, host='0.0.0.0', port=5000)