"""
–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ –ë–ü–ò–§
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Ñ–æ–Ω–¥—ã –∏ –∫—Ä—É–ø–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞
"""

import pandas as pd
import json
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MarketAlerts:
    """–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞ –ë–ü–ò–§"""
    
    def __init__(self, data_dir: str = "./alerts_data"):
        self.data_dir = Path(data_dir)
        self.data_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        self.funds_history_file = self.data_dir / "funds_history.json"
        self.nav_history_file = self.data_dir / "nav_history.json"
        self.alerts_file = self.data_dir / "active_alerts.json"
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
        self.CAPITAL_FLOW_THRESHOLD = 0.05  # 5% –æ—Ç –°–ß–ê
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
        self._init_storage_files()
    
    def _init_storage_files(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        for file_path in [self.funds_history_file, self.nav_history_file, self.alerts_file]:
            if not file_path.exists():
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump({}, f, ensure_ascii=False)
    
    def check_new_funds(self, current_funds: pd.DataFrame) -> List[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–æ–Ω–¥–æ–≤ –Ω–∞ –ú–ú–í–ë
        
        Args:
            current_funds: DataFrame —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–æ–Ω–¥–∞–º–∏
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –æ –Ω–æ–≤—ã—Ö —Ñ–æ–Ω–¥–∞—Ö
        """
        alerts = []
        current_time = datetime.now().isoformat()
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ñ–æ–Ω–¥–æ–≤
            with open(self.funds_history_file, 'r', encoding='utf-8') as f:
                funds_history = json.load(f)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
            current_tickers = set(current_funds['ticker'].tolist())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏—Å—Ç–æ—Ä–∏—è
            last_check_date = funds_history.get('last_update', '')
            previous_tickers = set(funds_history.get('tickers', []))
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Ñ–æ–Ω–¥—ã
            new_tickers = current_tickers - previous_tickers
            
            if new_tickers and last_check_date:
                for ticker in new_tickers:
                    fund_info = current_funds[current_funds['ticker'] == ticker].iloc[0]
                    
                    alert = {
                        'type': 'NEW_FUND',
                        'timestamp': current_time,
                        'ticker': ticker,
                        'name': fund_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        'category': fund_info.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        'management_company': fund_info.get('management_company', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        'inception_date': fund_info.get('inception_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        'message': f"üÜï –ù–æ–≤—ã–π —Ñ–æ–Ω–¥ {ticker} –ø–æ—è–≤–∏–ª—Å—è –Ω–∞ –ú–ú–í–ë!",
                        'priority': 'HIGH'
                    }
                    alerts.append(alert)
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–æ–Ω–¥: {ticker}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            funds_history.update({
                'last_update': current_time,
                'tickers': list(current_tickers),
                'total_funds': len(current_tickers)
            })
            
            with open(self.funds_history_file, 'w', encoding='utf-8') as f:
                json.dump(funds_history, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ñ–æ–Ω–¥–æ–≤: {e}")
        
        return alerts
    
    def check_capital_flows(self, current_funds: pd.DataFrame) -> List[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä—É–ø–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –°–ß–ê —Ñ–æ–Ω–¥–æ–≤ (>5%)
        
        Args:
            current_funds: DataFrame —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ–Ω–¥–æ–≤
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –æ –¥–≤–∏–∂–µ–Ω–∏—è—Ö –∫–∞–ø–∏—Ç–∞–ª–∞
        """
        alerts = []
        current_time = datetime.now().isoformat()
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –°–ß–ê
            with open(self.nav_history_file, 'r', encoding='utf-8') as f:
                nav_history = json.load(f)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –°–ß–ê —Å investfunds.ru
            from investfunds_parser import InvestFundsParser
            parser = InvestFundsParser()
            
            for _, fund in current_funds.iterrows():
                ticker = fund['ticker']
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –°–ß–ê
                real_data = parser.find_fund_by_ticker(ticker)
                if not real_data or not real_data.get('nav'):
                    continue
                
                current_nav = real_data['nav']
                fund_name = fund.get('name', ticker)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–æ–Ω–¥–∞
                if ticker in nav_history:
                    previous_nav = nav_history[ticker].get('last_nav')
                    last_update = nav_history[ticker].get('last_update')
                    
                    if previous_nav and previous_nav > 0:
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                        change_percent = (current_nav - previous_nav) / previous_nav
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞
                        if abs(change_percent) >= self.CAPITAL_FLOW_THRESHOLD:
                            flow_type = "–ü–†–ò–¢–û–ö" if change_percent > 0 else "–û–¢–¢–û–ö"
                            change_billions = (current_nav - previous_nav) / 1_000_000_000
                            
                            alert = {
                                'type': 'CAPITAL_FLOW',
                                'timestamp': current_time,
                                'ticker': ticker,
                                'name': fund_name,
                                'flow_type': flow_type,
                                'change_percent': round(change_percent * 100, 2),
                                'change_amount_billions': round(change_billions, 2),
                                'previous_nav_billions': round(previous_nav / 1_000_000_000, 2),
                                'current_nav_billions': round(current_nav / 1_000_000_000, 2),
                                'last_update': last_update,
                                'message': f"üí∞ {flow_type} –∫–∞–ø–∏—Ç–∞–ª–∞ –≤ {ticker}: {abs(change_percent)*100:.1f}% ({abs(change_billions):.1f} –º–ª—Ä–¥ ‚ÇΩ)",
                                'priority': 'HIGH' if abs(change_percent) >= 0.10 else 'MEDIUM'
                            }
                            alerts.append(alert)
                            logger.info(f"–ö—Ä—É–ø–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞: {ticker} {change_percent*100:.1f}%")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ–Ω–¥–∞
                nav_history[ticker] = {
                    'last_nav': current_nav,
                    'last_update': current_time,
                    'fund_name': fund_name
                }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            with open(self.nav_history_file, 'w', encoding='utf-8') as f:
                json.dump(nav_history, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤–∏–∂–µ–Ω–∏–π –∫–∞–ø–∏—Ç–∞–ª–∞: {e}")
        
        return alerts
    
    def get_market_anomalies(self, current_funds: pd.DataFrame) -> List[Dict]:
        """
        –í—ã—è–≤–ª—è–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ –∏ –Ω–µ–æ–±—ã—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            current_funds: DataFrame —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö
        """
        alerts = []
        current_time = datetime.now().isoformat()
        
        try:
            # 1. –ê–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤
            median_volume = current_funds['avg_daily_volume'].median()
            high_volume_threshold = median_volume * 5  # –í 5 —Ä–∞–∑ –≤—ã—à–µ –º–µ–¥–∏–∞–Ω—ã
            
            high_volume_funds = current_funds[
                current_funds['avg_daily_volume'] > high_volume_threshold
            ]
            
            for _, fund in high_volume_funds.iterrows():
                volume_ratio = fund['avg_daily_volume'] / median_volume
                alert = {
                    'type': 'VOLUME_ANOMALY',
                    'timestamp': current_time,
                    'ticker': fund['ticker'],
                    'name': fund.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'volume_ratio': round(volume_ratio, 1),
                    'daily_volume': int(fund['avg_daily_volume']),
                    'message': f"üìà –ê–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ {fund['ticker']}: –≤ {volume_ratio:.1f} —Ä–∞–∑ –≤—ã—à–µ –º–µ–¥–∏–∞–Ω—ã",
                    'priority': 'MEDIUM'
                }
                alerts.append(alert)
            
            # 2. –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            volatility_threshold = 50  # –ë–æ–ª–µ–µ 50%
            high_volatility_funds = current_funds[
                current_funds['volatility'] > volatility_threshold
            ]
            
            for _, fund in high_volatility_funds.iterrows():
                alert = {
                    'type': 'VOLATILITY_ANOMALY',
                    'timestamp': current_time,
                    'ticker': fund['ticker'],
                    'name': fund.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'volatility': round(fund['volatility'], 1),
                    'message': f"‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {fund['ticker']}: {fund['volatility']:.1f}%",
                    'priority': 'MEDIUM'
                }
                alerts.append(alert)
            
            # 3. –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∏–ª–∏ –æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è)
            extreme_returns = current_funds[
                (current_funds['annual_return'] > 100) | 
                (current_funds['annual_return'] < -50)
            ]
            
            for _, fund in extreme_returns.iterrows():
                return_type = "–í–´–°–û–ö–ê–Ø" if fund['annual_return'] > 0 else "–ù–ò–ó–ö–ê–Ø"
                alert = {
                    'type': 'RETURN_ANOMALY',
                    'timestamp': current_time,
                    'ticker': fund['ticker'],
                    'name': fund.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                    'annual_return': round(fund['annual_return'], 1),
                    'return_type': return_type,
                    'message': f"üéØ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å {fund['ticker']}: {fund['annual_return']:.1f}%",
                    'priority': 'LOW'
                }
                alerts.append(alert)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—è–≤–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π: {e}")
        
        return alerts
    
    def save_alerts(self, alerts: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.alerts_file, 'r', encoding='utf-8') as f:
                existing_alerts = json.load(f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
            for alert in alerts:
                alert_id = f"{alert['type']}_{alert['ticker']}_{alert['timestamp']}"
                existing_alerts[alert_id] = alert
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
            cutoff_date = datetime.now() - timedelta(days=7)
            filtered_alerts = {
                k: v for k, v in existing_alerts.items()
                if datetime.fromisoformat(v['timestamp']) > cutoff_date
            }
            
            with open(self.alerts_file, 'w', encoding='utf-8') as f:
                json.dump(filtered_alerts, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    def get_active_alerts(self, hours: int = 24) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤
        
        Args:
            hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        """
        try:
            with open(self.alerts_file, 'r', encoding='utf-8') as f:
                all_alerts = json.load(f)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            cutoff_time = datetime.now() - timedelta(hours=hours)
            active_alerts = [
                alert for alert in all_alerts.values()
                if datetime.fromisoformat(alert['timestamp']) > cutoff_time
            ]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            active_alerts.sort(key=lambda x: x['timestamp'], reverse=True)
            
            return active_alerts
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return []
    
    def run_full_scan(self, current_funds: pd.DataFrame) -> Dict:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤
        
        Args:
            current_funds: DataFrame —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ–Ω–¥–æ–≤
            
        Returns:
            Dict: –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        logger.info("üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞ –ë–ü–ò–§...")
        
        all_alerts = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–æ–Ω–¥–æ–≤
        new_fund_alerts = self.check_new_funds(current_funds)
        all_alerts.extend(new_fund_alerts)
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–∏–∂–µ–Ω–∏–π –∫–∞–ø–∏—Ç–∞–ª–∞
        capital_flow_alerts = self.check_capital_flows(current_funds)
        all_alerts.extend(capital_flow_alerts)
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π
        anomaly_alerts = self.get_market_anomalies(current_funds)
        all_alerts.extend(anomaly_alerts)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∞–ª–µ—Ä—Ç—ã
        if all_alerts:
            self.save_alerts(all_alerts)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        summary = {
            'scan_timestamp': datetime.now().isoformat(),
            'total_funds_scanned': len(current_funds),
            'total_alerts': len(all_alerts),
            'new_funds': len(new_fund_alerts),
            'capital_flows': len(capital_flow_alerts),
            'anomalies': len(anomaly_alerts),
            'alerts': all_alerts
        }
        
        logger.info(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(all_alerts)} –∞–ª–µ—Ä—Ç–æ–≤")
        
        return summary

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
    print("üö® –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    import pandas as pd
    from pathlib import Path
    
    data_files = list(Path('.').glob('enhanced_etf_data_*.csv'))
    if data_files:
        latest_data = max(data_files, key=lambda x: x.stat().st_mtime)
        current_funds = pd.read_csv(latest_data)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∞–ª–µ—Ä—Ç–æ–≤
        alerts_system = MarketAlerts()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        results = alerts_system.run_full_scan(current_funds)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   –§–æ–Ω–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {results['total_funds_scanned']}")
        print(f"   –ê–ª–µ—Ä—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {results['total_alerts']}")
        print(f"   –ù–æ–≤—ã–µ —Ñ–æ–Ω–¥—ã: {results['new_funds']}")
        print(f"   –î–≤–∏–∂–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞: {results['capital_flows']}")
        print(f"   –ê–Ω–æ–º–∞–ª–∏–∏: {results['anomalies']}")
        
    else:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ETF")