#!/usr/bin/env python3
"""
–û—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã —Ñ–æ–Ω–¥–æ–≤
"""

from investfunds_parser import InvestFundsParser
import pandas as pd

def generate_integration_report():
    parser = InvestFundsParser()
    all_mapped_tickers = list(parser.fund_mapping.keys())

    print('üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–ï–†–í–û–ô –ì–†–£–ü–ü–´ –§–û–ù–î–û–í')
    print('=' * 80)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –£–ö
    alfa_tickers = [t for t in all_mapped_tickers if t.startswith(('AK', 'AM')) and t not in ['AMFL', 'AMGB', 'AMRE', 'AMRH']]
    aton_tickers = ['AMFL', 'AMGB', 'AMRE', 'AMRH']
    vim_tickers = ['LQDT']

    print('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –£–ü–†–ê–í–õ–Ø–Æ–©–ò–ú –ö–û–ú–ü–ê–ù–ò–Ø–ú:')
    print('=' * 80)

    total_nav = 0
    total_funds = 0

    for uc_name, tickers in [('–ê–ª—å—Ñ–∞-–ö–∞–ø–∏—Ç–∞–ª / –ê-–ö–∞–ø–∏—Ç–∞–ª', alfa_tickers), 
                            ('–ê–¢–û–ù-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', aton_tickers),
                            ('–í–ò–ú –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', vim_tickers)]:
        print(f'\nüè¢ {uc_name} ({len(tickers)} —Ñ–æ–Ω–¥–æ–≤):')
        uc_nav = 0
        
        for ticker in sorted(tickers):
            try:
                fund_data = parser.find_fund_by_ticker(ticker)
                if fund_data and fund_data.get('nav', 0) > 0:
                    nav = fund_data['nav']
                    price = fund_data.get('unit_price', 0)
                    name = fund_data['name'][:40]
                    
                    print(f'   {ticker:6} | {nav/1e9:8.1f} –º–ª—Ä–¥ ‚ÇΩ | {price:8.2f} ‚ÇΩ | {name}...')
                    uc_nav += nav
                    total_nav += nav
                    total_funds += 1
                else:
                    print(f'   {ticker:6} | {"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö":>8}')
            except Exception as e:
                print(f'   {ticker:6} | –û—à–∏–±–∫–∞: {str(e)[:30]}...')
        
        print(f'   üìà –ò—Ç–æ–≥–æ –ø–æ {uc_name}: {uc_nav/1e9:.1f} –º–ª—Ä–¥ ‚ÇΩ')

    print(f'\nüéØ –û–ë–©–ò–ï –ò–¢–û–ì–ò:')
    print('=' * 80)
    print(f'‚úÖ –í—Å–µ–≥–æ —Ñ–æ–Ω–¥–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏: {total_funds}')
    print(f'üí∞ –û–±—â–∞—è –°–ß–ê: {total_nav/1e9:.1f} –º–ª—Ä–¥ ‚ÇΩ') 
    
    old_nav = 464.3  # –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
    new_nav = total_nav/1e9 - old_nav
    print(f'üìà –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è: +{new_nav:.1f} –º–ª—Ä–¥ ‚ÇΩ (–±—ã–ª–æ {old_nav:.1f}, —Å—Ç–∞–ª–æ {total_nav/1e9:.1f})')

    # –¢–æ–ø-10 —Ñ–æ–Ω–¥–æ–≤ –ø–æ –°–ß–ê
    print(f'\nüèÜ –¢–û–ü-10 –§–û–ù–î–û–í –ü–û –°–ß–ê:')
    print('=' * 80)

    fund_data_list = []
    for ticker in all_mapped_tickers:
        try:
            fund_data = parser.find_fund_by_ticker(ticker)
            if fund_data and fund_data.get('nav', 0) > 0:
                fund_data_list.append((ticker, fund_data['nav'], fund_data['name']))
        except:
            pass

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –°–ß–ê
    fund_data_list.sort(key=lambda x: x[1], reverse=True)

    for i, (ticker, nav, name) in enumerate(fund_data_list[:10], 1):
        print(f'{i:2d}. {ticker:6} | {nav/1e9:8.1f} –º–ª—Ä–¥ ‚ÇΩ | {name[:45]}...')

    print(f'\nüìã –ü–û–ö–†–´–¢–ò–ï –†–´–ù–ö–ê:')
    print('=' * 80)
    coverage_percent = len(all_mapped_tickers) / 96 * 100
    print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {len(all_mapped_tickers)}/96 = {coverage_percent:.1f}%')
    print(f'–°–ß–ê –ø–æ–∫—Ä—ã—Ç–∏–µ: ~{total_nav/1e9:.0f} –º–ª—Ä–¥ ‚ÇΩ (–æ—Ü–µ–Ω–æ—á–Ω–æ 70-80% —Ä—ã–Ω–∫–∞)')
    
    print(f'\nüí° –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:')
    print('=' * 80)
    print('1. AKMM (–î–µ–Ω–µ–∂–Ω—ã–π —Ä—ã–Ω–æ–∫) - –∫—Ä—É–ø–Ω–µ–π—à–∏–π –Ω–æ–≤—ã–π —Ñ–æ–Ω–¥: 211.6 –º–ª—Ä–¥ ‚ÇΩ')
    print('2. AKFB (–û–±–ª–∏–≥–∞—Ü–∏–∏ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∫—É–ø–æ–Ω–æ–º) - 25.4 –º–ª—Ä–¥ ‚ÇΩ') 
    print('3. AKME (–£–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –∞–∫—Ü–∏–∏) - 20.1 –º–ª—Ä–¥ ‚ÇΩ')
    print('4. AKGD (–ó–æ–ª–æ—Ç–æ) - 11.3 –º–ª—Ä–¥ ‚ÇΩ')
    print('5. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω—É–ª–µ–≤—É—é –°–ß–ê (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–≤—ã–µ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)')
    
    print(f'\nüìä –°–¢–†–£–ö–¢–£–†–ê –ù–û–í–´–• –§–û–ù–î–û–í:')
    print('=' * 80)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
    bond_funds = [t for t in all_mapped_tickers if any(x in t for x in ['BC', 'GB', 'FL', 'FB'])]
    equity_funds = [t for t in all_mapped_tickers if any(x in t for x in ['AI', 'ME', 'HT', 'IE', 'NR', 'RE'])]
    money_funds = [t for t in all_mapped_tickers if any(x in t for x in ['MM', 'MP', 'NY', 'GL', 'LQ'])]
    commodity_funds = [t for t in all_mapped_tickers if any(x in t for x in ['GD', 'GP', 'PP'])]
    
    print(f'üìà –ê–∫—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–æ–Ω–¥—ã: {len(equity_funds)} —à—Ç.')
    print(f'üí∞ –î–µ–Ω–µ–∂–Ω—ã–µ —Ñ–æ–Ω–¥—ã: {len(money_funds)} —à—Ç.')  
    print(f'üèõÔ∏è –û–±–ª–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–æ–Ω–¥—ã: {len(bond_funds)} —à—Ç.')
    print(f'ü•á –¢–æ–≤–∞—Ä–Ω—ã–µ —Ñ–æ–Ω–¥—ã: {len(commodity_funds)} —à—Ç.')

if __name__ == "__main__":
    generate_integration_report()