#!/usr/bin/env python3
"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ETF/–ë–ü–ò–§
- MOEX –¥–∞–Ω–Ω—ã–µ: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤ –ø—è—Ç–Ω–∏—Ü—É
- investfunds.ru –¥–∞–Ω–Ω—ã–µ: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00
"""

import schedule
import time
import logging
import threading
from datetime import datetime, timedelta
from pathlib import Path
import subprocess
import json

class DataScheduler:
    def __init__(self):
        self.setup_logging()
        self.status_file = Path("scheduler_status.json")
        self.running = False
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_dir / f'scheduler_{datetime.now().strftime("%Y%m%d")}.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger('DataScheduler')
        
    def save_status(self, task_type: str, status: str, details: str = ""):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        try:
            if self.status_file.exists():
                with open(self.status_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
            else:
                data = {}
            
            data[task_type] = {
                'last_run': datetime.now().isoformat(),
                'status': status,
                'details': details
            }
            
            with open(self.status_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def update_investfunds_data(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö investfunds.ru"""
        self.logger.info("üîÑ –ù–∞—á–∞–ª–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è investfunds –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            from simple_dashboard import create_initial_data
            from investfunds_parser import InvestFundsParser
            
            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∫—ç—à
            parser = InvestFundsParser()
            cache_archived = parser.archive_cache()
            self.logger.info(f"üì¶ –ö—ç—à –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω: {cache_archived}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ–º–∏ 96 —Ñ–æ–Ω–¥–∞–º–∏
            start_time = datetime.now()
            success = create_initial_data()
            end_time = datetime.now()
            
            duration = (end_time - start_time).total_seconds()
            
            if success:
                self.logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ investfunds –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫")
                self.save_status('investfunds_daily', 'success', f'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫')
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Ä—Ö–∏–≤–∞
                summary = parser.get_fund_history_summary()
                self.logger.info(f"üìä –ê—Ä—Ö–∏–≤: {summary['archives']} –ø–∞–ø–æ–∫, {summary['funds']} —Ñ–æ–Ω–¥–æ–≤, {summary['total_files']} —Ñ–∞–π–ª–æ–≤")
                
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ investfunds")
                self.save_status('investfunds_daily', 'error', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ')
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è investfunds: {e}")
            self.save_status('investfunds_daily', 'error', str(e))
    
    def update_moex_data(self):
        """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö MOEX (–ø—è—Ç–Ω–∏—Ü–∞)"""
        self.logger.info("üìà –ù–∞—á–∞–ª–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è MOEX –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ MOEX –¥–∞–Ω–Ω—ã—Ö
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ö–∞–Ω–∏–∑–º, –Ω–æ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
            from moex_provider import MOEXDataProvider
            
            moex = MOEXDataProvider()
            etfs = moex.get_securities_list()
            
            self.logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(etfs)} ETF —Å MOEX")
            self.save_status('moex_weekly', 'success', f'–ü–æ–ª—É—á–µ–Ω–æ {len(etfs)} ETF —Ç–∏–∫–µ—Ä–æ–≤')
            
            # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º investfunds –¥–∞–Ω–Ω—ã–µ –≤ –ø—è—Ç–Ω–∏—Ü—É
            self.update_investfunds_data()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è MOEX: {e}")
            self.save_status('moex_weekly', 'error', str(e))
    
    def get_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            if not self.status_file.exists():
                return {'message': '–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω - –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å'}
            
            with open(self.status_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            return {'error': f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}'}
    
    def setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ investfunds –≤ 10:00
        schedule.every().day.at("10:00").do(self.update_investfunds_data)
        self.logger.info("üìÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ investfunds –≤ 10:00")
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ MOEX –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 09:00
        schedule.every().friday.at("09:00").do(self.update_moex_data)
        self.logger.info("üìÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ MOEX –≤ –ø—è—Ç–Ω–∏—Ü—É 09:00")
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
        # schedule.every(1).minutes.do(self.update_investfunds_data)
        # self.logger.info("üß™ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É")
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        self.running = True
        self.logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        
        while self.running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except KeyboardInterrupt:
                self.logger.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(60)
    
    def start_background(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        scheduler_thread = threading.Thread(target=self.run_scheduler, daemon=True)
        scheduler_thread.start()
        self.logger.info("üì± –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        return scheduler_thread
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        self.logger.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    scheduler = DataScheduler()
    scheduler.setup_schedule()
    
    print("ü§ñ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
    print("   ‚Ä¢ Investfunds.ru: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 10:00")
    print("   ‚Ä¢ MOEX: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤ –ø—è—Ç–Ω–∏—Ü—É 09:00")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        scheduler.run_scheduler()
    except KeyboardInterrupt:
        print("\nüëã –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()