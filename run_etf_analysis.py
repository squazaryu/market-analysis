"""
–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ë–ü–ò–§–æ–≤ —Å fallback —Å–∏—Å—Ç–µ–º–æ–π
"""

import json
import pandas as pd
from datetime import datetime
from etf_data_collector import ETFDataCollectorWithFallback
from logger_config import logger


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ë–ü–ò–§–æ–≤"""
    logger.info("=== –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –†–û–°–°–ò–ô–°–ö–ò–• –ë–ü–ò–§ ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
    collector = ETFDataCollectorWithFallback()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    logger.info("–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö:")
    provider_status = collector.get_provider_status()
    
    active_providers = 0
    for provider in provider_status['providers']:
        status_emoji = "‚úÖ" if provider['status'] == 'active' else ("‚ö†Ô∏è" if provider['status'] == 'degraded' else "‚ùå")
        logger.info(f"  {status_emoji} {provider['name']}: {provider['status']}")
        if provider['status'] in ['active', 'degraded']:
            active_providers += 1
    
    logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {active_providers}/{provider_status['total_providers']}")
    
    if active_providers == 0:
        logger.warning("–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã! –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.")
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –ë–ü–ò–§–∞–º
    logger.info("\n–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –ë–ü–ò–§–∞–º...")
    etf_df = collector.collect_all_etf_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    raw_data_file = f'etf_raw_data_{timestamp}.csv'
    etf_df.to_csv(raw_data_file, index=False, encoding='utf-8')
    logger.info(f"–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {raw_data_file}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    comprehensive_report = collector.create_comprehensive_report()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = f'etf_comprehensive_report_{timestamp}.json'
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(comprehensive_report, f, ensure_ascii=False, indent=2, default=str)
    logger.info(f"–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
    
    # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print_key_results(comprehensive_report, etf_df)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    create_visualizations(etf_df, timestamp)
    
    logger.info(f"\n=== –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù ===")
    logger.info(f"–§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:")
    logger.info(f"  üìä –î–∞–Ω–Ω—ã–µ: {raw_data_file}")
    logger.info(f"  üìã –û—Ç—á–µ—Ç: {report_file}")
    logger.info(f"  üìà –ì—Ä–∞—Ñ–∏–∫–∏: etf_analysis_charts_{timestamp}.png")


def print_key_results(report, df):
    """–í—ã–≤–æ–¥ –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\n" + "="*60)
    print("üèÜ –ö–õ–Æ–ß–ï–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –†–û–°–°–ò–ô–°–ö–ò–• –ë–ü–ò–§")
    print("="*60)
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    metadata = report['report_metadata']
    print(f"\nüìä –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
    print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ë–ü–ò–§–æ–≤: {metadata['total_etfs_analyzed']}")
    print(f"   –°—Ä–µ–¥–Ω—è—è –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {metadata['average_data_quality']:.2f}")
    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {', '.join(metadata['data_sources_used'].keys())}")
    
    # –†—ã–Ω–æ—á–Ω—ã–µ –¥–æ–ª–∏
    market_overview = report['market_overview']
    print(f"\nüè¢ –£–ü–†–ê–í–õ–Ø–Æ–©–ò–ï –ö–û–ú–ü–ê–ù–ò–ò:")
    print(f"   –í—Å–µ–≥–æ –£–ö: {market_overview['management_companies']}")
    
    if market_overview['market_shares']:
        print("   –†—ã–Ω–æ—á–Ω—ã–µ –¥–æ–ª–∏:")
        sorted_shares = sorted(market_overview['market_shares'].items(), 
                             key=lambda x: x[1] if x[1] else 0, reverse=True)
        for uk, share in sorted_shares[:5]:  # –¢–æ–ø-5
            if share:
                print(f"     ‚Ä¢ {uk}: {share:.1f}%")
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë–ü–ò–§–æ–≤
    print(f"\nüìà –ö–ê–¢–ï–ì–û–†–ò–ò –ë–ü–ò–§:")
    for category, count in market_overview['categories'].items():
        print(f"   ‚Ä¢ {category}: {count} —Ñ–æ–Ω–¥–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    performance = report['performance_analysis']
    if 'average_return' in performance:
        print(f"\nüí∞ –î–û–•–û–î–ù–û–°–¢–¨:")
        print(f"   –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {performance['average_return']:.2f}%")
        print(f"   –ú–µ–¥–∏–∞–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {performance['median_return']:.2f}%")
        
        if 'best_performer' in performance:
            best = performance['best_performer']
            print(f"   ü•á –õ—É—á—à–∏–π: {best['ticker']} ({best['name']}) - {best['return']:.2f}%")
        
        if 'worst_performer' in performance:
            worst = performance['worst_performer']
            print(f"   üìâ –•—É–¥—à–∏–π: {worst['ticker']} ({worst['name']}) - {worst['return']:.2f}%")
        
        print(f"   –§–æ–Ω–¥–æ–≤ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é: {performance['positive_returns_count']}")
        print(f"   –§–æ–Ω–¥–æ–≤ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é: {performance['negative_returns_count']}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
    risk = report['risk_analysis']
    if 'average_volatility' in risk:
        print(f"\n‚ö†Ô∏è –†–ò–°–ö–ò (–í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨):")
        print(f"   –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {risk['average_volatility']:.2f}%")
        
        if 'lowest_risk' in risk:
            low_risk = risk['lowest_risk']
            print(f"   üõ°Ô∏è –ù–∞–∏–º–µ–Ω–µ–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π: {low_risk['ticker']} - {low_risk['volatility']:.2f}%")
        
        if 'highest_risk' in risk:
            high_risk = risk['highest_risk']
            print(f"   ‚ö° –ù–∞–∏–±–æ–ª–µ–µ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π: {high_risk['ticker']} - {high_risk['volatility']:.2f}%")
    
    # –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    liquidity = report['liquidity_analysis']
    if 'average_daily_volume' in liquidity:
        print(f"\nüíß –õ–ò–ö–í–ò–î–ù–û–°–¢–¨:")
        print(f"   –°—Ä–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π –æ–±—ä–µ–º: {liquidity['average_daily_volume']:,.0f}")
        
        if 'most_liquid' in liquidity:
            liquid = liquidity['most_liquid']
            print(f"   üåä –°–∞–º—ã–π –ª–∏–∫–≤–∏–¥–Ω—ã–π: {liquid['ticker']} - {liquid['volume']:,.0f}")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π
    costs = report['cost_analysis']
    if 'average_expense_ratio' in costs:
        print(f"\nüí∏ –ö–û–ú–ò–°–°–ò–ò:")
        print(f"   –°—Ä–µ–¥–Ω—è—è –∫–æ–º–∏—Å—Å–∏—è: {costs['average_expense_ratio']:.2f}%")
        
        if 'lowest_cost' in costs:
            low_cost = costs['lowest_cost']
            print(f"   üí∞ –°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π: {low_cost['ticker']} - {low_cost['expense_ratio']:.2f}%")
        
        if 'highest_cost' in costs:
            high_cost = costs['highest_cost']
            print(f"   üí∏ –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π: {high_cost['ticker']} - {high_cost['expense_ratio']:.2f}%")
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    quality = report['data_quality_report']
    print(f"\nüìä –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–•:")
    print(f"   –ó–∞–ø–∏—Å–µ–π —Å —Ü–µ–Ω–∞–º–∏: {quality['records_with_price_data']}/{quality['total_records']}")
    print(f"   –ó–∞–ø–∏—Å–µ–π —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é: {quality['records_with_return_data']}/{quality['total_records']}")
    print(f"   –ó–∞–ø–∏—Å–µ–π —Å –æ–±—ä–µ–º–∞–º–∏: {quality['records_with_volume_data']}/{quality['total_records']}")
    print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {quality['fallback_usage']['primary_source_usage']}")
    print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {quality['fallback_usage']['secondary_source_usage']}")


def create_visualizations(df, timestamp):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π"""
    try:
        import matplotlib.pyplot as plt
        import seaborn as sns
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        plt.style.use('default')
        sns.set_palette("husl")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('–ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ë–ü–ò–§–æ–≤', fontsize=16, fontweight='bold')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ –ë–ü–ò–§–∞–º
        valid_returns = df[df['annual_return'].notna()]
        if len(valid_returns) > 0:
            axes[0, 0].bar(valid_returns['ticker'], valid_returns['annual_return'])
            axes[0, 0].set_title('–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ë–ü–ò–§–æ–≤ (%)')
            axes[0, 0].set_xlabel('–¢–∏–∫–µ—Ä')
            axes[0, 0].set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
            axes[0, 0].tick_params(axis='x', rotation=45)
        else:
            axes[0, 0].text(0.5, 0.5, '–î–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏\n–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 
                           ha='center', va='center', transform=axes[0, 0].transAxes)
            axes[0, 0].set_title('–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ë–ü–ò–§–æ–≤ (%)')
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –†—ã–Ω–æ—á–Ω—ã–µ –¥–æ–ª–∏ –£–ö
        valid_shares = df[df['market_share_percent'].notna()]
        if len(valid_shares) > 0:
            uk_shares = valid_shares.groupby('management_company')['market_share_percent'].first()
            axes[0, 1].pie(uk_shares.values, labels=uk_shares.index, autopct='%1.1f%%')
            axes[0, 1].set_title('–†—ã–Ω–æ—á–Ω—ã–µ –¥–æ–ª–∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π')
        else:
            axes[0, 1].text(0.5, 0.5, '–î–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–æ—á–Ω—ã—Ö\n–¥–æ–ª—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 
                           ha='center', va='center', transform=axes[0, 1].transAxes)
            axes[0, 1].set_title('–†—ã–Ω–æ—á–Ω—ã–µ –¥–æ–ª–∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π')
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å vs –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        valid_risk_return = df[(df['annual_return'].notna()) & (df['volatility'].notna())]
        if len(valid_risk_return) > 0:
            scatter = axes[1, 0].scatter(valid_risk_return['volatility'], 
                                       valid_risk_return['annual_return'],
                                       alpha=0.7, s=100)
            axes[1, 0].set_xlabel('–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)')
            axes[1, 0].set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
            axes[1, 0].set_title('–†–∏—Å–∫ vs –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ —Ç–∏–∫–µ—Ä–æ–≤
            for idx, row in valid_risk_return.iterrows():
                axes[1, 0].annotate(row['ticker'], 
                                  (row['volatility'], row['annual_return']),
                                  xytext=(5, 5), textcoords='offset points', fontsize=8)
        else:
            axes[1, 0].text(0.5, 0.5, '–î–∞–Ω–Ω—ã–µ –æ —Ä–∏—Å–∫–µ –∏\n–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 
                           ha='center', va='center', transform=axes[1, 0].transAxes)
            axes[1, 0].set_title('–†–∏—Å–∫ vs –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å')
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –ö–æ–º–∏—Å—Å–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        valid_costs = df[df['expense_ratio'].notna()]
        if len(valid_costs) > 0:
            category_costs = valid_costs.groupby('category')['expense_ratio'].mean()
            axes[1, 1].bar(range(len(category_costs)), category_costs.values)
            axes[1, 1].set_title('–°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (%)')
            axes[1, 1].set_xlabel('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
            axes[1, 1].set_ylabel('–ö–æ–º–∏—Å—Å–∏—è (%)')
            axes[1, 1].set_xticks(range(len(category_costs)))
            axes[1, 1].set_xticklabels(category_costs.index, rotation=45, ha='right')
        else:
            axes[1, 1].text(0.5, 0.5, '–î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∏—Å—Å–∏—è—Ö\n–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 
                           ha='center', va='center', transform=axes[1, 1].transAxes)
            axes[1, 1].set_title('–°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (%)')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        chart_file = f'etf_analysis_charts_{timestamp}.png'
        plt.savefig(chart_file, dpi=300, bbox_inches='tight')
        plt.close()
        
        logger.info(f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {chart_file}")
        
    except ImportError:
        logger.warning("Matplotlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π: {e}")


if __name__ == "__main__":
    main()