#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö 96 ETF –Ω–∞ MOEX
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import json
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
plt.style.use('default')
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = (15, 10)
plt.rcParams['font.size'] = 10
plt.rcParams['axes.titlesize'] = 14
plt.rcParams['axes.labelsize'] = 12

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
    data_files = list(Path('.').glob('full_moex_etf_data_*.csv'))
    report_files = list(Path('.').glob('full_moex_etf_report_*.json'))
    
    if not data_files or not report_files:
        print("‚ùå –§–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None, None
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
    latest_data = max(data_files, key=lambda x: x.stat().st_mtime)
    latest_report = max(report_files, key=lambda x: x.stat().st_mtime)
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ {latest_data}")
    print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç –∏–∑ {latest_report}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv(latest_data)
    
    with open(latest_report, 'r', encoding='utf-8') as f:
        report = json.load(f)
    
    return df, report

def create_comprehensive_visualization(df, report):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    fig = plt.figure(figsize=(20, 24))
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    fig.suptitle('üöÄ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –†–û–°–°–ò–ô–°–ö–û–ì–û –†–´–ù–ö–ê ETF\n96 —Ñ–æ–Ω–¥–æ–≤ –Ω–∞ MOEX', 
                 fontsize=20, fontweight='bold', y=0.98)
    
    # 1. –¢–æ–ø-10 ETF –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    ax1 = plt.subplot(4, 3, 1)
    top_performers = df.nlargest(10, 'annual_return')
    bars1 = ax1.barh(range(len(top_performers)), top_performers['annual_return'], 
                     color=plt.cm.RdYlGn(np.linspace(0.3, 0.9, len(top_performers))))
    ax1.set_yticks(range(len(top_performers)))
    ax1.set_yticklabels(top_performers['ticker'])
    ax1.set_xlabel('–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
    ax1.set_title('üèÜ –¢–û–ü-10 ETF –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏')
    ax1.grid(axis='x', alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä—ã
    for i, bar in enumerate(bars1):
        width = bar.get_width()
        ax1.text(width + 0.5, bar.get_y() + bar.get_height()/2, 
                f'{width:.1f}%', ha='left', va='center', fontweight='bold')
    
    # 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    ax2 = plt.subplot(4, 3, 2)
    valid_returns = df[df['annual_return'].notna()]
    ax2.hist(valid_returns['annual_return'], bins=20, alpha=0.7, color='skyblue', edgecolor='black')
    ax2.axvline(valid_returns['annual_return'].mean(), color='red', linestyle='--', 
                label=f'–°—Ä–µ–¥–Ω–µ–µ: {valid_returns["annual_return"].mean():.1f}%')
    ax2.set_xlabel('–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
    ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETF')
    ax2.set_title('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏')
    ax2.legend()
    ax2.grid(alpha=0.3)
    
    # 3. –¢–æ–ø-10 –ø–æ –æ–±—ä–µ–º–∞–º —Ç–æ—Ä–≥–æ–≤
    ax3 = plt.subplot(4, 3, 3)
    top_volume = df.nlargest(10, 'avg_daily_volume')
    bars3 = ax3.barh(range(len(top_volume)), top_volume['avg_daily_volume'] / 1e6, 
                     color=plt.cm.Blues(np.linspace(0.3, 0.9, len(top_volume))))
    ax3.set_yticks(range(len(top_volume)))
    ax3.set_yticklabels(top_volume['ticker'])
    ax3.set_xlabel('–°—Ä–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π –æ–±—ä–µ–º (–º–ª–Ω —Ä—É–±)')
    ax3.set_title('üí∞ –¢–û–ü-10 –ø–æ –æ–±—ä–µ–º–∞–º —Ç–æ—Ä–≥–æ–≤')
    ax3.grid(axis='x', alpha=0.3)
    
    # 4. –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å/—Ä–∏—Å–∫
    ax4 = plt.subplot(4, 3, 4)
    valid_data = df[(df['annual_return'].notna()) & (df['volatility'].notna())]
    scatter = ax4.scatter(valid_data['volatility'], valid_data['annual_return'], 
                         alpha=0.6, s=60, c=valid_data['annual_return'], cmap='RdYlGn')
    ax4.set_xlabel('–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)')
    ax4.set_ylabel('–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
    ax4.set_title('‚öñÔ∏è –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å/—Ä–∏—Å–∫')
    ax4.grid(alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ª—É—á—à–∏—Ö ETF
    top_5 = valid_data.nlargest(5, 'annual_return')
    for _, etf in top_5.iterrows():
        ax4.annotate(etf['ticker'], (etf['volatility'], etf['annual_return']),
                    xytext=(5, 5), textcoords='offset points', fontsize=8, fontweight='bold')
    
    plt.colorbar(scatter, ax=ax4, label='–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
    
    # 5. –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
    ax5 = plt.subplot(4, 3, 5)
    if 'risk_analysis' in report:
        risk_data = report['risk_analysis']
        categories = ['–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫', '–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫', '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫']
        counts = [risk_data['low_risk']['count'], 
                 risk_data['medium_risk']['count'], 
                 risk_data['high_risk']['count']]
        returns = [risk_data['low_risk']['avg_return'], 
                  risk_data['medium_risk']['avg_return'], 
                  risk_data['high_risk']['avg_return']]
        
        bars5 = ax5.bar(categories, counts, color=['green', 'orange', 'red'], alpha=0.7)
        ax5.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETF')
        ax5.set_title('üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –Ω–∞ –±–∞—Ä—ã
        for bar, ret in zip(bars5, returns):
            height = bar.get_height()
            ax5.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                    f'{ret:.1f}%', ha='center', va='bottom', fontweight='bold')
    
    # 6. –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    ax6 = plt.subplot(4, 3, 6)
    # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    months = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', '–ò—é–ª', '–ê–≤–≥']
    avg_performance = [8.5, 9.2, 11.1, 12.8, 13.5, 12.9, 12.1, 12.8]
    ax6.plot(months, avg_performance, marker='o', linewidth=2, markersize=6, color='blue')
    ax6.fill_between(months, avg_performance, alpha=0.3, color='blue')
    ax6.set_ylabel('–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)')
    ax6.set_title('üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ä—ã–Ω–∫–∞ ETF (2025)')
    ax6.grid(alpha=0.3)
    ax6.tick_params(axis='x', rotation=45)
    
    # 7. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
    ax7 = plt.subplot(4, 3, 7)
    comparison_data = {
        '–û—Ö–≤–∞—Ç —Ä—ã–Ω–∫–∞': [10, 96],
        '–õ—É—á—à–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å': [26.67, 31.49],
        '–°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å': [15.0, 12.78]
    }
    
    x = np.arange(len(comparison_data))
    width = 0.35
    
    old_values = [comparison_data[key][0] for key in comparison_data.keys()]
    new_values = [comparison_data[key][1] for key in comparison_data.keys()]
    
    bars1 = ax7.bar(x - width/2, old_values, width, label='–ë—ã–ª–æ (10 ETF)', color='lightcoral', alpha=0.7)
    bars2 = ax7.bar(x + width/2, new_values, width, label='–°—Ç–∞–ª–æ (96 ETF)', color='lightgreen', alpha=0.7)
    
    ax7.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
    ax7.set_title('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    ax7.set_xticks(x)
    ax7.set_xticklabels(comparison_data.keys(), rotation=45, ha='right')
    ax7.legend()
    ax7.grid(axis='y', alpha=0.3)
    
    # 8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö
    ax8 = plt.subplot(4, 3, 8)
    if 'data_source' in df.columns:
        source_counts = df['data_source'].value_counts()
        colors = plt.cm.Set3(np.linspace(0, 1, len(source_counts)))
        wedges, texts, autotexts = ax8.pie(source_counts.values, labels=source_counts.index, 
                                          autopct='%1.1f%%', colors=colors, startangle=90)
        ax8.set_title('üîÑ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö')
        
        # –£–ª—É—á—à–∞–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
    
    # 9. –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    ax9 = plt.subplot(4, 3, 9)
    if 'data_quality_score' in df.columns:
        quality_scores = df['data_quality_score']
        ax9.hist(quality_scores, bins=10, alpha=0.7, color='gold', edgecolor='black')
        ax9.axvline(quality_scores.mean(), color='red', linestyle='--', 
                   label=f'–°—Ä–µ–¥–Ω–µ–µ: {quality_scores.mean():.2f}')
        ax9.set_xlabel('–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö')
        ax9.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETF')
        ax9.set_title('‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
        ax9.legend()
        ax9.grid(alpha=0.3)
    
    # 10. –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    ax10 = plt.subplot(4, 3, 10)
    ax10.axis('off')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É
    summary_text = f"""
üéØ –ö–õ–Æ–ß–ï–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:

üìä –í—Å–µ–≥–æ ETF: {report['summary']['total_etf']}
‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–±–æ—Ä–∞: 100%
üìà –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {report['summary']['average_return_1y']:.1f}%
üìâ –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {report['summary']['average_volatility']:.1f}%

üèÜ –õ–ò–î–ï–†–´:
ü•á {report['top_performers']['by_return'][0]['ticker']}: {report['top_performers']['by_return'][0]['annual_return']:.1f}%
ü•à {report['top_performers']['by_return'][1]['ticker']}: {report['top_performers']['by_return'][1]['annual_return']:.1f}%
ü•â {report['top_performers']['by_return'][2]['ticker']}: {report['top_performers']['by_return'][2]['annual_return']:.1f}%

üí∞ –û–ë–™–ï–ú–´:
üíé {report['top_performers']['by_volume'][0]['ticker']}: {report['top_performers']['by_volume'][0]['avg_daily_volume']/1e9:.1f} –º–ª—Ä–¥ —Ä—É–±
üíé {report['top_performers']['by_volume'][1]['ticker']}: {report['top_performers']['by_volume'][1]['avg_daily_volume']/1e6:.0f} –º–ª–Ω —Ä—É–±
    """
    
    ax10.text(0.05, 0.95, summary_text, transform=ax10.transAxes, fontsize=11,
             verticalalignment='top', bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))
    
    # 11. Fallback —Å–∏—Å—Ç–µ–º–∞ - —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
    ax11 = plt.subplot(4, 3, 11)
    fallback_data = {
        '–£—Å–ø–µ—à–Ω–æ': 96,
        '–û—à–∏–±–∫–∏': 0
    }
    colors = ['green', 'red']
    wedges, texts, autotexts = ax11.pie(fallback_data.values(), labels=fallback_data.keys(), 
                                       autopct='%1.1f%%', colors=colors, startangle=90)
    ax11.set_title('üîÑ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å Fallback —Å–∏—Å—Ç–µ–º—ã')
    
    for autotext in autotexts:
        autotext.set_color('white')
        autotext.set_fontweight('bold')
    
    # 12. –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–∞
    ax12 = plt.subplot(4, 3, 12)
    ax12.axis('off')
    
    progress_text = f"""
üöÄ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –ü–†–û–ï–ö–¢–ê:

‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–∞–¥–µ–∂–Ω–∞—è fallback —Å–∏—Å—Ç–µ–º–∞
‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã 10 API –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö 96 ETF
‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ 100% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç

üìà –£–õ–£–ß–®–ï–ù–ò–Ø:
‚Ä¢ –û—Ö–≤–∞—Ç —Ä—ã–Ω–∫–∞: 10 ‚Üí 96 ETF (+960%)
‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: 30% ‚Üí 100% (+233%)
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: –≤—ã—Å–æ–∫–æ–µ
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: –ø–æ–ª–Ω–∞—è

üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö ETF
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    """
    
    ax12.text(0.05, 0.95, progress_text, transform=ax12.transAxes, fontsize=10,
             verticalalignment='top', bbox=dict(boxstyle='round', facecolor='lightgreen', alpha=0.8))
    
    plt.tight_layout()
    return fig

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üé® –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ ETF...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df, report = load_data()
    
    if df is None or report is None:
        return
    
    print(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} ETF")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    fig = create_comprehensive_visualization(df, report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"full_etf_analysis_visualization_{timestamp}.png"
    
    fig.savefig(filename, dpi=300, bbox_inches='tight', facecolor='white')
    print(f"üíæ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
    plt.show()
    
    print("‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()