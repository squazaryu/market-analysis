#!/usr/bin/env python3
"""
–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ë–ü–ò–§ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –¶–ë —Å —Ç–∏–∫–µ—Ä–∞–º–∏ –Ω–∞ MOEX
"""

import pandas as pd
import requests
import re
from pathlib import Path
import time

def get_moex_etf_list():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö ETF —Å MOEX"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö ETF —Å MOEX
        url = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQTF/securities.json"
        
        print("üìä –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ETF —Å MOEX...")
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        securities = data['securities']['data']
        columns = data['securities']['columns']
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        moex_etf = pd.DataFrame(securities, columns=columns)
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(moex_etf)} ETF —Å MOEX")
        
        return moex_etf
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö MOEX: {e}")
        return None

def load_cbr_bpif():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ë–ü–ò–§ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –¶–ë"""
    
    file_path = Path("bpif_structured_data.csv")
    
    if not file_path.exists():
        print("‚ùå –§–∞–π–ª —Å –ë–ü–ò–§ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ extract_bpif_details.py")
        return None
    
    try:
        df = pd.read_csv(file_path, encoding='utf-8')
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –ë–ü–ò–§ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –¶–ë")
        return df
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–ü–ò–§: {e}")
        return None

def extract_fund_names(cbr_df):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–æ–Ω–¥–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¶–ë"""
    
    fund_names = []
    
    for idx, row in cbr_df.iterrows():
        fund_info = {
            'cbr_id': row.get('id', idx),
            'registry_number': row.get('Unnamed: 6', ''),
            'short_name': row.get('Unnamed: 4', ''),
            'full_name': row.get('Unnamed: 3', ''),
            'status': row.get('Unnamed: 2', ''),
            'management_company': row.get('–£–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è (–£–ö)', ''),
            'formation_date': row.get('Unnamed: 7', ''),
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        keywords = []
        
        if fund_info['short_name']:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            name = str(fund_info['short_name']).lower()
            
            # –ò—â–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if '–∏–Ω–¥–µ–∫—Å –º–æ—Å–±–∏—Ä–∂–∏' in name:
                if '–ø–æ–ª–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏' in name:
                    keywords.append('SBMX')
                elif '–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π' in name:
                    keywords.append('SBGB')
                elif '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π' in name:
                    keywords.append('SBCB')
                elif '—Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –µ–≤—Ä–æ–æ–±–ª–∏–≥–∞—Ü–∏–π' in name:
                    keywords.append('SBRB')
            
            # –ò—â–µ–º –ø–æ —É–ø—Ä–∞–≤–ª—è—é—â–∏–º –∫–æ–º–ø–∞–Ω–∏—è–º
            if '—Å–±–µ—Ä' in name or '—Å–±–µ—Ä–±–∞–Ω–∫' in name:
                keywords.extend(['SB', 'SBER'])
            elif '–≤—Ç–±' in name:
                keywords.extend(['VTB'])
            elif '–≥–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫' in name:
                keywords.extend(['GPB'])
            elif '—Ç–∏–Ω—å–∫–æ—Ñ—Ñ' in name or '—Ç-–∫–∞–ø–∏—Ç–∞–ª' in name:
                keywords.extend(['TINK', 'TCAP'])
            elif '–ø–µ—Ä–≤–∞—è' in name:
                keywords.extend(['FIRST'])
        
        fund_info['search_keywords'] = keywords
        fund_names.append(fund_info)
    
    return fund_names

def match_with_moex(cbr_funds, moex_etf):
    """–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ë–ü–ò–§ —Å —Ç–∏–∫–µ—Ä–∞–º–∏ MOEX"""
    
    matches = []
    unmatched_cbr = []
    unmatched_moex = list(moex_etf['SECID'].values)
    
    print(f"\nüîç –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º {len(cbr_funds)} –ë–ü–ò–§ —Å {len(moex_etf)} ETF MOEX...")
    
    for fund in cbr_funds:
        matched = False
        best_match = None
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–æ–Ω–¥—ã
        if fund['status'] == '–ò—Å–∫–ª—é—á—ë–Ω –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞':
            continue
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for keyword in fund['search_keywords']:
            for _, etf in moex_etf.iterrows():
                ticker = etf['SECID']
                name = str(etf.get('SHORTNAME', '')).lower()
                
                if keyword.lower() in ticker.lower() or keyword.lower() in name:
                    match_info = {
                        'cbr_id': fund['cbr_id'],
                        'cbr_registry_number': fund['registry_number'],
                        'cbr_short_name': fund['short_name'],
                        'cbr_full_name': fund['full_name'],
                        'cbr_management_company': fund['management_company'],
                        'moex_ticker': ticker,
                        'moex_name': etf.get('SHORTNAME', ''),
                        'moex_full_name': etf.get('SECNAME', ''),
                        'match_method': f'keyword: {keyword}',
                        'confidence': 'high' if keyword.lower() == ticker.lower() else 'medium'
                    }
                    
                    matches.append(match_info)
                    matched = True
                    
                    if ticker in unmatched_moex:
                        unmatched_moex.remove(ticker)
                    
                    break
            
            if matched:
                break
        
        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º (fuzzy matching)
        if not matched:
            fund_name = str(fund['short_name']).lower()
            
            for _, etf in moex_etf.iterrows():
                ticker = etf['SECID']
                etf_name = str(etf.get('SHORTNAME', '')).lower()
                
                # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –æ–±—â–∏–º —Å–ª–æ–≤–∞–º
                fund_words = set(re.findall(r'\b\w+\b', fund_name))
                etf_words = set(re.findall(r'\b\w+\b', etf_name))
                
                common_words = fund_words.intersection(etf_words)
                
                if len(common_words) >= 2:  # –ú–∏–Ω–∏–º—É–º 2 –æ–±—â–∏—Ö —Å–ª–æ–≤–∞
                    match_info = {
                        'cbr_id': fund['cbr_id'],
                        'cbr_registry_number': fund['registry_number'],
                        'cbr_short_name': fund['short_name'],
                        'cbr_full_name': fund['full_name'],
                        'cbr_management_company': fund['management_company'],
                        'moex_ticker': ticker,
                        'moex_name': etf.get('SHORTNAME', ''),
                        'moex_full_name': etf.get('SECNAME', ''),
                        'match_method': f'name similarity: {common_words}',
                        'confidence': 'low'
                    }
                    
                    matches.append(match_info)
                    matched = True
                    
                    if ticker in unmatched_moex:
                        unmatched_moex.remove(ticker)
                    
                    break
        
        if not matched:
            unmatched_cbr.append(fund)
    
    return matches, unmatched_cbr, unmatched_moex

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    cbr_df = load_cbr_bpif()
    if cbr_df is None:
        return
    
    moex_etf = get_moex_etf_list()
    if moex_etf is None:
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–æ–Ω–¥–æ–≤
    cbr_funds = extract_fund_names(cbr_df)
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º
    matches, unmatched_cbr, unmatched_moex = match_with_moex(cbr_funds, moex_etf)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:")
    print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
    print(f"   ‚Ä¢ –ë–ü–ò–§ –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(unmatched_cbr)}")
    print(f"   ‚Ä¢ ETF MOEX –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(unmatched_moex)}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    if matches:
        matches_df = pd.DataFrame(matches)
        matches_file = "bpif_moex_matches.csv"
        matches_df.to_csv(matches_file, index=False, encoding='utf-8')
        print(f"\nüíæ –°–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {matches_file}")
        
        print(f"\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:")
        for match in matches[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"   ‚Ä¢ {match['moex_ticker']}: {match['cbr_short_name'][:60]}...")
        
        if len(matches) > 10:
            print(f"   ... –∏ –µ—â–µ {len(matches) - 10} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏–µ –ë–ü–ò–§
    if unmatched_cbr:
        unmatched_df = pd.DataFrame(unmatched_cbr)
        unmatched_file = "unmatched_bpif.csv"
        unmatched_df.to_csv(unmatched_file, index=False, encoding='utf-8')
        print(f"\nüíæ –ù–µ—Å–æ–≤–ø–∞–≤—à–∏–µ –ë–ü–ò–§ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {unmatched_file}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏–µ ETF MOEX
    if unmatched_moex:
        print(f"\nüìã ETF MOEX –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ –¶–ë:")
        moex_unmatched = moex_etf[moex_etf['SECID'].isin(unmatched_moex)]
        for _, etf in moex_unmatched.head(10).iterrows():
            print(f"   ‚Ä¢ {etf['SECID']}: {etf.get('SHORTNAME', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        if len(unmatched_moex) > 10:
            print(f"   ... –∏ –µ—â–µ {len(unmatched_moex) - 10} ETF")
    
    print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    print(f"üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print(f"   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª bpif_moex_matches.csv")
    print(f"   2. –û–±–Ω–æ–≤–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤")
    print(f"   3. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö {len(matches)} –ë–ü–ò–§")

if __name__ == "__main__":
    main()