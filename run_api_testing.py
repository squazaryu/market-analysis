"""
–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import sys
import os
sys.path.append('/Users/tumowuh/Desktop/market analysis')

from api_research import APIResearcher
from logger_config import logger
import json
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

def create_api_testing_visualization(results, recommendations):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    plt.rcParams['font.family'] = ['Arial Unicode MS', 'DejaVu Sans', 'sans-serif']
    plt.rcParams['axes.unicode_minus'] = False
    
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API –ò–°–¢–û–ß–ù–ò–ö–û–í –î–ê–ù–ù–´–•',
                 fontsize=16, fontweight='bold', y=0.98)
    
    # 1. –°—Ç–∞—Ç—É—Å API –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    ax1 = axes[0, 0]
    status_counts = {}
    
    for api_name, api_data in results['apis'].items():
        status = api_data['status']
        if status == 'active':
            category = '–ê–∫—Ç–∏–≤–Ω—ã–µ'
        elif status in ['limited_public', 'requires_token', 'web_interface_available']:
            category = '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ'
        else:
            category = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ'
        
        status_counts[category] = status_counts.get(category, 0) + 1
    
    colors = ['#2ecc71', '#f39c12', '#e74c3c']
    wedges, texts, autotexts = ax1.pie(status_counts.values(),
                                      labels=status_counts.keys(),
                                      autopct='%1.1f%%',
                                      colors=colors,
                                      startangle=90)
    ax1.set_title('–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤', fontweight='bold')
    
    # 2. –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ API
    ax2 = axes[0, 1]
    api_names = []
    quality_scores = []
    
    for api_name, api_data in results['apis'].items():
        if api_data['status'] not in ['error', 'critical_error']:
            api_names.append(api_name.upper())
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            capabilities = api_data.get('capabilities', {})
            if isinstance(capabilities, dict):
                score = len([v for v in capabilities.values() if v is True]) * 10
                quality_scores.append(min(score, 100))
            else:
                quality_scores.append(50)
    
    if api_names and quality_scores:
        bars = ax2.barh(api_names, quality_scores,
                       color=plt.cm.RdYlGn([q/100 for q in quality_scores]))
        ax2.set_xlabel('–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ API (%)')
        ax2.set_title('–ö–∞—á–µ—Å—Ç–≤–æ API –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤', fontweight='bold')
        ax2.set_xlim(0, 100)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for i, bar in enumerate(bars):
            width = bar.get_width()
            ax2.text(width + 2, bar.get_y() + bar.get_height()/2,
                    f'{int(width)}%', ha='left', va='center')
    
    # 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    ax3 = axes[1, 0]
    
    recommendation_data = {
        '–û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏': len(recommendations['primary_sources']),
        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏': len(recommendations['secondary_sources']),
        '–ò–∑–±–µ–≥–∞—Ç—å': len(recommendations['avoid'])
    }
    
    bars = ax3.bar(recommendation_data.keys(), recommendation_data.values(),
                   color=['#2ecc71', '#3498db', '#e74c3c'])
    ax3.set_title('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é', fontweight='bold')
    ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ API')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar in bars:
        height = bar.get_height()
        ax3.text(bar.get_x() + bar.get_width()/2., height,
                f'{int(height)}', ha='center', va='bottom')
    
    # 4. –ü–æ–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö
    ax4 = axes[1, 1]
    
    data_types = {
        '–¢–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ': 0,
        '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ': 0,
        '–†–µ–∞–ª-—Ç–∞–π–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏': 0,
        '–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞': 0,
        '–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ': 0
    }
    
    for api_name, api_data in results['apis'].items():
        if api_data['status'] in ['active', 'limited_public', 'requires_token']:
            capabilities = api_data.get('capabilities', {})
            
            if capabilities.get('trading_volumes') or capabilities.get('historical_data'):
                data_types['–¢–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'] += 1
            if capabilities.get('historical_data') or capabilities.get('historical_candles'):
                data_types['–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ'] += 1
            if capabilities.get('real_time_data') or capabilities.get('real_time_quotes'):
                data_types['–†–µ–∞–ª-—Ç–∞–π–º –∫–æ—Ç–∏—Ä–æ–≤–∫–∏'] += 1
            if capabilities.get('currency_rates') or capabilities.get('economic_data'):
                data_types['–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞'] += 1
            if capabilities.get('fundamental_data'):
                data_types['–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'] += 1
    
    bars = ax4.bar(range(len(data_types)), list(data_types.values()),
                   color=plt.cm.viridis([i/len(data_types) for i in range(len(data_types))]))
    ax4.set_xticks(range(len(data_types)))
    ax4.set_xticklabels([key.replace(' ', '\n') for key in data_types.keys()],
                       rotation=0, fontsize=9)
    ax4.set_title('–ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö', fontweight='bold')
    ax4.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ API')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, bar in enumerate(bars):
        height = bar.get_height()
        ax4.text(bar.get_x() + bar.get_width()/2., height,
                f'{int(height)}', ha='center', va='bottom')
    
    plt.tight_layout()
    plt.subplots_adjust(top=0.93)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    output_path = '/Users/tumowuh/Desktop/market analysis/api_testing_results.png'
    plt.savefig(output_path, dpi=300, bbox_inches='tight', facecolor='white')
    logger.info(f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
    
    plt.show()
    return fig

def generate_detailed_report(results, recommendations):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    report_lines = []
    report_lines.append("# –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API –ò–°–¢–û–ß–ù–ò–ö–û–í –î–ê–ù–ù–´–•")
    report_lines.append(f"*–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}*")
    report_lines.append("")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    summary = results['summary']
    report_lines.append("## üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    report_lines.append("")
    report_lines.append(f"- **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ API:** {results['total_apis_tested']}")
    report_lines.append(f"- **–ê–∫—Ç–∏–≤–Ω—ã—Ö:** {summary['active_apis']}")
    report_lines.append(f"- **–° –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏:** {summary['limited_apis']}")
    report_lines.append(f"- **–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö:** {summary['error_apis']}")
    report_lines.append(f"- **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {summary['success_rate']}%")
    report_lines.append("")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É API
    report_lines.append("## üîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    report_lines.append("")
    
    for api_name, api_data in results['apis'].items():
        report_lines.append(f"### {api_data['name']}")
        report_lines.append("")
        report_lines.append(f"**–°—Ç–∞—Ç—É—Å:** {api_data['status']}")
        report_lines.append(f"**URL:** {api_data.get('base_url', 'N/A')}")
        report_lines.append(f"**–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:** {api_data.get('data_quality', 'unknown')}")
        report_lines.append("")
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        capabilities = api_data.get('capabilities', {})
        if capabilities:
            report_lines.append("**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**")
            for key, value in capabilities.items():
                if value is True:
                    report_lines.append(f"- ‚úÖ {key.replace('_', ' ').title()}")
                elif value not in [False, None]:
                    report_lines.append(f"- üìä {key.replace('_', ' ').title()}: {value}")
            report_lines.append("")
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        limitations = api_data.get('limitations', {})
        if limitations:
            report_lines.append("**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**")
            for key, value in limitations.items():
                if value is True:
                    report_lines.append(f"- ‚ö†Ô∏è {key.replace('_', ' ').title()}")
                elif value not in [False, None]:
                    report_lines.append(f"- üìù {key.replace('_', ' ').title()}: {value}")
            report_lines.append("")
        
        # –û—à–∏–±–∫–∏
        if 'error' in api_data:
            report_lines.append(f"**–û—à–∏–±–∫–∞:** {api_data['error']}")
            report_lines.append("")
        
        report_lines.append("---")
        report_lines.append("")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    report_lines.append("## üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    report_lines.append("")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    if recommendations['primary_sources']:
        report_lines.append("### ‚úÖ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
        report_lines.append("")
        for source in recommendations['primary_sources']:
            report_lines.append(f"**{source['name']}**")
            strengths = source.get('strengths', {})
            if strengths:
                report_lines.append("- –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:")
                for key, value in strengths.items():
                    if value is True:
                        report_lines.append(f"  - {key.replace('_', ' ').title()}")
            report_lines.append("")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    if recommendations['secondary_sources']:
        report_lines.append("### üî∂ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò")
        report_lines.append("")
        for source in recommendations['secondary_sources']:
            report_lines.append(f"**{source['name']}** *(–î–æ—Å—Ç—É–ø: {source['access_method']})*")
            potential = source.get('potential', {})
            if potential:
                report_lines.append("- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª:")
                for key, value in potential.items():
                    if value is True:
                        report_lines.append(f"  - {key.replace('_', ' ').title()}")
            report_lines.append("")
    
    # –ò–∑–±–µ–≥–∞—Ç—å
    if recommendations['avoid']:
        report_lines.append("### ‚ùå –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï")
        report_lines.append("")
        for source in recommendations['avoid']:
            report_lines.append(f"**{source['name']}** - {source['reason']}")
        report_lines.append("")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_path = f"/Users/tumowuh/Desktop/market analysis/api_testing_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write('\n'.join(report_lines))
    
    logger.info(f"–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    return report_path

def print_summary_to_console(results, recommendations):
    """
    –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    """
    print("\n" + "="*80)
    print("üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API –ò–°–¢–û–ß–ù–ò–ö–û–í –î–ê–ù–ù–´–•")
    print("="*80)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    summary = results['summary']
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ API: {results['total_apis_tested']}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {summary['active_apis']}")
    print(f"   –° –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏: {summary['limited_apis']}")
    print(f"   –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {summary['error_apis']}")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate']}%")
    
    # –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ API
    print(f"\nüîç –°–¢–ê–¢–£–° API:")
    for api_name, api_data in results['apis'].items():
        status = api_data['status']
        name = api_data['name']
        
        if status == 'active':
            emoji = "‚úÖ"
        elif status in ['limited_public', 'requires_token', 'web_interface_available']:
            emoji = "üî∂"
        else:
            emoji = "‚ùå"
        
        print(f"   {emoji} {name:<30} - {status}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if recommendations['primary_sources']:
        print(f"   ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(recommendations['primary_sources'])}):")
        for source in recommendations['primary_sources']:
            print(f"      - {source['name']}")
    
    if recommendations['secondary_sources']:
        print(f"   üî∂ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(recommendations['secondary_sources'])}):")
        for source in recommendations['secondary_sources']:
            print(f"      - {source['name']} ({source['access_method']})")
    
    if recommendations['avoid']:
        print(f"   ‚ùå –ò–∑–±–µ–≥–∞—Ç—å ({len(recommendations['avoid'])}):")
        for source in recommendations['avoid']:
            print(f"      - {source['name']}")
    
    print("\n" + "="*80)

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
    """
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API –ò–°–¢–û–ß–ù–ò–ö–û–í –î–ê–ù–ù–´–•...")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å API
        researcher = APIResearcher()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        print("üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        results = researcher.run_comprehensive_research()
        
        print("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
        recommendations = researcher.generate_recommendations(results)
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤ –∫–æ–Ω—Å–æ–ª—å
        print_summary_to_console(results, recommendations)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        create_api_testing_visualization(results, recommendations)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        report_path = generate_detailed_report(results, recommendations)
        
        print(f"\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print(f"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: api_testing_results.png")
        print(f"üìù –û—Ç—á–µ—Ç: {report_path}")
        print(f"üìà JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        
        return results, recommendations
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}", exc_info=True)
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None, None

if __name__ == "__main__":
    main()