#!/usr/bin/env python3
"""
–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö MOEX API –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
"""

import requests
import pandas as pd
from datetime import datetime, timedelta
import time

def test_moex_data_limits():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ MOEX API"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–∏–∫–µ—Ä—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ë–ü–ò–§
    test_tickers = ['TMOS', 'SBGB', 'RUSE', 'VTBG', 'AKMM']
    
    print("üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö MOEX API...")
    
    for ticker in test_tickers:
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {ticker}:")
        
        # –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞ 2 –≥–æ–¥–∞
        test_periods = [
            (365, "1 –≥–æ–¥"),
            (730, "2 –≥–æ–¥–∞"), 
            (1095, "3 –≥–æ–¥–∞"),
            (1460, "4 –≥–æ–¥–∞"),
            (1825, "5 –ª–µ—Ç")
        ]
        
        for days, description in test_periods:
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days)
            
            url = f"https://iss.moex.com/iss/engines/stock/markets/shares/securities/{ticker}/candles.json"
            params = {
                'from': start_date.strftime('%Y-%m-%d'),
                'till': end_date.strftime('%Y-%m-%d'),
                'interval': 24
            }
            
            try:
                response = requests.get(url, params=params, timeout=10)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if 'candles' in data and 'data' in data['candles']:
                        candles_data = data['candles']['data']
                        data_points = len(candles_data)
                        
                        if data_points > 0:
                            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É
                            columns = data['candles']['columns']
                            df = pd.DataFrame(candles_data, columns=columns)
                            
                            if 'begin' in df.columns:
                                df['begin'] = pd.to_datetime(df['begin'])
                                first_date = df['begin'].min()
                                last_date = df['begin'].max()
                                actual_days = (last_date - first_date).days
                                
                                print(f"   ‚úÖ {description}: {data_points} —Ç–æ—á–µ–∫, —Å {first_date.strftime('%Y-%m-%d')} –ø–æ {last_date.strftime('%Y-%m-%d')} ({actual_days} –¥–Ω–µ–π)")
                            else:
                                print(f"   ‚úÖ {description}: {data_points} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
                        else:
                            print(f"   ‚ùå {description}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    else:
                        print(f"   ‚ùå {description}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API")
                else:
                    print(f"   ‚ùå {description}: HTTP {response.status_code}")
                    
            except Exception as e:
                print(f"   ‚ùå {description}: –û—à–∏–±–∫–∞ - {e}")
            
            time.sleep(0.5)  # –ù–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–µ–º API
    
    print("\n" + "="*60)
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–∏–æ–¥—ã
    historical_periods = [
        ("2020-02-01", "2020-06-01", "COVID –∫—Ä–∏–∑–∏—Å"),
        ("2022-02-24", "2022-12-31", "–°–∞–Ω–∫—Ü–∏–∏ 2022"), 
        ("2019-01-01", "2019-12-31", "2019 –≥–æ–¥"),
        ("2021-01-01", "2021-12-31", "2021 –≥–æ–¥")
    ]
    
    print("\nüï∞Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤:")
    
    for start_str, end_str, description in historical_periods:
        print(f"\nüìÖ {description} ({start_str} - {end_str}):")
        
        available_tickers = []
        
        for ticker in test_tickers[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
            url = f"https://iss.moex.com/iss/engines/stock/markets/shares/securities/{ticker}/candles.json"
            params = {
                'from': start_str,
                'till': end_str,
                'interval': 24
            }
            
            try:
                response = requests.get(url, params=params, timeout=10)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if 'candles' in data and 'data' in data['candles']:
                        data_points = len(data['candles']['data'])
                        
                        if data_points > 0:
                            available_tickers.append(f"{ticker}({data_points} —Ç–æ—á–µ–∫)")
                            print(f"   ‚úÖ {ticker}: {data_points} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
                        else:
                            print(f"   ‚ùå {ticker}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    else:
                        print(f"   ‚ùå {ticker}: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                        
            except Exception as e:
                print(f"   ‚ùå {ticker}: –û—à–∏–±–∫–∞ - {e}")
            
            time.sleep(0.3)
        
        if available_tickers:
            print(f"   üìä –î–æ—Å—Ç—É–ø–Ω—ã –¥–∞–Ω–Ω—ã–µ: {', '.join(available_tickers)}")
        else:
            print(f"   ‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥")

def check_fund_inception_dates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ–Ω–¥–æ–≤"""
    
    print("\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ–Ω–¥–æ–≤:")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–æ–Ω–¥–∞—Ö
    try:
        from pathlib import Path
        data_files = list(Path('.').glob('enhanced_etf_data_*.csv'))
        if not data_files:
            data_files = list(Path('.').glob('full_moex_etf_data_*.csv'))
        
        if data_files:
            latest_data = max(data_files, key=lambda x: x.stat().st_mtime)
            df = pd.read_csv(latest_data)
            
            if 'inception_date' in df.columns:
                df['inception_date'] = pd.to_datetime(df['inception_date'], errors='coerce')
                df_valid = df.dropna(subset=['inception_date'])
                
                if len(df_valid) > 0:
                    print(f"   üìä –§–æ–Ω–¥–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –¥–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω–∏—è: {len(df_valid)}")
                    print(f"   üìÖ –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ñ–æ–Ω–¥: {df_valid['inception_date'].min().strftime('%Y-%m-%d')}")
                    print(f"   üìÖ –°–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–æ–Ω–¥: {df_valid['inception_date'].max().strftime('%Y-%m-%d')}")
                    
                    # –§–æ–Ω–¥—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–æ COVID
                    pre_covid = df_valid[df_valid['inception_date'] < '2020-02-01']
                    print(f"   ü¶† –§–æ–Ω–¥–æ–≤ –¥–æ COVID (–¥–æ 2020-02-01): {len(pre_covid)}")
                    
                    if len(pre_covid) > 0:
                        print("   üìã –°—Ç–∞—Ä–µ–π—à–∏–µ —Ñ–æ–Ω–¥—ã:")
                        for _, row in pre_covid.nsmallest(10, 'inception_date').iterrows():
                            print(f"      {row['ticker']}: {row['inception_date'].strftime('%Y-%m-%d')}")
                else:
                    print("   ‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è")
            else:
                print("   ‚ùå –ö–æ–ª–æ–Ω–∫–∞ inception_date –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("   ‚ùå –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞—Ç: {e}")

def suggest_data_expansion_strategy():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\n" + "="*60)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –†–ê–°–®–ò–†–ï–ù–ò–Æ –î–ê–ù–ù–´–•:")
    print("="*60)
    
    print("""
1. üìà –†–ê–°–®–ò–†–ï–ù–ò–ï –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•:
   ‚Ä¢ MOEX API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –¥–æ 5+ –ª–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏
   ‚Ä¢ –ù—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä days –≤ get_historical_data()
   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∫—ç—à –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
   
2. üîÑ –°–¢–†–ê–¢–ï–ì–ò–Ø –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê COVID/–ö–†–ò–ó–ò–°–û–í:
   ‚Ä¢ –ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã (–Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–µ–≥–æ–¥–Ω—è)
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ–Ω–¥—ã, —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–≤—à–∏–µ –≤ —Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
   ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–∏–æ–¥—ã –æ—Ç–¥–µ–ª—å–Ω–æ
   
3. üìä –ê–ù–ê–õ–ò–ó –°–ß–ê –ò –ü–†–ò–¢–û–ö–û–í:
   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å market_cap –∏–∑ MOEX API
   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤
   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–æ–Ω–¥–æ–≤
   
4. ‚ö° –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï:
   ‚Ä¢ Cron job –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   ‚Ä¢ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
   
5. üéØ –£–õ–£–ß–®–ï–ù–ò–Ø –í–†–ï–ú–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:
   ‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
   ‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ benchmark –¥–∞–Ω–Ω—ã—Ö (–∏–Ω–¥–µ–∫—Å—ã MOEX)
""")

if __name__ == "__main__":
    test_moex_data_limits()
    check_fund_inception_dates()
    suggest_data_expansion_strategy()